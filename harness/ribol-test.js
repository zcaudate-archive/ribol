var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if(!COMPILED) {
    if(goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while(namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if(goog.getObjectByName(namespace)) {
        break
      }
      goog.implicitNamespaces_[namespace] = true
    }
  }
  goog.exportPath_(name)
};
goog.setTestOnly = function(opt_message) {
  if(COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if(!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name)
  };
  goog.implicitNamespaces_ = {}
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if(!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0])
  }
  for(var part;parts.length && (part = parts.shift());) {
    if(!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object
    }else {
      if(cur[part]) {
        cur = cur[part]
      }else {
        cur = cur[part] = {}
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for(var part;part = parts.shift();) {
    if(goog.isDefAndNotNull(cur[part])) {
      cur = cur[part]
    }else {
      return null
    }
  }
  return cur
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for(var x in obj) {
    global[x] = obj[x]
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if(!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for(var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if(!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {}
      }
      deps.pathToNames[path][provide] = true
    }
    for(var j = 0;require = requires[j];j++) {
      if(!(path in deps.requires)) {
        deps.requires[path] = {}
      }
      deps.requires[path][require] = true
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if(!COMPILED) {
    if(goog.isProvided_(name)) {
      return
    }
    if(goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if(path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if(goog.global.console) {
      goog.global.console["error"](errorMessage)
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if(ctor.instance_) {
      return ctor.instance_
    }
    if(goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor
    }
    return ctor.instance_ = new ctor
  }
};
goog.instantiatedSingletons_ = [];
if(!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc
  };
  goog.findBasePath_ = function() {
    if(goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return
    }else {
      if(!goog.inHtmlDocument_()) {
        return
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for(var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if(src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if(!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true
    }
  };
  goog.writeScriptTag_ = function(src) {
    if(goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if(doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if(isDeps) {
          return false
        }else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true
    }else {
      return false
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if(path in deps.written) {
        return
      }
      if(path in deps.visited) {
        if(!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path)
        }
        return
      }
      deps.visited[path] = true;
      if(path in deps.requires) {
        for(var requireName in deps.requires[path]) {
          if(!goog.isProvided_(requireName)) {
            if(requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName])
            }else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if(!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path)
      }
    }
    for(var path in goog.included_) {
      if(!deps.written[path]) {
        visitNode(path)
      }
    }
    for(var i = 0;i < scripts.length;i++) {
      if(scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i])
      }else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if(rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule]
    }else {
      return null
    }
  };
  goog.findBasePath_();
  if(!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js")
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if(s == "object") {
    if(value) {
      if(value instanceof Array) {
        return"array"
      }else {
        if(value instanceof Object) {
          return s
        }
      }
      var className = Object.prototype.toString.call((value));
      if(className == "[object Window]") {
        return"object"
      }
      if(className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return"array"
      }
      if(className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return"function"
      }
    }else {
      return"null"
    }
  }else {
    if(s == "function" && typeof value.call == "undefined") {
      return"object"
    }
  }
  return s
};
goog.isDef = function(val) {
  return val !== undefined
};
goog.isNull = function(val) {
  return val === null
};
goog.isDefAndNotNull = function(val) {
  return val != null
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array"
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number"
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function"
};
goog.isString = function(val) {
  return typeof val == "string"
};
goog.isBoolean = function(val) {
  return typeof val == "boolean"
};
goog.isNumber = function(val) {
  return typeof val == "number"
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function"
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function"
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_)
};
goog.removeUid = function(obj) {
  if("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_)
  }
  try {
    delete obj[goog.UID_PROPERTY_]
  }catch(ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if(type == "object" || type == "array") {
    if(obj.clone) {
      return obj.clone()
    }
    var clone = type == "array" ? [] : {};
    for(var key in obj) {
      clone[key] = goog.cloneObject(obj[key])
    }
    return clone
  }
  return obj
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments))
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if(!fn) {
    throw new Error;
  }
  if(arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs)
    }
  }else {
    return function() {
      return fn.apply(selfObj, arguments)
    }
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if(Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_
  }else {
    goog.bind = goog.bindJs_
  }
  return goog.bind.apply(null, arguments)
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs)
  }
};
goog.mixin = function(target, source) {
  for(var x in source) {
    target[x] = source[x]
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date
};
goog.globalEval = function(script) {
  if(goog.global.execScript) {
    goog.global.execScript(script, "JavaScript")
  }else {
    if(goog.global.eval) {
      if(goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if(typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true
        }else {
          goog.evalWorksForGlobals_ = false
        }
      }
      if(goog.evalWorksForGlobals_) {
        goog.global.eval(script)
      }else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt)
      }
    }else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for(var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]))
    }
    return mapped.join("-")
  };
  var rename;
  if(goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts
  }else {
    rename = function(a) {
      return a
    }
  }
  if(opt_modifier) {
    return className + "-" + rename(opt_modifier)
  }else {
    return rename(className)
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if(!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for(var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value)
  }
  return str
};
goog.getMsgWithFallback = function(a, b) {
  return a
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo)
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if(caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1))
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for(var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if(ctor.prototype[opt_methodName] === caller) {
      foundCaller = true
    }else {
      if(foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args)
      }
    }
  }
  if(me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args)
  }else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global)
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0
};
goog.string.subs = function(str, var_args) {
  for(var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement)
  }
  return str
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "")
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str)
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str))
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str)
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str)
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str)
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str)
};
goog.string.isSpace = function(ch) {
  return ch == " "
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd"
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ")
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n")
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ")
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ")
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "")
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "")
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "")
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "")
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if(test1 < test2) {
    return-1
  }else {
    if(test1 == test2) {
      return 0
    }else {
      return 1
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if(str1 == str2) {
    return 0
  }
  if(!str1) {
    return-1
  }
  if(!str2) {
    return 1
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for(var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if(a != b) {
      var num1 = parseInt(a, 10);
      if(!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if(!isNaN(num2) && num1 - num2) {
          return num1 - num2
        }
      }
      return a < b ? -1 : 1
    }
  }
  if(tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length
  }
  return str1 < str2 ? -1 : 1
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str))
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "))
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e")
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if(opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;")
  }else {
    if(!goog.string.allRe_.test(str)) {
      return str
    }
    if(str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;")
    }
    if(str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;")
    }
    if(str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;")
    }
    if(str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;")
    }
    return str
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if(goog.string.contains(str, "\x26")) {
    if("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str)
    }else {
      return goog.string.unescapePureXmlEntities_(str)
    }
  }
  return str
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if(value) {
      return value
    }
    if(entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if(!isNaN(n)) {
        value = String.fromCharCode(n)
      }
    }
    if(!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1)
    }
    return seen[s] = value
  })
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return"\x26";
      case "lt":
        return"\x3c";
      case "gt":
        return"\x3e";
      case "quot":
        return'"';
      default:
        if(entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if(!isNaN(n)) {
            return String.fromCharCode(n)
          }
        }
        return s
    }
  })
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml)
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for(var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if(str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1)
    }
  }
  return str
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if(opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str)
  }
  if(str.length > chars) {
    str = str.substring(0, chars - 3) + "..."
  }
  if(opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str)
  }
  return str
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if(opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str)
  }
  if(opt_trailingChars && str.length > chars) {
    if(opt_trailingChars > chars) {
      opt_trailingChars = chars
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint)
  }else {
    if(str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos)
    }
  }
  if(opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str)
  }
  return str
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if(s.quote) {
    return s.quote()
  }else {
    var sb = ['"'];
    for(var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch))
    }
    sb.push('"');
    return sb.join("")
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for(var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i))
  }
  return sb.join("")
};
goog.string.escapeChar = function(c) {
  if(c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c]
  }
  if(c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c]
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if(cc > 31 && cc < 127) {
    rv = c
  }else {
    if(cc < 256) {
      rv = "\\x";
      if(cc < 16 || cc > 256) {
        rv += "0"
      }
    }else {
      rv = "\\u";
      if(cc < 4096) {
        rv += "0"
      }
    }
    rv += cc.toString(16).toUpperCase()
  }
  return goog.string.jsEscapeCache_[c] = rv
};
goog.string.toMap = function(s) {
  var rv = {};
  for(var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true
  }
  return rv
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if(index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength)
  }
  return resultStr
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "")
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "")
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08")
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string)
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if(index == -1) {
    index = s.length
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj)
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "")
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36)
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for(var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if(v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2])
    }while(order == 0)
  }
  return order
};
goog.string.compareElements_ = function(left, right) {
  if(left < right) {
    return-1
  }else {
    if(left > right) {
      return 1
    }
  }
  return 0
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for(var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_
  }
  return result
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return"goog_" + goog.string.uniqueStringCounter_++
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if(num == 0 && goog.string.isEmpty(str)) {
    return NaN
  }
  return num
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase()
  })
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase()
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase()
  })
};
goog.string.parseInt = function(value) {
  if(isFinite(value)) {
    value = String(value)
  }
  if(goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10)
  }
  return NaN
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if(Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error)
  }else {
    this.stack = (new Error).stack || ""
  }
  if(opt_msg) {
    this.message = String(opt_msg)
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if(givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs
  }else {
    if(defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return condition
};
goog.asserts.fail = function(opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return(value)
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return(value)
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return(value)
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return(value)
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return(value)
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return(value)
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3))
  }
  return(value)
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1]
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex)
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if(goog.isString(arr)) {
    if(!goog.isString(obj) || obj.length != 1) {
      return-1
    }
    return arr.indexOf(obj, fromIndex)
  }
  for(var i = fromIndex;i < arr.length;i++) {
    if(i in arr && arr[i] === obj) {
      return i
    }
  }
  return-1
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex)
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if(fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex)
  }
  if(goog.isString(arr)) {
    if(!goog.isString(obj) || obj.length != 1) {
      return-1
    }
    return arr.lastIndexOf(obj, fromIndex)
  }
  for(var i = fromIndex;i >= 0;i--) {
    if(i in arr && arr[i] === obj) {
      return i
    }
  }
  return-1
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      f.call(opt_obj, arr2[i], i, arr)
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = l - 1;i >= 0;--i) {
    if(i in arr2) {
      f.call(opt_obj, arr2[i], i, arr)
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      var val = arr2[i];
      if(f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val
      }
    }
  }
  return res
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr)
    }
  }
  return res
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if(arr.reduce) {
    if(opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val)
    }else {
      return arr.reduce(f, val)
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr)
  });
  return rval
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if(arr.reduceRight) {
    if(opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val)
    }else {
      return arr.reduceRight(f, val)
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr)
  });
  return rval
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true
    }
  }
  return false
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false
    }
  }
  return true
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if(f.call(opt_obj, element, index, arr)) {
      ++count
    }
  }, opt_obj);
  return count
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i
    }
  }
  return-1
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = l - 1;i >= 0;i--) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i
    }
  }
  return-1
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0
};
goog.array.clear = function(arr) {
  if(!goog.isArray(arr)) {
    for(var i = arr.length - 1;i >= 0;i--) {
      delete arr[i]
    }
  }
  arr.length = 0
};
goog.array.insert = function(arr, obj) {
  if(!goog.array.contains(arr, obj)) {
    arr.push(obj)
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj)
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd)
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if(arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj)
  }else {
    goog.array.insertAt(arr, obj, i)
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if(rv = i >= 0) {
    goog.array.removeAt(arr, i)
  }
  return rv
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if(i >= 0) {
    goog.array.removeAt(arr, i);
    return true
  }
  return false
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments)
};
goog.array.toArray = function(object) {
  var length = object.length;
  if(length > 0) {
    var rv = new Array(length);
    for(var i = 0;i < length;i++) {
      rv[i] = object[i]
    }
    return rv
  }
  return[]
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for(var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if(goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2)
    }else {
      if(isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for(var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j]
        }
      }else {
        arr1.push(arr2)
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1))
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if(arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start)
  }else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end)
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while(cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if(!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current
    }
  }
  returnArray.length = cursorInsert
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target)
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj)
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while(left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if(isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr)
    }else {
      compareResult = compareFn(opt_target, arr[middle])
    }
    if(compareResult > 0) {
      left = middle + 1
    }else {
      right = middle;
      found = !compareResult
    }
  }
  return found ? left : ~left
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare)
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for(var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]}
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index
  }
  goog.array.sort(arr, stableCompareFn);
  for(var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key])
  })
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for(var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if(compareResult > 0 || compareResult == 0 && opt_strict) {
      return false
    }
  }
  return true
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if(!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for(var i = 0;i < l;i++) {
    if(!equalsFn(arr1[i], arr2[i])) {
      return false
    }
  }
  return true
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn)
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for(var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if(result != 0) {
      return result
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length)
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if(index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true
  }
  return false
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for(var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if(goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value)
    }
  }
  return buckets
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element
  });
  return ret
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if(opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end
  }
  if(step * (end - start) < 0) {
    return[]
  }
  if(step > 0) {
    for(var i = start;i < end;i += step) {
      array.push(i)
    }
  }else {
    for(var i = start;i > end;i += step) {
      array.push(i)
    }
  }
  return array
};
goog.array.repeat = function(value, n) {
  var array = [];
  for(var i = 0;i < n;i++) {
    array[i] = value
  }
  return array
};
goog.array.flatten = function(var_args) {
  var result = [];
  for(var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if(goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element))
    }else {
      result.push(element)
    }
  }
  return result
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if(array.length) {
    n %= array.length;
    if(n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n))
    }else {
      if(n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n))
      }
    }
  }
  return array
};
goog.array.zip = function(var_args) {
  if(!arguments.length) {
    return[]
  }
  var result = [];
  for(var i = 0;true;i++) {
    var value = [];
    for(var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if(i >= arr.length) {
        return result
      }
      value.push(arr[i])
    }
    result.push(value)
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for(var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for(var key in obj) {
    f.call(opt_obj, obj[key], key, obj)
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for(var key in obj) {
    if(f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key]
    }
  }
  return res
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for(var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj)
  }
  return res
};
goog.object.some = function(obj, f, opt_obj) {
  for(var key in obj) {
    if(f.call(opt_obj, obj[key], key, obj)) {
      return true
    }
  }
  return false
};
goog.object.every = function(obj, f, opt_obj) {
  for(var key in obj) {
    if(!f.call(opt_obj, obj[key], key, obj)) {
      return false
    }
  }
  return true
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for(var key in obj) {
    rv++
  }
  return rv
};
goog.object.getAnyKey = function(obj) {
  for(var key in obj) {
    return key
  }
};
goog.object.getAnyValue = function(obj) {
  for(var key in obj) {
    return obj[key]
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val)
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for(var key in obj) {
    res[i++] = obj[key]
  }
  return res
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for(var key in obj) {
    res[i++] = key
  }
  return res
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for(var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if(!goog.isDef(obj)) {
      break
    }
  }
  return obj
};
goog.object.containsKey = function(obj, key) {
  return key in obj
};
goog.object.containsValue = function(obj, val) {
  for(var key in obj) {
    if(obj[key] == val) {
      return true
    }
  }
  return false
};
goog.object.findKey = function(obj, f, opt_this) {
  for(var key in obj) {
    if(f.call(opt_this, obj[key], key, obj)) {
      return key
    }
  }
  return undefined
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key]
};
goog.object.isEmpty = function(obj) {
  for(var key in obj) {
    return false
  }
  return true
};
goog.object.clear = function(obj) {
  for(var i in obj) {
    delete obj[i]
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if(rv = key in obj) {
    delete obj[key]
  }
  return rv
};
goog.object.add = function(obj, key, val) {
  if(key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val)
};
goog.object.get = function(obj, key, opt_val) {
  if(key in obj) {
    return obj[key]
  }
  return opt_val
};
goog.object.set = function(obj, key, value) {
  obj[key] = value
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value
};
goog.object.clone = function(obj) {
  var res = {};
  for(var key in obj) {
    res[key] = obj[key]
  }
  return res
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if(type == "object" || type == "array") {
    if(obj.clone) {
      return obj.clone()
    }
    var clone = type == "array" ? [] : {};
    for(var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key])
    }
    return clone
  }
  return obj
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for(var key in obj) {
    transposed[obj[key]] = key
  }
  return transposed
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for(var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for(key in source) {
      target[key] = source[key]
    }
    for(var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if(Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key]
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if(argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0])
  }
  if(argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for(var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1]
  }
  return rv
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if(argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0])
  }
  var rv = {};
  for(var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true
  }
  return rv
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if(Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result)
  }
  return result
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj)
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if(opt_a1 != null) {
    this.append.apply(this, arguments)
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if(opt_a2 != null) {
    for(var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i]
    }
  }
  return this
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = ""
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2060";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null)
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__15053__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args))
    };
    var G__15053 = function(var_args) {
      var args = null;
      if(arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__15053__delegate.call(this, args)
    };
    G__15053.cljs$lang$maxFixedArity = 0;
    G__15053.cljs$lang$applyTo = function(arglist__15054) {
      var args = cljs.core.seq(arglist__15054);
      return G__15053__delegate(args)
    };
    G__15053.cljs$core$IFn$_invoke$arity$variadic = G__15053__delegate;
    return G__15053
  }()
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number"
};
cljs.core.not = function not(x) {
  if(cljs.core.truth_(x)) {
    return false
  }else {
    return true
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x)
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if(p[goog.typeOf(x__$1)]) {
    return true
  }else {
    if(p["_"]) {
      return true
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false
      }else {
        return null
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if(x == null) {
    return null
  }else {
    return x.constructor
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3474__auto__ = ty;
    if(cljs.core.truth_(and__3474__auto__)) {
      return ty.cljs$lang$type
    }else {
      return and__3474__auto__
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""))
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if(cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s
  }else {
    return[cljs.core.str(ty)].join("")
  }
};
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4299__auto___15055 = len;
  var i_15056 = 0;
  while(true) {
    if(i_15056 < n__4299__auto___15055) {
      new_arr[i_15056] = arr[i_15056];
      var G__15057 = i_15056 + 1;
      i_15056 = G__15057;
      continue
    }else {
    }
    break
  }
  return new_arr
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments)
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size)
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size)
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array
}();
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i]
  };
  var aget__3 = function() {
    var G__15058__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs)
    };
    var G__15058 = function(array, i, var_args) {
      var idxs = null;
      if(arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15058__delegate.call(this, array, i, idxs)
    };
    G__15058.cljs$lang$maxFixedArity = 2;
    G__15058.cljs$lang$applyTo = function(arglist__15059) {
      var array = cljs.core.first(arglist__15059);
      arglist__15059 = cljs.core.next(arglist__15059);
      var i = cljs.core.first(arglist__15059);
      var idxs = cljs.core.rest(arglist__15059);
      return G__15058__delegate(array, i, idxs)
    };
    G__15058.cljs$core$IFn$_invoke$arity$variadic = G__15058__delegate;
    return G__15058
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val
  };
  var aset__4 = function() {
    var G__15060__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv)
    };
    var G__15060 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if(arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__15060__delegate.call(this, array, idx, idx2, idxv)
    };
    G__15060.cljs$lang$maxFixedArity = 3;
    G__15060.cljs$lang$applyTo = function(arglist__15061) {
      var array = cljs.core.first(arglist__15061);
      arglist__15061 = cljs.core.next(arglist__15061);
      var idx = cljs.core.first(arglist__15061);
      arglist__15061 = cljs.core.next(arglist__15061);
      var idx2 = cljs.core.first(arglist__15061);
      var idxv = cljs.core.rest(arglist__15061);
      return G__15060__delegate(array, idx, idx2, idxv)
    };
    G__15060.cljs$core$IFn$_invoke$arity$variadic = G__15060__delegate;
    return G__15060
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset
}();
cljs.core.alength = function alength(array) {
  return array.length
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq)
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a
    }, [], aseq)
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array
}();
cljs.core.Fn = function() {
  var obj15063 = {};
  return obj15063
}();
cljs.core.IFn = function() {
  var obj15065 = {};
  return obj15065
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$)
    }
  };
  var _invoke__2 = function(this$, a) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a)
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b)
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c)
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d)
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e)
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f)
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g)
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h)
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i)
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j)
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k)
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l)
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m)
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s)
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t)
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if(function() {
      var and__3474__auto__ = this$;
      if(and__3474__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21
      }else {
        return and__3474__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }else {
      var x__4079__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3483__auto__ = cljs.core._invoke[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._invoke["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke
}();
cljs.core.ICounted = function() {
  var obj15067 = {};
  return obj15067
}();
cljs.core._count = function _count(coll) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._count[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._count["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj15069 = {};
  return obj15069
}();
cljs.core._empty = function _empty(coll) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._empty[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._empty["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ICollection = function() {
  var obj15071 = {};
  return obj15071
}();
cljs.core._conj = function _conj(coll, o) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._conj[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._conj["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o)
  }
};
cljs.core.IIndexed = function() {
  var obj15073 = {};
  return obj15073
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if(function() {
      var and__3474__auto__ = coll;
      if(and__3474__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2
      }else {
        return and__3474__auto__
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n)
    }else {
      var x__4079__auto__ = coll == null ? null : coll;
      return function() {
        var or__3483__auto__ = cljs.core._nth[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._nth["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n)
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if(function() {
      var and__3474__auto__ = coll;
      if(and__3474__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3
      }else {
        return and__3474__auto__
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found)
    }else {
      var x__4079__auto__ = coll == null ? null : coll;
      return function() {
        var or__3483__auto__ = cljs.core._nth[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._nth["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found)
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth
}();
cljs.core.ASeq = function() {
  var obj15075 = {};
  return obj15075
}();
cljs.core.ISeq = function() {
  var obj15077 = {};
  return obj15077
}();
cljs.core._first = function _first(coll) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._first[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._first["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._rest = function _rest(coll) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._rest[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._rest["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.INext = function() {
  var obj15079 = {};
  return obj15079
}();
cljs.core._next = function _next(coll) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$INext$_next$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._next[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._next["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ILookup = function() {
  var obj15081 = {};
  return obj15081
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if(function() {
      var and__3474__auto__ = o;
      if(and__3474__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2
      }else {
        return and__3474__auto__
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k)
    }else {
      var x__4079__auto__ = o == null ? null : o;
      return function() {
        var or__3483__auto__ = cljs.core._lookup[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._lookup["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k)
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if(function() {
      var and__3474__auto__ = o;
      if(and__3474__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3
      }else {
        return and__3474__auto__
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found)
    }else {
      var x__4079__auto__ = o == null ? null : o;
      return function() {
        var or__3483__auto__ = cljs.core._lookup[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._lookup["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found)
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup
}();
cljs.core.IAssociative = function() {
  var obj15083 = {};
  return obj15083
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k)
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._assoc[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._assoc["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v)
  }
};
cljs.core.IMap = function() {
  var obj15085 = {};
  return obj15085
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._dissoc[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._dissoc["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k)
  }
};
cljs.core.IMapEntry = function() {
  var obj15087 = {};
  return obj15087
}();
cljs.core._key = function _key(coll) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._key[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._key["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._val = function _val(coll) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._val[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._val["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ISet = function() {
  var obj15089 = {};
  return obj15089
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._disjoin[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._disjoin["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v)
  }
};
cljs.core.IStack = function() {
  var obj15091 = {};
  return obj15091
}();
cljs.core._peek = function _peek(coll) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._peek[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._peek["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._pop = function _pop(coll) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._pop[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._pop["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IVector = function() {
  var obj15093 = {};
  return obj15093
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._assoc_n[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._assoc_n["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val)
  }
};
cljs.core.IDeref = function() {
  var obj15095 = {};
  return obj15095
}();
cljs.core._deref = function _deref(o) {
  if(function() {
    var and__3474__auto__ = o;
    if(and__3474__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o)
  }else {
    var x__4079__auto__ = o == null ? null : o;
    return function() {
      var or__3483__auto__ = cljs.core._deref[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._deref["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj15097 = {};
  return obj15097
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if(function() {
    var and__3474__auto__ = o;
    if(and__3474__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3
    }else {
      return and__3474__auto__
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val)
  }else {
    var x__4079__auto__ = o == null ? null : o;
    return function() {
      var or__3483__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._deref_with_timeout["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val)
  }
};
cljs.core.IMeta = function() {
  var obj15099 = {};
  return obj15099
}();
cljs.core._meta = function _meta(o) {
  if(function() {
    var and__3474__auto__ = o;
    if(and__3474__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o)
  }else {
    var x__4079__auto__ = o == null ? null : o;
    return function() {
      var or__3483__auto__ = cljs.core._meta[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._meta["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.IWithMeta = function() {
  var obj15101 = {};
  return obj15101
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if(function() {
    var and__3474__auto__ = o;
    if(and__3474__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta)
  }else {
    var x__4079__auto__ = o == null ? null : o;
    return function() {
      var or__3483__auto__ = cljs.core._with_meta[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._with_meta["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta)
  }
};
cljs.core.IReduce = function() {
  var obj15103 = {};
  return obj15103
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if(function() {
      var and__3474__auto__ = coll;
      if(and__3474__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2
      }else {
        return and__3474__auto__
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f)
    }else {
      var x__4079__auto__ = coll == null ? null : coll;
      return function() {
        var or__3483__auto__ = cljs.core._reduce[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._reduce["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f)
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if(function() {
      var and__3474__auto__ = coll;
      if(and__3474__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3
      }else {
        return and__3474__auto__
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start)
    }else {
      var x__4079__auto__ = coll == null ? null : coll;
      return function() {
        var or__3483__auto__ = cljs.core._reduce[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = cljs.core._reduce["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start)
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce
}();
cljs.core.IKVReduce = function() {
  var obj15105 = {};
  return obj15105
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._kv_reduce["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init)
  }
};
cljs.core.IEquiv = function() {
  var obj15107 = {};
  return obj15107
}();
cljs.core._equiv = function _equiv(o, other) {
  if(function() {
    var and__3474__auto__ = o;
    if(and__3474__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other)
  }else {
    var x__4079__auto__ = o == null ? null : o;
    return function() {
      var or__3483__auto__ = cljs.core._equiv[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._equiv["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other)
  }
};
cljs.core.IHash = function() {
  var obj15109 = {};
  return obj15109
}();
cljs.core._hash = function _hash(o) {
  if(function() {
    var and__3474__auto__ = o;
    if(and__3474__auto__) {
      return o.cljs$core$IHash$_hash$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o)
  }else {
    var x__4079__auto__ = o == null ? null : o;
    return function() {
      var or__3483__auto__ = cljs.core._hash[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._hash["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.ISeqable = function() {
  var obj15111 = {};
  return obj15111
}();
cljs.core._seq = function _seq(o) {
  if(function() {
    var and__3474__auto__ = o;
    if(and__3474__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o)
  }else {
    var x__4079__auto__ = o == null ? null : o;
    return function() {
      var or__3483__auto__ = cljs.core._seq[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._seq["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.ISequential = function() {
  var obj15113 = {};
  return obj15113
}();
cljs.core.IList = function() {
  var obj15115 = {};
  return obj15115
}();
cljs.core.IRecord = function() {
  var obj15117 = {};
  return obj15117
}();
cljs.core.IReversible = function() {
  var obj15119 = {};
  return obj15119
}();
cljs.core._rseq = function _rseq(coll) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._rseq[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._rseq["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ISorted = function() {
  var obj15121 = {};
  return obj15121
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._sorted_seq["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_)
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._sorted_seq_from["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_)
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._entry_key[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._entry_key["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry)
  }
};
cljs.core._comparator = function _comparator(coll) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._comparator[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._comparator["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IWriter = function() {
  var obj15123 = {};
  return obj15123
}();
cljs.core._write = function _write(writer, s) {
  if(function() {
    var and__3474__auto__ = writer;
    if(and__3474__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s)
  }else {
    var x__4079__auto__ = writer == null ? null : writer;
    return function() {
      var or__3483__auto__ = cljs.core._write[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._write["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s)
  }
};
cljs.core._flush = function _flush(writer) {
  if(function() {
    var and__3474__auto__ = writer;
    if(and__3474__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer)
  }else {
    var x__4079__auto__ = writer == null ? null : writer;
    return function() {
      var or__3483__auto__ = cljs.core._flush[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._flush["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer)
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj15125 = {};
  return obj15125
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if(function() {
    var and__3474__auto__ = o;
    if(and__3474__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3
    }else {
      return and__3474__auto__
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts)
  }else {
    var x__4079__auto__ = o == null ? null : o;
    return function() {
      var or__3483__auto__ = cljs.core._pr_writer[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._pr_writer["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts)
  }
};
cljs.core.IPending = function() {
  var obj15127 = {};
  return obj15127
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if(function() {
    var and__3474__auto__ = d;
    if(and__3474__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d)
  }else {
    var x__4079__auto__ = d == null ? null : d;
    return function() {
      var or__3483__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._realized_QMARK_["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d)
  }
};
cljs.core.IWatchable = function() {
  var obj15129 = {};
  return obj15129
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if(function() {
    var and__3474__auto__ = this$;
    if(and__3474__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3
    }else {
      return and__3474__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval)
  }else {
    var x__4079__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3483__auto__ = cljs.core._notify_watches[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._notify_watches["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval)
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if(function() {
    var and__3474__auto__ = this$;
    if(and__3474__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3
    }else {
      return and__3474__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f)
  }else {
    var x__4079__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3483__auto__ = cljs.core._add_watch[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._add_watch["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f)
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if(function() {
    var and__3474__auto__ = this$;
    if(and__3474__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key)
  }else {
    var x__4079__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3483__auto__ = cljs.core._remove_watch[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._remove_watch["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key)
  }
};
cljs.core.IEditableCollection = function() {
  var obj15131 = {};
  return obj15131
}();
cljs.core._as_transient = function _as_transient(coll) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._as_transient[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._as_transient["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ITransientCollection = function() {
  var obj15133 = {};
  return obj15133
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if(function() {
    var and__3474__auto__ = tcoll;
    if(and__3474__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val)
  }else {
    var x__4079__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3483__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._conj_BANG_["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val)
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if(function() {
    var and__3474__auto__ = tcoll;
    if(and__3474__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll)
  }else {
    var x__4079__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3483__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._persistent_BANG_["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll)
  }
};
cljs.core.ITransientAssociative = function() {
  var obj15135 = {};
  return obj15135
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if(function() {
    var and__3474__auto__ = tcoll;
    if(and__3474__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3
    }else {
      return and__3474__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val)
  }else {
    var x__4079__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3483__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._assoc_BANG_["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val)
  }
};
cljs.core.ITransientMap = function() {
  var obj15137 = {};
  return obj15137
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if(function() {
    var and__3474__auto__ = tcoll;
    if(and__3474__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key)
  }else {
    var x__4079__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3483__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key)
  }
};
cljs.core.ITransientVector = function() {
  var obj15139 = {};
  return obj15139
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if(function() {
    var and__3474__auto__ = tcoll;
    if(and__3474__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3
    }else {
      return and__3474__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val)
  }else {
    var x__4079__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3483__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val)
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if(function() {
    var and__3474__auto__ = tcoll;
    if(and__3474__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll)
  }else {
    var x__4079__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3483__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._pop_BANG_["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll)
  }
};
cljs.core.ITransientSet = function() {
  var obj15141 = {};
  return obj15141
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if(function() {
    var and__3474__auto__ = tcoll;
    if(and__3474__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v)
  }else {
    var x__4079__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3483__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v)
  }
};
cljs.core.IComparable = function() {
  var obj15143 = {};
  return obj15143
}();
cljs.core._compare = function _compare(x, y) {
  if(function() {
    var and__3474__auto__ = x;
    if(and__3474__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y)
  }else {
    var x__4079__auto__ = x == null ? null : x;
    return function() {
      var or__3483__auto__ = cljs.core._compare[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._compare["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y)
  }
};
cljs.core.IChunk = function() {
  var obj15145 = {};
  return obj15145
}();
cljs.core._drop_first = function _drop_first(coll) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._drop_first[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._drop_first["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IChunkedSeq = function() {
  var obj15147 = {};
  return obj15147
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._chunked_first[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._chunked_first["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._chunked_rest["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IChunkedNext = function() {
  var obj15149 = {};
  return obj15149
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if(function() {
    var and__3474__auto__ = coll;
    if(and__3474__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll)
  }else {
    var x__4079__auto__ = coll == null ? null : coll;
    return function() {
      var or__3483__auto__ = cljs.core._chunked_next[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._chunked_next["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.INamed = function() {
  var obj15151 = {};
  return obj15151
}();
cljs.core._name = function _name(x) {
  if(function() {
    var and__3474__auto__ = x;
    if(and__3474__auto__) {
      return x.cljs$core$INamed$_name$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x)
  }else {
    var x__4079__auto__ = x == null ? null : x;
    return function() {
      var or__3483__auto__ = cljs.core._name[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._name["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x)
  }
};
cljs.core._namespace = function _namespace(x) {
  if(function() {
    var and__3474__auto__ = x;
    if(and__3474__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x)
  }else {
    var x__4079__auto__ = x == null ? null : x;
    return function() {
      var or__3483__auto__ = cljs.core._namespace[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._namespace["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x)
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/StringBufferWriter")
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s)
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb)
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("")
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name))
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if(cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0
  }else {
    if(cljs.core.truth_(function() {
      var and__3474__auto__ = cljs.core.not.call(null, a.ns);
      if(and__3474__auto__) {
        return b.ns
      }else {
        return and__3474__auto__
      }
    }())) {
      return-1
    }else {
      if(cljs.core.truth_(a.ns)) {
        if(cljs.core.not.call(null, b.ns)) {
          return 1
        }else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if(nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name)
          }else {
            return nsc
          }
        }
      }else {
        if(new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name)
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/Symbol")
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str)
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3887__auto__ = self__._hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta)
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta
};
cljs.core.Symbol.prototype.call = function() {
  var G__15153 = null;
  var G__15153__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null)
  };
  var G__15153__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found)
  };
  G__15153 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15153__2.call(this, self__, coll);
      case 3:
        return G__15153__3.call(this, self__, coll, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15153
}();
cljs.core.Symbol.prototype.apply = function(self__, args15152) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15152)))
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null)
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found)
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if(other instanceof cljs.core.Symbol) {
    return self__.str === other.str
  }else {
    return false
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta)
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if(name instanceof cljs.core.Symbol) {
      return name
    }else {
      return symbol.call(null, null, name)
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null)
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol
}();
cljs.core.seq = function seq(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__15155 = coll;
      if(G__15155) {
        var bit__4095__auto__ = G__15155.cljs$lang$protocol_mask$partition0$ & 8388608;
        if(bit__4095__auto__ || G__15155.cljs$core$ISeqable$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._seq.call(null, coll)
    }else {
      if(coll instanceof Array) {
        if(coll.length === 0) {
          return null
        }else {
          return new cljs.core.IndexedSeq(coll, 0)
        }
      }else {
        if(typeof coll === "string") {
          if(coll.length === 0) {
            return null
          }else {
            return new cljs.core.IndexedSeq(coll, 0)
          }
        }else {
          if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            }else {
              return null
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__15157 = coll;
      if(G__15157) {
        var bit__4095__auto__ = G__15157.cljs$lang$protocol_mask$partition0$ & 64;
        if(bit__4095__auto__ || G__15157.cljs$core$ISeq$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._first.call(null, coll)
    }else {
      var s = cljs.core.seq.call(null, coll);
      if(s == null) {
        return null
      }else {
        return cljs.core._first.call(null, s)
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if(!(coll == null)) {
    if(function() {
      var G__15159 = coll;
      if(G__15159) {
        var bit__4095__auto__ = G__15159.cljs$lang$protocol_mask$partition0$ & 64;
        if(bit__4095__auto__ || G__15159.cljs$core$ISeq$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._rest.call(null, coll)
    }else {
      var s = cljs.core.seq.call(null, coll);
      if(s) {
        return cljs.core._rest.call(null, s)
      }else {
        return cljs.core.List.EMPTY
      }
    }
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.next = function next(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__15161 = coll;
      if(G__15161) {
        var bit__4095__auto__ = G__15161.cljs$lang$protocol_mask$partition0$ & 128;
        if(bit__4095__auto__ || G__15161.cljs$core$INext$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._next.call(null, coll)
    }else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll))
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true
  };
  var _EQ___2 = function(x, y) {
    return x === y || cljs.core._equiv.call(null, x, y)
  };
  var _EQ___3 = function() {
    var G__15162__delegate = function(x, y, more) {
      while(true) {
        if(_EQ_.call(null, x, y)) {
          if(cljs.core.next.call(null, more)) {
            var G__15163 = y;
            var G__15164 = cljs.core.first.call(null, more);
            var G__15165 = cljs.core.next.call(null, more);
            x = G__15163;
            y = G__15164;
            more = G__15165;
            continue
          }else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more))
          }
        }else {
          return false
        }
        break
      }
    };
    var G__15162 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15162__delegate.call(this, x, y, more)
    };
    G__15162.cljs$lang$maxFixedArity = 2;
    G__15162.cljs$lang$applyTo = function(arglist__15166) {
      var x = cljs.core.first(arglist__15166);
      arglist__15166 = cljs.core.next(arglist__15166);
      var y = cljs.core.first(arglist__15166);
      var more = cljs.core.rest(arglist__15166);
      return G__15162__delegate(x, y, more)
    };
    G__15162.cljs$core$IFn$_invoke$arity$variadic = G__15162__delegate;
    return G__15162
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_
}();
cljs.core.IHash["null"] = true;
cljs.core._hash["null"] = function(o) {
  return 0
};
cljs.core.INext["null"] = true;
cljs.core._next["null"] = function(_) {
  return null
};
cljs.core.IKVReduce["null"] = true;
cljs.core._kv_reduce["null"] = function(_, f, init) {
  return init
};
cljs.core.ISet["null"] = true;
cljs.core._disjoin["null"] = function(_, v) {
  return null
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0
};
cljs.core.IStack["null"] = true;
cljs.core._peek["null"] = function(_) {
  return null
};
cljs.core._pop["null"] = function(_) {
  return null
};
cljs.core.IEquiv["null"] = true;
cljs.core._equiv["null"] = function(_, o) {
  return o == null
};
cljs.core.IWithMeta["null"] = true;
cljs.core._with_meta["null"] = function(_, meta) {
  return null
};
cljs.core.IMeta["null"] = true;
cljs.core._meta["null"] = function(_) {
  return null
};
cljs.core.IEmptyableCollection["null"] = true;
cljs.core._empty["null"] = function(_) {
  return null
};
cljs.core.IMap["null"] = true;
cljs.core._dissoc["null"] = function(_, k) {
  return null
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString()
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o)
};
cljs.core.inc = function inc(x) {
  return x + 1
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/Reduced")
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val)
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x)
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if(cnt === 0) {
      return f.call(null)
    }else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while(true) {
        if(n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if(cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval)
          }else {
            var G__15167 = nval;
            var G__15168 = n + 1;
            val = G__15167;
            n = G__15168;
            continue
          }
        }else {
          return val
        }
        break
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__15169 = nval;
          var G__15170 = n + 1;
          val__$1 = G__15169;
          n = G__15170;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__15171 = nval;
          var G__15172 = n + 1;
          val__$1 = G__15171;
          n = G__15172;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if(arr.length === 0) {
      return f.call(null)
    }else {
      var val = arr[0];
      var n = 1;
      while(true) {
        if(n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if(cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval)
          }else {
            var G__15173 = nval;
            var G__15174 = n + 1;
            val = G__15173;
            n = G__15174;
            continue
          }
        }else {
          return val
        }
        break
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__15175 = nval;
          var G__15176 = n + 1;
          val__$1 = G__15175;
          n = G__15176;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__15177 = nval;
          var G__15178 = n + 1;
          val__$1 = G__15177;
          n = G__15178;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__15180 = x;
  if(G__15180) {
    var bit__4102__auto__ = G__15180.cljs$lang$protocol_mask$partition0$ & 2;
    if(bit__4102__auto__ || G__15180.cljs$core$ICounted$) {
      return true
    }else {
      if(!G__15180.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__15180)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__15180)
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__15182 = x;
  if(G__15182) {
    var bit__4102__auto__ = G__15182.cljs$lang$protocol_mask$partition0$ & 16;
    if(bit__4102__auto__ || G__15182.cljs$core$IIndexed$) {
      return true
    }else {
      if(!G__15182.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__15182)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__15182)
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 166199550
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/IndexedSeq")
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1)
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if(self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1)
  }else {
    return null
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if(c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null)
  }else {
    return null
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i)
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i]
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if(self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if(i__$1 < self__.arr.length) {
    return self__.arr[i__$1]
  }else {
    return null
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if(i__$1 < self__.arr.length) {
    return self__.arr[i__$1]
  }else {
    return not_found
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i)
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0)
  };
  var prim_seq__2 = function(prim, i) {
    if(i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i)
    }else {
      return null
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0)
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i)
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/RSeq")
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1)
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1)
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1)
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i)
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null)
  }else {
    return null
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta)
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta)
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll))
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll))
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll))
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll))
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll))
};
cljs.core.last = function last(s) {
  while(true) {
    var sn = cljs.core.next.call(null, s);
    if(!(sn == null)) {
      var G__15183 = sn;
      s = G__15183;
      continue
    }else {
      return cljs.core.first.call(null, s)
    }
    break
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if(!(coll == null)) {
      return cljs.core._conj.call(null, coll, x)
    }else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x)
    }
  };
  var conj__3 = function() {
    var G__15184__delegate = function(coll, x, xs) {
      while(true) {
        if(cljs.core.truth_(xs)) {
          var G__15185 = conj.call(null, coll, x);
          var G__15186 = cljs.core.first.call(null, xs);
          var G__15187 = cljs.core.next.call(null, xs);
          coll = G__15185;
          x = G__15186;
          xs = G__15187;
          continue
        }else {
          return conj.call(null, coll, x)
        }
        break
      }
    };
    var G__15184 = function(coll, x, var_args) {
      var xs = null;
      if(arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15184__delegate.call(this, coll, x, xs)
    };
    G__15184.cljs$lang$maxFixedArity = 2;
    G__15184.cljs$lang$applyTo = function(arglist__15188) {
      var coll = cljs.core.first(arglist__15188);
      arglist__15188 = cljs.core.next(arglist__15188);
      var x = cljs.core.first(arglist__15188);
      var xs = cljs.core.rest(arglist__15188);
      return G__15184__delegate(coll, x, xs)
    };
    G__15184.cljs$core$IFn$_invoke$arity$variadic = G__15184__delegate;
    return G__15184
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj
}();
cljs.core.empty = function empty(coll) {
  return cljs.core._empty.call(null, coll)
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while(true) {
    if(cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s)
    }else {
      var G__15189 = cljs.core.next.call(null, s);
      var G__15190 = acc + 1;
      s = G__15189;
      acc = G__15190;
      continue
    }
    break
  }
};
cljs.core.count = function count(coll) {
  if(!(coll == null)) {
    if(function() {
      var G__15192 = coll;
      if(G__15192) {
        var bit__4095__auto__ = G__15192.cljs$lang$protocol_mask$partition0$ & 2;
        if(bit__4095__auto__ || G__15192.cljs$core$ICounted$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._count.call(null, coll)
    }else {
      if(coll instanceof Array) {
        return coll.length
      }else {
        if(typeof coll === "string") {
          return coll.length
        }else {
          if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll)
            }else {
              return null
            }
          }
        }
      }
    }
  }else {
    return 0
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while(true) {
      if(coll == null) {
        throw new Error("Index out of bounds");
      }else {
        if(n === 0) {
          if(cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll)
          }else {
            throw new Error("Index out of bounds");
          }
        }else {
          if(cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n)
          }else {
            if(cljs.core.seq.call(null, coll)) {
              var G__15193 = cljs.core.next.call(null, coll);
              var G__15194 = n - 1;
              coll = G__15193;
              n = G__15194;
              continue
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              }else {
                return null
              }
            }
          }
        }
      }
      break
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while(true) {
      if(coll == null) {
        return not_found
      }else {
        if(n === 0) {
          if(cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll)
          }else {
            return not_found
          }
        }else {
          if(cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found)
          }else {
            if(cljs.core.seq.call(null, coll)) {
              var G__15195 = cljs.core.next.call(null, coll);
              var G__15196 = n - 1;
              var G__15197 = not_found;
              coll = G__15195;
              n = G__15196;
              not_found = G__15197;
              continue
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found
              }else {
                return null
              }
            }
          }
        }
      }
      break
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if(coll == null) {
      return null
    }else {
      if(function() {
        var G__15202 = coll;
        if(G__15202) {
          var bit__4095__auto__ = G__15202.cljs$lang$protocol_mask$partition0$ & 16;
          if(bit__4095__auto__ || G__15202.cljs$core$IIndexed$) {
            return true
          }else {
            return false
          }
        }else {
          return false
        }
      }()) {
        return cljs.core._nth.call(null, coll, n)
      }else {
        if(coll instanceof Array) {
          if(n < coll.length) {
            return coll[n]
          }else {
            return null
          }
        }else {
          if(typeof coll === "string") {
            if(n < coll.length) {
              return coll[n]
            }else {
              return null
            }
          }else {
            if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if(function() {
                  var G__15203 = coll;
                  if(G__15203) {
                    var bit__4102__auto__ = G__15203.cljs$lang$protocol_mask$partition0$ & 64;
                    if(bit__4102__auto__ || G__15203.cljs$core$ISeq$) {
                      return true
                    }else {
                      if(!G__15203.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15203)
                      }else {
                        return false
                      }
                    }
                  }else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15203)
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n)
                }else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              }else {
                return null
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if(!(coll == null)) {
      if(function() {
        var G__15204 = coll;
        if(G__15204) {
          var bit__4095__auto__ = G__15204.cljs$lang$protocol_mask$partition0$ & 16;
          if(bit__4095__auto__ || G__15204.cljs$core$IIndexed$) {
            return true
          }else {
            return false
          }
        }else {
          return false
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found)
      }else {
        if(coll instanceof Array) {
          if(n < coll.length) {
            return coll[n]
          }else {
            return not_found
          }
        }else {
          if(typeof coll === "string") {
            if(n < coll.length) {
              return coll[n]
            }else {
              return not_found
            }
          }else {
            if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if(function() {
                  var G__15205 = coll;
                  if(G__15205) {
                    var bit__4102__auto__ = G__15205.cljs$lang$protocol_mask$partition0$ & 64;
                    if(bit__4102__auto__ || G__15205.cljs$core$ISeq$) {
                      return true
                    }else {
                      if(!G__15205.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15205)
                      }else {
                        return false
                      }
                    }
                  }else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15205)
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found)
                }else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              }else {
                return null
              }
            }
          }
        }
      }
    }else {
      return not_found
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if(o == null) {
      return null
    }else {
      if(function() {
        var G__15208 = o;
        if(G__15208) {
          var bit__4095__auto__ = G__15208.cljs$lang$protocol_mask$partition0$ & 256;
          if(bit__4095__auto__ || G__15208.cljs$core$ILookup$) {
            return true
          }else {
            return false
          }
        }else {
          return false
        }
      }()) {
        return cljs.core._lookup.call(null, o, k)
      }else {
        if(o instanceof Array) {
          if(k < o.length) {
            return o[k]
          }else {
            return null
          }
        }else {
          if(typeof o === "string") {
            if(k < o.length) {
              return o[k]
            }else {
              return null
            }
          }else {
            if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null
              }else {
                return null
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if(!(o == null)) {
      if(function() {
        var G__15209 = o;
        if(G__15209) {
          var bit__4095__auto__ = G__15209.cljs$lang$protocol_mask$partition0$ & 256;
          if(bit__4095__auto__ || G__15209.cljs$core$ILookup$) {
            return true
          }else {
            return false
          }
        }else {
          return false
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found)
      }else {
        if(o instanceof Array) {
          if(k < o.length) {
            return o[k]
          }else {
            return not_found
          }
        }else {
          if(typeof o === "string") {
            if(k < o.length) {
              return o[k]
            }else {
              return not_found
            }
          }else {
            if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found
              }else {
                return null
              }
            }
          }
        }
      }
    }else {
      return not_found
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if(!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v)
    }else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v])
    }
  };
  var assoc__4 = function() {
    var G__15210__delegate = function(coll, k, v, kvs) {
      while(true) {
        var ret = assoc.call(null, coll, k, v);
        if(cljs.core.truth_(kvs)) {
          var G__15211 = ret;
          var G__15212 = cljs.core.first.call(null, kvs);
          var G__15213 = cljs.core.second.call(null, kvs);
          var G__15214 = cljs.core.nnext.call(null, kvs);
          coll = G__15211;
          k = G__15212;
          v = G__15213;
          kvs = G__15214;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__15210 = function(coll, k, v, var_args) {
      var kvs = null;
      if(arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__15210__delegate.call(this, coll, k, v, kvs)
    };
    G__15210.cljs$lang$maxFixedArity = 3;
    G__15210.cljs$lang$applyTo = function(arglist__15215) {
      var coll = cljs.core.first(arglist__15215);
      arglist__15215 = cljs.core.next(arglist__15215);
      var k = cljs.core.first(arglist__15215);
      arglist__15215 = cljs.core.next(arglist__15215);
      var v = cljs.core.first(arglist__15215);
      var kvs = cljs.core.rest(arglist__15215);
      return G__15210__delegate(coll, k, v, kvs)
    };
    G__15210.cljs$core$IFn$_invoke$arity$variadic = G__15210__delegate;
    return G__15210
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll
  };
  var dissoc__2 = function(coll, k) {
    return cljs.core._dissoc.call(null, coll, k)
  };
  var dissoc__3 = function() {
    var G__15216__delegate = function(coll, k, ks) {
      while(true) {
        var ret = dissoc.call(null, coll, k);
        if(cljs.core.truth_(ks)) {
          var G__15217 = ret;
          var G__15218 = cljs.core.first.call(null, ks);
          var G__15219 = cljs.core.next.call(null, ks);
          coll = G__15217;
          k = G__15218;
          ks = G__15219;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__15216 = function(coll, k, var_args) {
      var ks = null;
      if(arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15216__delegate.call(this, coll, k, ks)
    };
    G__15216.cljs$lang$maxFixedArity = 2;
    G__15216.cljs$lang$applyTo = function(arglist__15220) {
      var coll = cljs.core.first(arglist__15220);
      arglist__15220 = cljs.core.next(arglist__15220);
      var k = cljs.core.first(arglist__15220);
      var ks = cljs.core.rest(arglist__15220);
      return G__15216__delegate(coll, k, ks)
    };
    G__15216.cljs$core$IFn$_invoke$arity$variadic = G__15216__delegate;
    return G__15216
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3483__auto__ = goog.isFunction(f);
  if(or__3483__auto__) {
    return or__3483__auto__
  }else {
    var G__15224 = f;
    if(G__15224) {
      var bit__4102__auto__ = null;
      if(cljs.core.truth_(function() {
        var or__3483__auto____$1 = bit__4102__auto__;
        if(cljs.core.truth_(or__3483__auto____$1)) {
          return or__3483__auto____$1
        }else {
          return G__15224.cljs$core$Fn$
        }
      }())) {
        return true
      }else {
        if(!G__15224.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__15224)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__15224)
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if(cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__15232 = o;
    if(G__15232) {
      var bit__4102__auto__ = G__15232.cljs$lang$protocol_mask$partition0$ & 262144;
      if(bit__4102__auto__ || G__15232.cljs$core$IWithMeta$) {
        return true
      }else {
        if(!G__15232.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15232)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15232)
    }
  }()) {
    return with_meta.call(null, function() {
      if(typeof cljs.core.t15233 !== "undefined") {
      }else {
        cljs.core.t15233 = function(meta, o, with_meta, meta15234) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta15234 = meta15234;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217
        };
        cljs.core.t15233.cljs$lang$type = true;
        cljs.core.t15233.cljs$lang$ctorStr = "cljs.core/t15233";
        cljs.core.t15233.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
          return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/t15233")
        };
        cljs.core.t15233.prototype.call = function() {
          var G__15237__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args)
          };
          var G__15237 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if(arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
            }
            return G__15237__delegate.call(this, self__, args)
          };
          G__15237.cljs$lang$maxFixedArity = 1;
          G__15237.cljs$lang$applyTo = function(arglist__15238) {
            var self__ = cljs.core.first(arglist__15238);
            var args = cljs.core.rest(arglist__15238);
            return G__15237__delegate(self__, args)
          };
          G__15237.cljs$core$IFn$_invoke$arity$variadic = G__15237__delegate;
          return G__15237
        }();
        cljs.core.t15233.prototype.apply = function(self__, args15236) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15236)))
        };
        cljs.core.t15233.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__15239__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args)
          };
          var G__15239 = function(var_args) {
            var self__ = this;
            var args = null;
            if(arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
            }
            return G__15239__delegate.call(this, args)
          };
          G__15239.cljs$lang$maxFixedArity = 0;
          G__15239.cljs$lang$applyTo = function(arglist__15240) {
            var args = cljs.core.seq(arglist__15240);
            return G__15239__delegate(args)
          };
          G__15239.cljs$core$IFn$_invoke$arity$variadic = G__15239__delegate;
          return G__15239
        }();
        cljs.core.t15233.prototype.cljs$core$Fn$ = true;
        cljs.core.t15233.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15235) {
          var self__ = this;
          var _15235__$1 = this;
          return self__.meta15234
        };
        cljs.core.t15233.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15235, meta15234__$1) {
          var self__ = this;
          var _15235__$1 = this;
          return new cljs.core.t15233(self__.meta, self__.o, self__.with_meta, meta15234__$1)
        };
        cljs.core.__GT_t15233 = function __GT_t15233(meta__$1, o__$1, with_meta__$1, meta15234) {
          return new cljs.core.t15233(meta__$1, o__$1, with_meta__$1, meta15234)
        }
      }
      return new cljs.core.t15233(meta, o, with_meta, null)
    }(), meta)
  }else {
    return cljs.core._with_meta.call(null, o, meta)
  }
};
cljs.core.meta = function meta(o) {
  if(function() {
    var G__15242 = o;
    if(G__15242) {
      var bit__4102__auto__ = G__15242.cljs$lang$protocol_mask$partition0$ & 131072;
      if(bit__4102__auto__ || G__15242.cljs$core$IMeta$) {
        return true
      }else {
        if(!G__15242.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15242)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15242)
    }
  }()) {
    return cljs.core._meta.call(null, o)
  }else {
    return null
  }
};
cljs.core.peek = function peek(coll) {
  return cljs.core._peek.call(null, coll)
};
cljs.core.pop = function pop(coll) {
  return cljs.core._pop.call(null, coll)
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll
  };
  var disj__2 = function(coll, k) {
    return cljs.core._disjoin.call(null, coll, k)
  };
  var disj__3 = function() {
    var G__15243__delegate = function(coll, k, ks) {
      while(true) {
        var ret = disj.call(null, coll, k);
        if(cljs.core.truth_(ks)) {
          var G__15244 = ret;
          var G__15245 = cljs.core.first.call(null, ks);
          var G__15246 = cljs.core.next.call(null, ks);
          coll = G__15244;
          k = G__15245;
          ks = G__15246;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__15243 = function(coll, k, var_args) {
      var ks = null;
      if(arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15243__delegate.call(this, coll, k, ks)
    };
    G__15243.cljs$lang$maxFixedArity = 2;
    G__15243.cljs$lang$applyTo = function(arglist__15247) {
      var coll = cljs.core.first(arglist__15247);
      arglist__15247 = cljs.core.next(arglist__15247);
      var k = cljs.core.first(arglist__15247);
      var ks = cljs.core.rest(arglist__15247);
      return G__15243__delegate(coll, k, ks)
    };
    G__15243.cljs$core$IFn$_invoke$arity$variadic = G__15243__delegate;
    return G__15243
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj
}();
cljs.core.string_hash_cache = function() {
  var obj15249 = {};
  return obj15249
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if(cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj15253 = {};
      return obj15253
    }();
    cljs.core.string_hash_cache_count = 0
  }else {
  }
  var h = cljs.core.string_hash_cache[k];
  if(typeof h === "number") {
    return h
  }else {
    return cljs.core.add_to_string_hash_cache.call(null, k)
  }
};
cljs.core.hash = function hash(o) {
  if(function() {
    var G__15255 = o;
    if(G__15255) {
      var bit__4095__auto__ = G__15255.cljs$lang$protocol_mask$partition0$ & 4194304;
      if(bit__4095__auto__ || G__15255.cljs$core$IHash$) {
        return true
      }else {
        return false
      }
    }else {
      return false
    }
  }()) {
    return cljs.core._hash.call(null, o)
  }else {
    if(typeof o === "number") {
      return Math.floor(o) % 2147483647
    }else {
      if(o === true) {
        return 1
      }else {
        if(o === false) {
          return 0
        }else {
          if(typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core._hash.call(null, o)
            }else {
              return null
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll))
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__15257 = x;
    if(G__15257) {
      var bit__4102__auto__ = G__15257.cljs$lang$protocol_mask$partition0$ & 8;
      if(bit__4102__auto__ || G__15257.cljs$core$ICollection$) {
        return true
      }else {
        if(!G__15257.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__15257)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__15257)
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__15259 = x;
    if(G__15259) {
      var bit__4102__auto__ = G__15259.cljs$lang$protocol_mask$partition0$ & 4096;
      if(bit__4102__auto__ || G__15259.cljs$core$ISet$) {
        return true
      }else {
        if(!G__15259.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__15259)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__15259)
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__15261 = x;
  if(G__15261) {
    var bit__4102__auto__ = G__15261.cljs$lang$protocol_mask$partition0$ & 512;
    if(bit__4102__auto__ || G__15261.cljs$core$IAssociative$) {
      return true
    }else {
      if(!G__15261.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__15261)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__15261)
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__15263 = x;
  if(G__15263) {
    var bit__4102__auto__ = G__15263.cljs$lang$protocol_mask$partition0$ & 16777216;
    if(bit__4102__auto__ || G__15263.cljs$core$ISequential$) {
      return true
    }else {
      if(!G__15263.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__15263)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__15263)
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__15265 = x;
  if(G__15265) {
    var bit__4102__auto__ = G__15265.cljs$lang$protocol_mask$partition0$ & 524288;
    if(bit__4102__auto__ || G__15265.cljs$core$IReduce$) {
      return true
    }else {
      if(!G__15265.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__15265)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__15265)
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__15267 = x;
    if(G__15267) {
      var bit__4102__auto__ = G__15267.cljs$lang$protocol_mask$partition0$ & 1024;
      if(bit__4102__auto__ || G__15267.cljs$core$IMap$) {
        return true
      }else {
        if(!G__15267.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__15267)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__15267)
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__15269 = x;
  if(G__15269) {
    var bit__4102__auto__ = G__15269.cljs$lang$protocol_mask$partition0$ & 16384;
    if(bit__4102__auto__ || G__15269.cljs$core$IVector$) {
      return true
    }else {
      if(!G__15269.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__15269)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__15269)
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__15271 = x;
  if(G__15271) {
    var bit__4095__auto__ = G__15271.cljs$lang$protocol_mask$partition1$ & 512;
    if(bit__4095__auto__ || G__15271.cljs$core$IChunkedSeq$) {
      return true
    }else {
      return false
    }
  }else {
    return false
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj15275 = {};
    return obj15275
  };
  var js_obj__1 = function() {
    var G__15276__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals)
    };
    var G__15276 = function(var_args) {
      var keyvals = null;
      if(arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__15276__delegate.call(this, keyvals)
    };
    G__15276.cljs$lang$maxFixedArity = 0;
    G__15276.cljs$lang$applyTo = function(arglist__15277) {
      var keyvals = cljs.core.seq(arglist__15277);
      return G__15276__delegate(keyvals)
    };
    G__15276.cljs$core$IFn$_invoke$arity$variadic = G__15276__delegate;
    return G__15276
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key)
  });
  return keys
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key]
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while(true) {
    if(len__$1 === 0) {
      return to
    }else {
      to[j__$1] = from[i__$1];
      var G__15278 = i__$1 + 1;
      var G__15279 = j__$1 + 1;
      var G__15280 = len__$1 - 1;
      i__$1 = G__15278;
      j__$1 = G__15279;
      len__$1 = G__15280;
      continue
    }
    break
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while(true) {
    if(len__$1 === 0) {
      return to
    }else {
      to[j__$1] = from[i__$1];
      var G__15281 = i__$1 - 1;
      var G__15282 = j__$1 - 1;
      var G__15283 = len__$1 - 1;
      i__$1 = G__15281;
      j__$1 = G__15282;
      len__$1 = G__15283;
      continue
    }
    break
  }
};
cljs.core.lookup_sentinel = function() {
  var obj15285 = {};
  return obj15285
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if(s == null) {
    return false
  }else {
    var G__15287 = s;
    if(G__15287) {
      var bit__4102__auto__ = G__15287.cljs$lang$protocol_mask$partition0$ & 64;
      if(bit__4102__auto__ || G__15287.cljs$core$ISeq$) {
        return true
      }else {
        if(!G__15287.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15287)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15287)
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__15289 = s;
  if(G__15289) {
    var bit__4102__auto__ = G__15289.cljs$lang$protocol_mask$partition0$ & 8388608;
    if(bit__4102__auto__ || G__15289.cljs$core$ISeqable$) {
      return true
    }else {
      if(!G__15289.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__15289)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__15289)
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if(cljs.core.truth_(x)) {
    return true
  }else {
    return false
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3483__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if(or__3483__auto__) {
    return or__3483__auto__
  }else {
    var G__15293 = f;
    if(G__15293) {
      var bit__4102__auto__ = G__15293.cljs$lang$protocol_mask$partition0$ & 1;
      if(bit__4102__auto__ || G__15293.cljs$core$IFn$) {
        return true
      }else {
        if(!G__15293.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__15293)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__15293)
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10)
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if(cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false
  }else {
    return true
  }
};
cljs.core.find = function find(coll, k) {
  if(!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null)
  }else {
    return null
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y)
  };
  var distinct_QMARK___3 = function() {
    var G__15294__delegate = function(x, y, more) {
      if(!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while(true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if(cljs.core.truth_(xs)) {
            if(cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false
            }else {
              var G__15295 = cljs.core.conj.call(null, s, x__$1);
              var G__15296 = etc;
              s = G__15295;
              xs = G__15296;
              continue
            }
          }else {
            return true
          }
          break
        }
      }else {
        return false
      }
    };
    var G__15294 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15294__delegate.call(this, x, y, more)
    };
    G__15294.cljs$lang$maxFixedArity = 2;
    G__15294.cljs$lang$applyTo = function(arglist__15297) {
      var x = cljs.core.first(arglist__15297);
      arglist__15297 = cljs.core.next(arglist__15297);
      var y = cljs.core.first(arglist__15297);
      var more = cljs.core.rest(arglist__15297);
      return G__15294__delegate(x, y, more)
    };
    G__15294.cljs$core$IFn$_invoke$arity$variadic = G__15294__delegate;
    return G__15294
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_
}();
cljs.core.compare = function compare(x, y) {
  if(x === y) {
    return 0
  }else {
    if(x == null) {
      return-1
    }else {
      if(y == null) {
        return 1
      }else {
        if(cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if(function() {
            var G__15299 = x;
            if(G__15299) {
              var bit__4095__auto__ = G__15299.cljs$lang$protocol_mask$partition1$ & 2048;
              if(bit__4095__auto__ || G__15299.cljs$core$IComparable$) {
                return true
              }else {
                return false
              }
            }else {
              return false
            }
          }()) {
            return cljs.core._compare.call(null, x, y)
          }else {
            return goog.array.defaultCompare(x, y)
          }
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if(xl < yl) {
      return-1
    }else {
      if(xl > yl) {
        return 1
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0)
        }else {
          return null
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while(true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if(d === 0 && n + 1 < len) {
        var G__15300 = xs;
        var G__15301 = ys;
        var G__15302 = len;
        var G__15303 = n + 1;
        xs = G__15300;
        ys = G__15301;
        len = G__15302;
        n = G__15303;
        continue
      }else {
        return d
      }
      break
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if(cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare
  }else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if(typeof r === "number") {
        return r
      }else {
        if(cljs.core.truth_(r)) {
          return-1
        }else {
          if(cljs.core.truth_(f.call(null, y, x))) {
            return 1
          }else {
            return 0
          }
        }
      }
    }
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll)
  };
  var sort__2 = function(comp, coll) {
    if(cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a)
    }else {
      return cljs.core.List.EMPTY
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll)
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y))
    }, coll)
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s))
    }else {
      return f.call(null)
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while(true) {
      if(coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__15304 = nval;
          var G__15305 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__15304;
          coll__$1 = G__15305;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a)
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if(function() {
      var G__15308 = coll;
      if(G__15308) {
        var bit__4095__auto__ = G__15308.cljs$lang$protocol_mask$partition0$ & 524288;
        if(bit__4095__auto__ || G__15308.cljs$core$IReduce$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f)
    }else {
      if(coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f)
      }else {
        if(typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f)
        }else {
          if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll)
            }else {
              return null
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if(function() {
      var G__15309 = coll;
      if(G__15309) {
        var bit__4095__auto__ = G__15309.cljs$lang$protocol_mask$partition0$ & 524288;
        if(bit__4095__auto__ || G__15309.cljs$core$IReduce$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val)
    }else {
      if(coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val)
      }else {
        if(typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val)
        }else {
          if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll)
            }else {
              return null
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  return cljs.core._kv_reduce.call(null, coll, f, init)
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0
  };
  var _PLUS___1 = function(x) {
    return x
  };
  var _PLUS___2 = function(x, y) {
    return x + y
  };
  var _PLUS___3 = function() {
    var G__15310__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more)
    };
    var G__15310 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15310__delegate.call(this, x, y, more)
    };
    G__15310.cljs$lang$maxFixedArity = 2;
    G__15310.cljs$lang$applyTo = function(arglist__15311) {
      var x = cljs.core.first(arglist__15311);
      arglist__15311 = cljs.core.next(arglist__15311);
      var y = cljs.core.first(arglist__15311);
      var more = cljs.core.rest(arglist__15311);
      return G__15310__delegate(x, y, more)
    };
    G__15310.cljs$core$IFn$_invoke$arity$variadic = G__15310__delegate;
    return G__15310
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x
  };
  var ___2 = function(x, y) {
    return x - y
  };
  var ___3 = function() {
    var G__15312__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more)
    };
    var G__15312 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15312__delegate.call(this, x, y, more)
    };
    G__15312.cljs$lang$maxFixedArity = 2;
    G__15312.cljs$lang$applyTo = function(arglist__15313) {
      var x = cljs.core.first(arglist__15313);
      arglist__15313 = cljs.core.next(arglist__15313);
      var y = cljs.core.first(arglist__15313);
      var more = cljs.core.rest(arglist__15313);
      return G__15312__delegate(x, y, more)
    };
    G__15312.cljs$core$IFn$_invoke$arity$variadic = G__15312__delegate;
    return G__15312
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1
  };
  var _STAR___1 = function(x) {
    return x
  };
  var _STAR___2 = function(x, y) {
    return x * y
  };
  var _STAR___3 = function() {
    var G__15314__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more)
    };
    var G__15314 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15314__delegate.call(this, x, y, more)
    };
    G__15314.cljs$lang$maxFixedArity = 2;
    G__15314.cljs$lang$applyTo = function(arglist__15315) {
      var x = cljs.core.first(arglist__15315);
      arglist__15315 = cljs.core.next(arglist__15315);
      var y = cljs.core.first(arglist__15315);
      var more = cljs.core.rest(arglist__15315);
      return G__15314__delegate(x, y, more)
    };
    G__15314.cljs$core$IFn$_invoke$arity$variadic = G__15314__delegate;
    return G__15314
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x)
  };
  var _SLASH___2 = function(x, y) {
    return x / y
  };
  var _SLASH___3 = function() {
    var G__15316__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more)
    };
    var G__15316 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15316__delegate.call(this, x, y, more)
    };
    G__15316.cljs$lang$maxFixedArity = 2;
    G__15316.cljs$lang$applyTo = function(arglist__15317) {
      var x = cljs.core.first(arglist__15317);
      arglist__15317 = cljs.core.next(arglist__15317);
      var y = cljs.core.first(arglist__15317);
      var more = cljs.core.rest(arglist__15317);
      return G__15316__delegate(x, y, more)
    };
    G__15316.cljs$core$IFn$_invoke$arity$variadic = G__15316__delegate;
    return G__15316
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true
  };
  var _LT___2 = function(x, y) {
    return x < y
  };
  var _LT___3 = function() {
    var G__15318__delegate = function(x, y, more) {
      while(true) {
        if(x < y) {
          if(cljs.core.next.call(null, more)) {
            var G__15319 = y;
            var G__15320 = cljs.core.first.call(null, more);
            var G__15321 = cljs.core.next.call(null, more);
            x = G__15319;
            y = G__15320;
            more = G__15321;
            continue
          }else {
            return y < cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__15318 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15318__delegate.call(this, x, y, more)
    };
    G__15318.cljs$lang$maxFixedArity = 2;
    G__15318.cljs$lang$applyTo = function(arglist__15322) {
      var x = cljs.core.first(arglist__15322);
      arglist__15322 = cljs.core.next(arglist__15322);
      var y = cljs.core.first(arglist__15322);
      var more = cljs.core.rest(arglist__15322);
      return G__15318__delegate(x, y, more)
    };
    G__15318.cljs$core$IFn$_invoke$arity$variadic = G__15318__delegate;
    return G__15318
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y
  };
  var _LT__EQ___3 = function() {
    var G__15323__delegate = function(x, y, more) {
      while(true) {
        if(x <= y) {
          if(cljs.core.next.call(null, more)) {
            var G__15324 = y;
            var G__15325 = cljs.core.first.call(null, more);
            var G__15326 = cljs.core.next.call(null, more);
            x = G__15324;
            y = G__15325;
            more = G__15326;
            continue
          }else {
            return y <= cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__15323 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15323__delegate.call(this, x, y, more)
    };
    G__15323.cljs$lang$maxFixedArity = 2;
    G__15323.cljs$lang$applyTo = function(arglist__15327) {
      var x = cljs.core.first(arglist__15327);
      arglist__15327 = cljs.core.next(arglist__15327);
      var y = cljs.core.first(arglist__15327);
      var more = cljs.core.rest(arglist__15327);
      return G__15323__delegate(x, y, more)
    };
    G__15323.cljs$core$IFn$_invoke$arity$variadic = G__15323__delegate;
    return G__15323
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true
  };
  var _GT___2 = function(x, y) {
    return x > y
  };
  var _GT___3 = function() {
    var G__15328__delegate = function(x, y, more) {
      while(true) {
        if(x > y) {
          if(cljs.core.next.call(null, more)) {
            var G__15329 = y;
            var G__15330 = cljs.core.first.call(null, more);
            var G__15331 = cljs.core.next.call(null, more);
            x = G__15329;
            y = G__15330;
            more = G__15331;
            continue
          }else {
            return y > cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__15328 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15328__delegate.call(this, x, y, more)
    };
    G__15328.cljs$lang$maxFixedArity = 2;
    G__15328.cljs$lang$applyTo = function(arglist__15332) {
      var x = cljs.core.first(arglist__15332);
      arglist__15332 = cljs.core.next(arglist__15332);
      var y = cljs.core.first(arglist__15332);
      var more = cljs.core.rest(arglist__15332);
      return G__15328__delegate(x, y, more)
    };
    G__15328.cljs$core$IFn$_invoke$arity$variadic = G__15328__delegate;
    return G__15328
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y
  };
  var _GT__EQ___3 = function() {
    var G__15333__delegate = function(x, y, more) {
      while(true) {
        if(x >= y) {
          if(cljs.core.next.call(null, more)) {
            var G__15334 = y;
            var G__15335 = cljs.core.first.call(null, more);
            var G__15336 = cljs.core.next.call(null, more);
            x = G__15334;
            y = G__15335;
            more = G__15336;
            continue
          }else {
            return y >= cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__15333 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15333__delegate.call(this, x, y, more)
    };
    G__15333.cljs$lang$maxFixedArity = 2;
    G__15333.cljs$lang$applyTo = function(arglist__15337) {
      var x = cljs.core.first(arglist__15337);
      arglist__15337 = cljs.core.next(arglist__15337);
      var y = cljs.core.first(arglist__15337);
      var more = cljs.core.rest(arglist__15337);
      return G__15333__delegate(x, y, more)
    };
    G__15333.cljs$core$IFn$_invoke$arity$variadic = G__15333__delegate;
    return G__15333
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_
}();
cljs.core.dec = function dec(x) {
  return x - 1
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x
  };
  var max__2 = function(x, y) {
    var x__3788__auto__ = x;
    var y__3789__auto__ = y;
    return x__3788__auto__ > y__3789__auto__ ? x__3788__auto__ : y__3789__auto__
  };
  var max__3 = function() {
    var G__15338__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3788__auto__ = x;
        var y__3789__auto__ = y;
        return x__3788__auto__ > y__3789__auto__ ? x__3788__auto__ : y__3789__auto__
      }(), more)
    };
    var G__15338 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15338__delegate.call(this, x, y, more)
    };
    G__15338.cljs$lang$maxFixedArity = 2;
    G__15338.cljs$lang$applyTo = function(arglist__15339) {
      var x = cljs.core.first(arglist__15339);
      arglist__15339 = cljs.core.next(arglist__15339);
      var y = cljs.core.first(arglist__15339);
      var more = cljs.core.rest(arglist__15339);
      return G__15338__delegate(x, y, more)
    };
    G__15338.cljs$core$IFn$_invoke$arity$variadic = G__15338__delegate;
    return G__15338
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x
  };
  var min__2 = function(x, y) {
    var x__3795__auto__ = x;
    var y__3796__auto__ = y;
    return x__3795__auto__ < y__3796__auto__ ? x__3795__auto__ : y__3796__auto__
  };
  var min__3 = function() {
    var G__15340__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3795__auto__ = x;
        var y__3796__auto__ = y;
        return x__3795__auto__ < y__3796__auto__ ? x__3795__auto__ : y__3796__auto__
      }(), more)
    };
    var G__15340 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15340__delegate.call(this, x, y, more)
    };
    G__15340.cljs$lang$maxFixedArity = 2;
    G__15340.cljs$lang$applyTo = function(arglist__15341) {
      var x = cljs.core.first(arglist__15341);
      arglist__15341 = cljs.core.next(arglist__15341);
      var y = cljs.core.first(arglist__15341);
      var more = cljs.core.rest(arglist__15341);
      return G__15340__delegate(x, y, more)
    };
    G__15340.cljs$core$IFn$_invoke$arity$variadic = G__15340__delegate;
    return G__15340
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min
}();
cljs.core.byte$ = function byte$(x) {
  return x
};
cljs.core.char$ = function char$(x) {
  if(typeof x === "number") {
    return String.fromCharCode(x)
  }else {
    if(typeof x === "string" && x.length === 1) {
      return x
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      }else {
        return null
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x
};
cljs.core.float$ = function float$(x) {
  return x
};
cljs.core.double$ = function double$(x) {
  return x
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0
  };
  var unchecked_add__1 = function(x) {
    return x
  };
  var unchecked_add__2 = function(x, y) {
    return x + y
  };
  var unchecked_add__3 = function() {
    var G__15342__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more)
    };
    var G__15342 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15342__delegate.call(this, x, y, more)
    };
    G__15342.cljs$lang$maxFixedArity = 2;
    G__15342.cljs$lang$applyTo = function(arglist__15343) {
      var x = cljs.core.first(arglist__15343);
      arglist__15343 = cljs.core.next(arglist__15343);
      var y = cljs.core.first(arglist__15343);
      var more = cljs.core.rest(arglist__15343);
      return G__15342__delegate(x, y, more)
    };
    G__15342.cljs$core$IFn$_invoke$arity$variadic = G__15342__delegate;
    return G__15342
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0
  };
  var unchecked_add_int__1 = function(x) {
    return x
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y
  };
  var unchecked_add_int__3 = function() {
    var G__15344__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more)
    };
    var G__15344 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15344__delegate.call(this, x, y, more)
    };
    G__15344.cljs$lang$maxFixedArity = 2;
    G__15344.cljs$lang$applyTo = function(arglist__15345) {
      var x = cljs.core.first(arglist__15345);
      arglist__15345 = cljs.core.next(arglist__15345);
      var y = cljs.core.first(arglist__15345);
      var more = cljs.core.rest(arglist__15345);
      return G__15344__delegate(x, y, more)
    };
    G__15344.cljs$core$IFn$_invoke$arity$variadic = G__15344__delegate;
    return G__15344
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x)
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y
  };
  var unchecked_divide_int__3 = function() {
    var G__15346__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more)
    };
    var G__15346 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15346__delegate.call(this, x, y, more)
    };
    G__15346.cljs$lang$maxFixedArity = 2;
    G__15346.cljs$lang$applyTo = function(arglist__15347) {
      var x = cljs.core.first(arglist__15347);
      arglist__15347 = cljs.core.next(arglist__15347);
      var y = cljs.core.first(arglist__15347);
      var more = cljs.core.rest(arglist__15347);
      return G__15346__delegate(x, y, more)
    };
    G__15346.cljs$core$IFn$_invoke$arity$variadic = G__15346__delegate;
    return G__15346
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1
  };
  var unchecked_multiply__1 = function(x) {
    return x
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y
  };
  var unchecked_multiply__3 = function() {
    var G__15348__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more)
    };
    var G__15348 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15348__delegate.call(this, x, y, more)
    };
    G__15348.cljs$lang$maxFixedArity = 2;
    G__15348.cljs$lang$applyTo = function(arglist__15349) {
      var x = cljs.core.first(arglist__15349);
      arglist__15349 = cljs.core.next(arglist__15349);
      var y = cljs.core.first(arglist__15349);
      var more = cljs.core.rest(arglist__15349);
      return G__15348__delegate(x, y, more)
    };
    G__15348.cljs$core$IFn$_invoke$arity$variadic = G__15348__delegate;
    return G__15348
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1
  };
  var unchecked_multiply_int__1 = function(x) {
    return x
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y
  };
  var unchecked_multiply_int__3 = function() {
    var G__15350__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more)
    };
    var G__15350 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15350__delegate.call(this, x, y, more)
    };
    G__15350.cljs$lang$maxFixedArity = 2;
    G__15350.cljs$lang$applyTo = function(arglist__15351) {
      var x = cljs.core.first(arglist__15351);
      arglist__15351 = cljs.core.next(arglist__15351);
      var y = cljs.core.first(arglist__15351);
      var more = cljs.core.rest(arglist__15351);
      return G__15350__delegate(x, y, more)
    };
    G__15350.cljs$core$IFn$_invoke$arity$variadic = G__15350__delegate;
    return G__15350
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n)
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y
  };
  var unchecked_substract__3 = function() {
    var G__15352__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more)
    };
    var G__15352 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15352__delegate.call(this, x, y, more)
    };
    G__15352.cljs$lang$maxFixedArity = 2;
    G__15352.cljs$lang$applyTo = function(arglist__15353) {
      var x = cljs.core.first(arglist__15353);
      arglist__15353 = cljs.core.next(arglist__15353);
      var y = cljs.core.first(arglist__15353);
      var more = cljs.core.rest(arglist__15353);
      return G__15352__delegate(x, y, more)
    };
    G__15352.cljs$core$IFn$_invoke$arity$variadic = G__15352__delegate;
    return G__15352
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y
  };
  var unchecked_substract_int__3 = function() {
    var G__15354__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more)
    };
    var G__15354 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15354__delegate.call(this, x, y, more)
    };
    G__15354.cljs$lang$maxFixedArity = 2;
    G__15354.cljs$lang$applyTo = function(arglist__15355) {
      var x = cljs.core.first(arglist__15355);
      arglist__15355 = cljs.core.next(arglist__15355);
      var y = cljs.core.first(arglist__15355);
      var more = cljs.core.rest(arglist__15355);
      return G__15354__delegate(x, y, more)
    };
    G__15354.cljs$core$IFn$_invoke$arity$variadic = G__15354__delegate;
    return G__15354
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int
}();
cljs.core.fix = function fix(q) {
  if(q >= 0) {
    return Math.floor.call(null, q)
  }else {
    return Math.ceil.call(null, q)
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.booleans = function booleans(x) {
  return x
};
cljs.core.bytes = function bytes(x) {
  return x
};
cljs.core.chars = function chars(x) {
  return x
};
cljs.core.shorts = function shorts(x) {
  return x
};
cljs.core.ints = function ints(x) {
  return x
};
cljs.core.floats = function floats(x) {
  return x
};
cljs.core.doubles = function doubles(x) {
  return x
};
cljs.core.longs = function longs(x) {
  return x
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d)
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null)
  };
  var rand__1 = function(n) {
    return n * rand.call(null)
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n))
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n)
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n
};
cljs.core.bit_not = function bit_not(x) {
  return~x
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y)
  };
  var _EQ__EQ___3 = function() {
    var G__15356__delegate = function(x, y, more) {
      while(true) {
        if(_EQ__EQ_.call(null, x, y)) {
          if(cljs.core.next.call(null, more)) {
            var G__15357 = y;
            var G__15358 = cljs.core.first.call(null, more);
            var G__15359 = cljs.core.next.call(null, more);
            x = G__15357;
            y = G__15358;
            more = G__15359;
            continue
          }else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more))
          }
        }else {
          return false
        }
        break
      }
    };
    var G__15356 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15356__delegate.call(this, x, y, more)
    };
    G__15356.cljs$lang$maxFixedArity = 2;
    G__15356.cljs$lang$applyTo = function(arglist__15360) {
      var x = cljs.core.first(arglist__15360);
      arglist__15360 = cljs.core.next(arglist__15360);
      var y = cljs.core.first(arglist__15360);
      var more = cljs.core.rest(arglist__15360);
      return G__15356__delegate(x, y, more)
    };
    G__15356.cljs$core$IFn$_invoke$arity$variadic = G__15356__delegate;
    return G__15356
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while(true) {
    if(xs && n__$1 > 0) {
      var G__15361 = n__$1 - 1;
      var G__15362 = cljs.core.next.call(null, xs);
      n__$1 = G__15361;
      xs = G__15362;
      continue
    }else {
      return xs
    }
    break
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return""
  };
  var str__1 = function(x) {
    if(x == null) {
      return""
    }else {
      return x.toString()
    }
  };
  var str__2 = function() {
    var G__15363__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while(true) {
        if(cljs.core.truth_(more)) {
          var G__15364 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__15365 = cljs.core.next.call(null, more);
          sb = G__15364;
          more = G__15365;
          continue
        }else {
          return sb.toString()
        }
        break
      }
    };
    var G__15363 = function(x, var_args) {
      var ys = null;
      if(arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__15363__delegate.call(this, x, ys)
    };
    G__15363.cljs$lang$maxFixedArity = 1;
    G__15363.cljs$lang$applyTo = function(arglist__15366) {
      var x = cljs.core.first(arglist__15366);
      var ys = cljs.core.rest(arglist__15366);
      return G__15363__delegate(x, ys)
    };
    G__15363.cljs$core$IFn$_invoke$arity$variadic = G__15363__delegate;
    return G__15363
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start)
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end)
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while(true) {
      if(xs == null) {
        return ys == null
      }else {
        if(ys == null) {
          return false
        }else {
          if(cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__15367 = cljs.core.next.call(null, xs);
            var G__15368 = cljs.core.next.call(null, ys);
            xs = G__15367;
            ys = G__15368;
            continue
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false
            }else {
              return null
            }
          }
        }
      }
      break
    }
  }() : null)
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2)
};
cljs.core.hash_coll = function hash_coll(coll) {
  if(cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while(true) {
      if(s == null) {
        return res
      }else {
        var G__15369 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__15370 = cljs.core.next.call(null, s);
        res = G__15369;
        s = G__15370;
        continue
      }
      break
    }
  }else {
    return 0
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while(true) {
    if(s) {
      var e = cljs.core.first.call(null, s);
      var G__15371 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__15372 = cljs.core.next.call(null, s);
      h = G__15371;
      s = G__15372;
      continue
    }else {
      return h
    }
    break
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while(true) {
    if(s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__15373 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__15374 = cljs.core.next.call(null, s__$1);
      h = G__15373;
      s__$1 = G__15374;
      continue
    }else {
      return h
    }
    break
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__15381_15387 = cljs.core.seq.call(null, fn_map);
  var chunk__15382_15388 = null;
  var count__15383_15389 = 0;
  var i__15384_15390 = 0;
  while(true) {
    if(i__15384_15390 < count__15383_15389) {
      var vec__15385_15391 = cljs.core._nth.call(null, chunk__15382_15388, i__15384_15390);
      var key_name_15392 = cljs.core.nth.call(null, vec__15385_15391, 0, null);
      var f_15393 = cljs.core.nth.call(null, vec__15385_15391, 1, null);
      var str_name_15394 = cljs.core.name.call(null, key_name_15392);
      obj[str_name_15394] = f_15393;
      var G__15395 = seq__15381_15387;
      var G__15396 = chunk__15382_15388;
      var G__15397 = count__15383_15389;
      var G__15398 = i__15384_15390 + 1;
      seq__15381_15387 = G__15395;
      chunk__15382_15388 = G__15396;
      count__15383_15389 = G__15397;
      i__15384_15390 = G__15398;
      continue
    }else {
      var temp__4092__auto___15399 = cljs.core.seq.call(null, seq__15381_15387);
      if(temp__4092__auto___15399) {
        var seq__15381_15400__$1 = temp__4092__auto___15399;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__15381_15400__$1)) {
          var c__4200__auto___15401 = cljs.core.chunk_first.call(null, seq__15381_15400__$1);
          var G__15402 = cljs.core.chunk_rest.call(null, seq__15381_15400__$1);
          var G__15403 = c__4200__auto___15401;
          var G__15404 = cljs.core.count.call(null, c__4200__auto___15401);
          var G__15405 = 0;
          seq__15381_15387 = G__15402;
          chunk__15382_15388 = G__15403;
          count__15383_15389 = G__15404;
          i__15384_15390 = G__15405;
          continue
        }else {
          var vec__15386_15406 = cljs.core.first.call(null, seq__15381_15400__$1);
          var key_name_15407 = cljs.core.nth.call(null, vec__15386_15406, 0, null);
          var f_15408 = cljs.core.nth.call(null, vec__15386_15406, 1, null);
          var str_name_15409 = cljs.core.name.call(null, key_name_15407);
          obj[str_name_15409] = f_15408;
          var G__15410 = cljs.core.next.call(null, seq__15381_15400__$1);
          var G__15411 = null;
          var G__15412 = 0;
          var G__15413 = 0;
          seq__15381_15387 = G__15410;
          chunk__15382_15388 = G__15411;
          count__15383_15389 = G__15412;
          i__15384_15390 = G__15413;
          continue
        }
      }else {
      }
    }
    break
  }
  return obj
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937646
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/List")
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.count === 1) {
    return null
  }else {
    return self__.rest
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null)
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1)
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.count === 1) {
    return cljs.core.List.EMPTY
  }else {
    return self__.rest
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash)
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash)
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937614
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/EmptyList")
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null)
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1)
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta)
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__15415 = coll;
  if(G__15415) {
    var bit__4102__auto__ = G__15415.cljs$lang$protocol_mask$partition0$ & 134217728;
    if(bit__4102__auto__ || G__15415.cljs$core$IReversible$) {
      return true
    }else {
      if(!G__15415.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__15415)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__15415)
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll)
};
cljs.core.reverse = function reverse(coll) {
  if(cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll)
  }else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll)
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while(true) {
        if(!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__15416 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__15416;
          continue
        }else {
          return arr
        }
        break
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while(true) {
      if(i > 0) {
        var G__15417 = i - 1;
        var G__15418 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__15417;
        r = G__15418;
        continue
      }else {
        return r
      }
      break
    }
  };
  var list = function(var_args) {
    var xs = null;
    if(arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return list__delegate.call(this, xs)
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__15419) {
    var xs = cljs.core.seq(arglist__15419);
    return list__delegate(xs)
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65929452
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/Cons")
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.rest == null) {
    return null
  }else {
    return cljs.core.seq.call(null, self__.rest)
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash)
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.rest == null) {
    return cljs.core.List.EMPTY
  }else {
    return self__.rest
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash)
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash)
};
cljs.core.cons = function cons(x, coll) {
  if(function() {
    var or__3483__auto__ = coll == null;
    if(or__3483__auto__) {
      return or__3483__auto__
    }else {
      var G__15423 = coll;
      if(G__15423) {
        var bit__4095__auto__ = G__15423.cljs$lang$protocol_mask$partition0$ & 64;
        if(bit__4095__auto__ || G__15423.cljs$core$ISeq$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null)
  }else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null)
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__15425 = x;
  if(G__15425) {
    var bit__4102__auto__ = G__15425.cljs$lang$protocol_mask$partition0$ & 33554432;
    if(bit__4102__auto__ || G__15425.cljs$core$IList$) {
      return true
    }else {
      if(!G__15425.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__15425)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__15425)
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/Keyword")
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""))
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if(self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash
  }else {
    return self__._hash
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__15427 = null;
  var G__15427__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw)
  };
  var G__15427__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found)
  };
  G__15427 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15427__2.call(this, self__, coll);
      case 3:
        return G__15427__3.call(this, self__, coll, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15427
}();
cljs.core.Keyword.prototype.apply = function(self__, args15426) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15426)))
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw)
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found)
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if(other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn
  }else {
    return false
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("")
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash)
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if(x === y) {
    return true
  }else {
    if(x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn
    }else {
      return false
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if(function() {
    var G__15429 = x;
    if(G__15429) {
      var bit__4095__auto__ = G__15429.cljs$lang$protocol_mask$partition1$ & 4096;
      if(bit__4095__auto__ || G__15429.cljs$core$INamed$) {
        return true
      }else {
        return false
      }
    }else {
      return false
    }
  }()) {
    return cljs.core._namespace.call(null, x)
  }else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if(name instanceof cljs.core.Keyword) {
      return name
    }else {
      if(name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null)
      }else {
        if(typeof name === "string") {
          var parts = name.split("/");
          if(parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null)
          }else {
            return new cljs.core.Keyword(null, parts[0], name, null)
          }
        }else {
          return null
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null)
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/LazySeq")
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if(self__.s == null) {
    return null
  }else {
    return cljs.core.next.call(null, self__.s)
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if(self__.fn == null) {
    return self__.s
  }else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if(self__.s == null) {
    return null
  }else {
    var ls = self__.s;
    while(true) {
      if(ls instanceof cljs.core.LazySeq) {
        var G__15430 = ls.sval();
        ls = G__15430;
        continue
      }else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s)
      }
      break
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if(self__.s == null) {
    return null
  }else {
    return cljs.core.first.call(null, self__.s)
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if(!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash)
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash)
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/ChunkBuffer")
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end)
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0)
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/ArrayChunk")
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1)
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off)
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  }else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end)
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i]
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i]
  }else {
    return not_found
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end)
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length)
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length)
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end)
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/ChunkedCons")
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null)
  }else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if(more__$1 == null) {
      return null
    }else {
      return more__$1
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1)
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0)
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null)
  }else {
    if(self__.more == null) {
      return cljs.core.List.EMPTY
    }else {
      return self__.more
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.more == null) {
    return null
  }else {
    return self__.more
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash)
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.more == null) {
    return cljs.core.List.EMPTY
  }else {
    return self__.more
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash)
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if(cljs.core._count.call(null, chunk) === 0) {
    return rest
  }else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null)
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x)
};
cljs.core.chunk = function chunk(b) {
  return b.chunk()
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s)
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s)
};
cljs.core.chunk_next = function chunk_next(s) {
  if(function() {
    var G__15432 = s;
    if(G__15432) {
      var bit__4095__auto__ = G__15432.cljs$lang$protocol_mask$partition1$ & 1024;
      if(bit__4095__auto__ || G__15432.cljs$core$IChunkedNext$) {
        return true
      }else {
        return false
      }
    }else {
      return false
    }
  }()) {
    return cljs.core._chunked_next.call(null, s)
  }else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s))
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while(true) {
    if(cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__15433 = cljs.core.next.call(null, s__$1);
      s__$1 = G__15433;
      continue
    }else {
      return ary
    }
    break
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_15434 = 0;
  var xs_15435 = cljs.core.seq.call(null, coll);
  while(true) {
    if(xs_15435) {
      ret[i_15434] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_15435));
      var G__15436 = i_15434 + 1;
      var G__15437 = cljs.core.next.call(null, xs_15435);
      i_15434 = G__15436;
      xs_15435 = G__15437;
      continue
    }else {
    }
    break
  }
  return ret
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if(typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null)
    }else {
      return cljs.core.into_array.call(null, size_or_seq)
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__15438 = i + 1;
          var G__15439 = cljs.core.next.call(null, s__$1);
          i = G__15438;
          s__$1 = G__15439;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__4299__auto___15440 = size;
      var i_15441 = 0;
      while(true) {
        if(i_15441 < n__4299__auto___15440) {
          a[i_15441] = init_val_or_seq;
          var G__15442 = i_15441 + 1;
          i_15441 = G__15442;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if(typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null)
    }else {
      return cljs.core.into_array.call(null, size_or_seq)
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__15443 = i + 1;
          var G__15444 = cljs.core.next.call(null, s__$1);
          i = G__15443;
          s__$1 = G__15444;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__4299__auto___15445 = size;
      var i_15446 = 0;
      while(true) {
        if(i_15446 < n__4299__auto___15445) {
          a[i_15446] = init_val_or_seq;
          var G__15447 = i_15446 + 1;
          i_15446 = G__15447;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if(typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null)
    }else {
      return cljs.core.into_array.call(null, size_or_seq)
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__15448 = i + 1;
          var G__15449 = cljs.core.next.call(null, s__$1);
          i = G__15448;
          s__$1 = G__15449;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__4299__auto___15450 = size;
      var i_15451 = 0;
      while(true) {
        if(i_15451 < n__4299__auto___15450) {
          a[i_15451] = init_val_or_seq;
          var G__15452 = i_15451 + 1;
          i_15451 = G__15452;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if(typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null)
    }else {
      return cljs.core.into_array.call(null, size_or_seq)
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__15453 = i + 1;
          var G__15454 = cljs.core.next.call(null, s__$1);
          i = G__15453;
          s__$1 = G__15454;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__4299__auto___15455 = size;
      var i_15456 = 0;
      while(true) {
        if(i_15456 < n__4299__auto___15455) {
          a[i_15456] = init_val_or_seq;
          var G__15457 = i_15456 + 1;
          i_15456 = G__15457;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if(cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s)
  }else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while(true) {
      if(i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__15458 = cljs.core.next.call(null, s__$1);
        var G__15459 = i - 1;
        var G__15460 = sum + 1;
        s__$1 = G__15458;
        i = G__15459;
        sum = G__15460;
        continue
      }else {
        return sum
      }
      break
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if(arglist == null) {
    return null
  }else {
    if(cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist))
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)))
      }else {
        return null
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null
    }, null, null)
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x
    }, null, null)
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if(s) {
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y))
        }else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y))
        }
      }else {
        return y
      }
    }, null, null)
  };
  var concat__3 = function() {
    var G__15461__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if(xys__$1) {
            if(cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1))
            }else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1))
            }
          }else {
            if(cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1))
            }else {
              return null
            }
          }
        }, null, null)
      };
      return cat.call(null, concat.call(null, x, y), zs)
    };
    var G__15461 = function(x, y, var_args) {
      var zs = null;
      if(arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15461__delegate.call(this, x, y, zs)
    };
    G__15461.cljs$lang$maxFixedArity = 2;
    G__15461.cljs$lang$applyTo = function(arglist__15462) {
      var x = cljs.core.first(arglist__15462);
      arglist__15462 = cljs.core.next(arglist__15462);
      var y = cljs.core.first(arglist__15462);
      var zs = cljs.core.rest(arglist__15462);
      return G__15461__delegate(x, y, zs)
    };
    G__15461.cljs$core$IFn$_invoke$arity$variadic = G__15461__delegate;
    return G__15461
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args)
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args)
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args))
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)))
  };
  var list_STAR___5 = function() {
    var G__15463__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))))
    };
    var G__15463 = function(a, b, c, d, var_args) {
      var more = null;
      if(arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__15463__delegate.call(this, a, b, c, d, more)
    };
    G__15463.cljs$lang$maxFixedArity = 4;
    G__15463.cljs$lang$applyTo = function(arglist__15464) {
      var a = cljs.core.first(arglist__15464);
      arglist__15464 = cljs.core.next(arglist__15464);
      var b = cljs.core.first(arglist__15464);
      arglist__15464 = cljs.core.next(arglist__15464);
      var c = cljs.core.first(arglist__15464);
      arglist__15464 = cljs.core.next(arglist__15464);
      var d = cljs.core.first(arglist__15464);
      var more = cljs.core.rest(arglist__15464);
      return G__15463__delegate(a, b, c, d, more)
    };
    G__15463.cljs$core$IFn$_invoke$arity$variadic = G__15463__delegate;
    return G__15463
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll)
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll)
};
cljs.core.conj_BANG_ = function conj_BANG_(tcoll, val) {
  return cljs.core._conj_BANG_.call(null, tcoll, val)
};
cljs.core.assoc_BANG_ = function assoc_BANG_(tcoll, key, val) {
  return cljs.core._assoc_BANG_.call(null, tcoll, key, val)
};
cljs.core.dissoc_BANG_ = function dissoc_BANG_(tcoll, key) {
  return cljs.core._dissoc_BANG_.call(null, tcoll, key)
};
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll)
};
cljs.core.disj_BANG_ = function disj_BANG_(tcoll, val) {
  return cljs.core._disjoin_BANG_.call(null, tcoll, val)
};
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if(argc === 0) {
    return f.call(null)
  }else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if(argc === 1) {
      if(f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a)
      }else {
        return f.call(null, a)
      }
    }else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if(argc === 2) {
        if(f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b)
        }else {
          return f.call(null, a, b)
        }
      }else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if(argc === 3) {
          if(f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c)
          }else {
            return f.call(null, a, b, c)
          }
        }else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if(argc === 4) {
            if(f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d)
            }else {
              return f.call(null, a, b, c, d)
            }
          }else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if(argc === 5) {
              if(f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e)
              }else {
                return f.call(null, a, b, c, d, e)
              }
            }else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if(argc === 6) {
                if(f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1)
                }else {
                  return f__$1.call(null, a, b, c, d, e, f__$1)
                }
              }else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if(argc === 7) {
                  if(f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g)
                  }else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g)
                  }
                }else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if(argc === 8) {
                    if(f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h)
                    }else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h)
                    }
                  }else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if(argc === 9) {
                      if(f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i)
                      }else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i)
                      }
                    }else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if(argc === 10) {
                        if(f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j)
                        }else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j)
                        }
                      }else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if(argc === 11) {
                          if(f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k)
                          }else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k)
                          }
                        }else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if(argc === 12) {
                            if(f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l)
                            }else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l)
                            }
                          }else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if(argc === 13) {
                              if(f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m)
                              }else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m)
                              }
                            }else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if(argc === 14) {
                                if(f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n)
                                }else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n)
                                }
                              }else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if(argc === 15) {
                                  if(f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o)
                                  }else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o)
                                  }
                                }else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if(argc === 16) {
                                    if(f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p)
                                    }else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p)
                                    }
                                  }else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if(argc === 17) {
                                      if(f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q)
                                      }else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q)
                                      }
                                    }else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if(argc === 18) {
                                        if(f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r)
                                        }else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r)
                                        }
                                      }else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if(argc === 19) {
                                          if(f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s)
                                          }else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s)
                                          }
                                        }else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if(argc === 20) {
                                            if(f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t)
                                            }else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t)
                                            }
                                          }else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args)
      }else {
        return f.cljs$lang$applyTo(args)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, args))
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__6 = function() {
    var G__15465__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if(f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if(bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist)
        }else {
          return f.cljs$lang$applyTo(arglist)
        }
      }else {
        return f.apply(f, cljs.core.to_array.call(null, arglist))
      }
    };
    var G__15465 = function(f, a, b, c, d, var_args) {
      var args = null;
      if(arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0)
      }
      return G__15465__delegate.call(this, f, a, b, c, d, args)
    };
    G__15465.cljs$lang$maxFixedArity = 5;
    G__15465.cljs$lang$applyTo = function(arglist__15466) {
      var f = cljs.core.first(arglist__15466);
      arglist__15466 = cljs.core.next(arglist__15466);
      var a = cljs.core.first(arglist__15466);
      arglist__15466 = cljs.core.next(arglist__15466);
      var b = cljs.core.first(arglist__15466);
      arglist__15466 = cljs.core.next(arglist__15466);
      var c = cljs.core.first(arglist__15466);
      arglist__15466 = cljs.core.next(arglist__15466);
      var d = cljs.core.first(arglist__15466);
      var args = cljs.core.rest(arglist__15466);
      return G__15465__delegate(f, a, b, c, d, args)
    };
    G__15465.cljs$core$IFn$_invoke$arity$variadic = G__15465__delegate;
    return G__15465
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply
}();
cljs.core.vary_meta = function() {
  var vary_meta__delegate = function(obj, f, args) {
    return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), args))
  };
  var vary_meta = function(obj, f, var_args) {
    var args = null;
    if(arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return vary_meta__delegate.call(this, obj, f, args)
  };
  vary_meta.cljs$lang$maxFixedArity = 2;
  vary_meta.cljs$lang$applyTo = function(arglist__15467) {
    var obj = cljs.core.first(arglist__15467);
    arglist__15467 = cljs.core.next(arglist__15467);
    var f = cljs.core.first(arglist__15467);
    var args = cljs.core.rest(arglist__15467);
    return vary_meta__delegate(obj, f, args)
  };
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__delegate;
  return vary_meta
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y)
  };
  var not_EQ___3 = function() {
    var G__15468__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more))
    };
    var G__15468 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15468__delegate.call(this, x, y, more)
    };
    G__15468.cljs$lang$maxFixedArity = 2;
    G__15468.cljs$lang$applyTo = function(arglist__15469) {
      var x = cljs.core.first(arglist__15469);
      arglist__15469 = cljs.core.next(arglist__15469);
      var y = cljs.core.first(arglist__15469);
      var more = cljs.core.rest(arglist__15469);
      return G__15468__delegate(x, y, more)
    };
    G__15468.cljs$core$IFn$_invoke$arity$variadic = G__15468__delegate;
    return G__15468
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_
}();
cljs.core.not_empty = function not_empty(coll) {
  if(cljs.core.seq.call(null, coll)) {
    return coll
  }else {
    return null
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while(true) {
    if(cljs.core.seq.call(null, coll) == null) {
      return true
    }else {
      if(cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__15470 = pred;
        var G__15471 = cljs.core.next.call(null, coll);
        pred = G__15470;
        coll = G__15471;
        continue
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll)
};
cljs.core.some = function some(pred, coll) {
  while(true) {
    if(cljs.core.seq.call(null, coll)) {
      var or__3483__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if(cljs.core.truth_(or__3483__auto__)) {
        return or__3483__auto__
      }else {
        var G__15472 = pred;
        var G__15473 = cljs.core.next.call(null, coll);
        pred = G__15472;
        coll = G__15473;
        continue
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll))
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if(cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0
  }else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n)
};
cljs.core.identity = function identity(x) {
  return x
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__15474 = null;
    var G__15474__0 = function() {
      return cljs.core.not.call(null, f.call(null))
    };
    var G__15474__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x))
    };
    var G__15474__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y))
    };
    var G__15474__3 = function() {
      var G__15475__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs))
      };
      var G__15475 = function(x, y, var_args) {
        var zs = null;
        if(arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
        }
        return G__15475__delegate.call(this, x, y, zs)
      };
      G__15475.cljs$lang$maxFixedArity = 2;
      G__15475.cljs$lang$applyTo = function(arglist__15476) {
        var x = cljs.core.first(arglist__15476);
        arglist__15476 = cljs.core.next(arglist__15476);
        var y = cljs.core.first(arglist__15476);
        var zs = cljs.core.rest(arglist__15476);
        return G__15475__delegate(x, y, zs)
      };
      G__15475.cljs$core$IFn$_invoke$arity$variadic = G__15475__delegate;
      return G__15475
    }();
    G__15474 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__15474__0.call(this);
        case 1:
          return G__15474__1.call(this, x);
        case 2:
          return G__15474__2.call(this, x, y);
        default:
          return G__15474__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__15474.cljs$lang$maxFixedArity = 2;
    G__15474.cljs$lang$applyTo = G__15474__3.cljs$lang$applyTo;
    return G__15474
  }()
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__15477__delegate = function(args) {
      return x
    };
    var G__15477 = function(var_args) {
      var args = null;
      if(arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__15477__delegate.call(this, args)
    };
    G__15477.cljs$lang$maxFixedArity = 0;
    G__15477.cljs$lang$applyTo = function(arglist__15478) {
      var args = cljs.core.seq(arglist__15478);
      return G__15477__delegate(args)
    };
    G__15477.cljs$core$IFn$_invoke$arity$variadic = G__15477__delegate;
    return G__15477
  }()
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity
  };
  var comp__1 = function(f) {
    return f
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__15479 = null;
      var G__15479__0 = function() {
        return f.call(null, g.call(null))
      };
      var G__15479__1 = function(x) {
        return f.call(null, g.call(null, x))
      };
      var G__15479__2 = function(x, y) {
        return f.call(null, g.call(null, x, y))
      };
      var G__15479__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z))
      };
      var G__15479__4 = function() {
        var G__15480__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args))
        };
        var G__15480 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__15480__delegate.call(this, x, y, z, args)
        };
        G__15480.cljs$lang$maxFixedArity = 3;
        G__15480.cljs$lang$applyTo = function(arglist__15481) {
          var x = cljs.core.first(arglist__15481);
          arglist__15481 = cljs.core.next(arglist__15481);
          var y = cljs.core.first(arglist__15481);
          arglist__15481 = cljs.core.next(arglist__15481);
          var z = cljs.core.first(arglist__15481);
          var args = cljs.core.rest(arglist__15481);
          return G__15480__delegate(x, y, z, args)
        };
        G__15480.cljs$core$IFn$_invoke$arity$variadic = G__15480__delegate;
        return G__15480
      }();
      G__15479 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15479__0.call(this);
          case 1:
            return G__15479__1.call(this, x);
          case 2:
            return G__15479__2.call(this, x, y);
          case 3:
            return G__15479__3.call(this, x, y, z);
          default:
            return G__15479__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15479.cljs$lang$maxFixedArity = 3;
      G__15479.cljs$lang$applyTo = G__15479__4.cljs$lang$applyTo;
      return G__15479
    }()
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__15482 = null;
      var G__15482__0 = function() {
        return f.call(null, g.call(null, h.call(null)))
      };
      var G__15482__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)))
      };
      var G__15482__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)))
      };
      var G__15482__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)))
      };
      var G__15482__4 = function() {
        var G__15483__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)))
        };
        var G__15483 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__15483__delegate.call(this, x, y, z, args)
        };
        G__15483.cljs$lang$maxFixedArity = 3;
        G__15483.cljs$lang$applyTo = function(arglist__15484) {
          var x = cljs.core.first(arglist__15484);
          arglist__15484 = cljs.core.next(arglist__15484);
          var y = cljs.core.first(arglist__15484);
          arglist__15484 = cljs.core.next(arglist__15484);
          var z = cljs.core.first(arglist__15484);
          var args = cljs.core.rest(arglist__15484);
          return G__15483__delegate(x, y, z, args)
        };
        G__15483.cljs$core$IFn$_invoke$arity$variadic = G__15483__delegate;
        return G__15483
      }();
      G__15482 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15482__0.call(this);
          case 1:
            return G__15482__1.call(this, x);
          case 2:
            return G__15482__2.call(this, x, y);
          case 3:
            return G__15482__3.call(this, x, y, z);
          default:
            return G__15482__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15482.cljs$lang$maxFixedArity = 3;
      G__15482.cljs$lang$applyTo = G__15482__4.cljs$lang$applyTo;
      return G__15482
    }()
  };
  var comp__4 = function() {
    var G__15485__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__15486__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while(true) {
            if(fs__$2) {
              var G__15487 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__15488 = cljs.core.next.call(null, fs__$2);
              ret = G__15487;
              fs__$2 = G__15488;
              continue
            }else {
              return ret
            }
            break
          }
        };
        var G__15486 = function(var_args) {
          var args = null;
          if(arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
          }
          return G__15486__delegate.call(this, args)
        };
        G__15486.cljs$lang$maxFixedArity = 0;
        G__15486.cljs$lang$applyTo = function(arglist__15489) {
          var args = cljs.core.seq(arglist__15489);
          return G__15486__delegate(args)
        };
        G__15486.cljs$core$IFn$_invoke$arity$variadic = G__15486__delegate;
        return G__15486
      }()
    };
    var G__15485 = function(f1, f2, f3, var_args) {
      var fs = null;
      if(arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__15485__delegate.call(this, f1, f2, f3, fs)
    };
    G__15485.cljs$lang$maxFixedArity = 3;
    G__15485.cljs$lang$applyTo = function(arglist__15490) {
      var f1 = cljs.core.first(arglist__15490);
      arglist__15490 = cljs.core.next(arglist__15490);
      var f2 = cljs.core.first(arglist__15490);
      arglist__15490 = cljs.core.next(arglist__15490);
      var f3 = cljs.core.first(arglist__15490);
      var fs = cljs.core.rest(arglist__15490);
      return G__15485__delegate(f1, f2, f3, fs)
    };
    G__15485.cljs$core$IFn$_invoke$arity$variadic = G__15485__delegate;
    return G__15485
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__15491__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args)
      };
      var G__15491 = function(var_args) {
        var args = null;
        if(arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__15491__delegate.call(this, args)
      };
      G__15491.cljs$lang$maxFixedArity = 0;
      G__15491.cljs$lang$applyTo = function(arglist__15492) {
        var args = cljs.core.seq(arglist__15492);
        return G__15491__delegate(args)
      };
      G__15491.cljs$core$IFn$_invoke$arity$variadic = G__15491__delegate;
      return G__15491
    }()
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__15493__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args)
      };
      var G__15493 = function(var_args) {
        var args = null;
        if(arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__15493__delegate.call(this, args)
      };
      G__15493.cljs$lang$maxFixedArity = 0;
      G__15493.cljs$lang$applyTo = function(arglist__15494) {
        var args = cljs.core.seq(arglist__15494);
        return G__15493__delegate(args)
      };
      G__15493.cljs$core$IFn$_invoke$arity$variadic = G__15493__delegate;
      return G__15493
    }()
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__15495__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args)
      };
      var G__15495 = function(var_args) {
        var args = null;
        if(arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__15495__delegate.call(this, args)
      };
      G__15495.cljs$lang$maxFixedArity = 0;
      G__15495.cljs$lang$applyTo = function(arglist__15496) {
        var args = cljs.core.seq(arglist__15496);
        return G__15495__delegate(args)
      };
      G__15495.cljs$core$IFn$_invoke$arity$variadic = G__15495__delegate;
      return G__15495
    }()
  };
  var partial__5 = function() {
    var G__15497__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__15498__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args))
        };
        var G__15498 = function(var_args) {
          var args = null;
          if(arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
          }
          return G__15498__delegate.call(this, args)
        };
        G__15498.cljs$lang$maxFixedArity = 0;
        G__15498.cljs$lang$applyTo = function(arglist__15499) {
          var args = cljs.core.seq(arglist__15499);
          return G__15498__delegate(args)
        };
        G__15498.cljs$core$IFn$_invoke$arity$variadic = G__15498__delegate;
        return G__15498
      }()
    };
    var G__15497 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if(arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__15497__delegate.call(this, f, arg1, arg2, arg3, more)
    };
    G__15497.cljs$lang$maxFixedArity = 4;
    G__15497.cljs$lang$applyTo = function(arglist__15500) {
      var f = cljs.core.first(arglist__15500);
      arglist__15500 = cljs.core.next(arglist__15500);
      var arg1 = cljs.core.first(arglist__15500);
      arglist__15500 = cljs.core.next(arglist__15500);
      var arg2 = cljs.core.first(arglist__15500);
      arglist__15500 = cljs.core.next(arglist__15500);
      var arg3 = cljs.core.first(arglist__15500);
      var more = cljs.core.rest(arglist__15500);
      return G__15497__delegate(f, arg1, arg2, arg3, more)
    };
    G__15497.cljs$core$IFn$_invoke$arity$variadic = G__15497__delegate;
    return G__15497
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__15501 = null;
      var G__15501__1 = function(a) {
        return f.call(null, a == null ? x : a)
      };
      var G__15501__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b)
      };
      var G__15501__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c)
      };
      var G__15501__4 = function() {
        var G__15502__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds)
        };
        var G__15502 = function(a, b, c, var_args) {
          var ds = null;
          if(arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__15502__delegate.call(this, a, b, c, ds)
        };
        G__15502.cljs$lang$maxFixedArity = 3;
        G__15502.cljs$lang$applyTo = function(arglist__15503) {
          var a = cljs.core.first(arglist__15503);
          arglist__15503 = cljs.core.next(arglist__15503);
          var b = cljs.core.first(arglist__15503);
          arglist__15503 = cljs.core.next(arglist__15503);
          var c = cljs.core.first(arglist__15503);
          var ds = cljs.core.rest(arglist__15503);
          return G__15502__delegate(a, b, c, ds)
        };
        G__15502.cljs$core$IFn$_invoke$arity$variadic = G__15502__delegate;
        return G__15502
      }();
      G__15501 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__15501__1.call(this, a);
          case 2:
            return G__15501__2.call(this, a, b);
          case 3:
            return G__15501__3.call(this, a, b, c);
          default:
            return G__15501__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15501.cljs$lang$maxFixedArity = 3;
      G__15501.cljs$lang$applyTo = G__15501__4.cljs$lang$applyTo;
      return G__15501
    }()
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__15504 = null;
      var G__15504__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b)
      };
      var G__15504__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c)
      };
      var G__15504__4 = function() {
        var G__15505__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds)
        };
        var G__15505 = function(a, b, c, var_args) {
          var ds = null;
          if(arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__15505__delegate.call(this, a, b, c, ds)
        };
        G__15505.cljs$lang$maxFixedArity = 3;
        G__15505.cljs$lang$applyTo = function(arglist__15506) {
          var a = cljs.core.first(arglist__15506);
          arglist__15506 = cljs.core.next(arglist__15506);
          var b = cljs.core.first(arglist__15506);
          arglist__15506 = cljs.core.next(arglist__15506);
          var c = cljs.core.first(arglist__15506);
          var ds = cljs.core.rest(arglist__15506);
          return G__15505__delegate(a, b, c, ds)
        };
        G__15505.cljs$core$IFn$_invoke$arity$variadic = G__15505__delegate;
        return G__15505
      }();
      G__15504 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__15504__2.call(this, a, b);
          case 3:
            return G__15504__3.call(this, a, b, c);
          default:
            return G__15504__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15504.cljs$lang$maxFixedArity = 3;
      G__15504.cljs$lang$applyTo = G__15504__4.cljs$lang$applyTo;
      return G__15504
    }()
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__15507 = null;
      var G__15507__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b)
      };
      var G__15507__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c)
      };
      var G__15507__4 = function() {
        var G__15508__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds)
        };
        var G__15508 = function(a, b, c, var_args) {
          var ds = null;
          if(arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__15508__delegate.call(this, a, b, c, ds)
        };
        G__15508.cljs$lang$maxFixedArity = 3;
        G__15508.cljs$lang$applyTo = function(arglist__15509) {
          var a = cljs.core.first(arglist__15509);
          arglist__15509 = cljs.core.next(arglist__15509);
          var b = cljs.core.first(arglist__15509);
          arglist__15509 = cljs.core.next(arglist__15509);
          var c = cljs.core.first(arglist__15509);
          var ds = cljs.core.rest(arglist__15509);
          return G__15508__delegate(a, b, c, ds)
        };
        G__15508.cljs$core$IFn$_invoke$arity$variadic = G__15508__delegate;
        return G__15508
      }();
      G__15507 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__15507__2.call(this, a, b);
          case 3:
            return G__15507__3.call(this, a, b, c);
          default:
            return G__15507__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15507.cljs$lang$maxFixedArity = 3;
      G__15507.cljs$lang$applyTo = G__15507__4.cljs$lang$applyTo;
      return G__15507
    }()
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4299__auto___15510 = size;
          var i_15511 = 0;
          while(true) {
            if(i_15511 < n__4299__auto___15510) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_15511, cljs.core._nth.call(null, c, i_15511)));
              var G__15512 = i_15511 + 1;
              i_15511 = G__15512;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)))
        }else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)))
        }
      }else {
        return null
      }
    }, null, null)
  };
  return mapi.call(null, 0, coll)
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4299__auto___15513 = size;
        var i_15514 = 0;
        while(true) {
          if(i_15514 < n__4299__auto___15513) {
            var x_15515 = f.call(null, cljs.core._nth.call(null, c, i_15514));
            if(x_15515 == null) {
            }else {
              cljs.core.chunk_append.call(null, b, x_15515)
            }
            var G__15516 = i_15514 + 1;
            i_15514 = G__15516;
            continue
          }else {
          }
          break
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)))
      }else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if(x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s))
        }else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)))
        }
      }
    }else {
      return null
    }
  }, null, null)
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4299__auto___15517 = size;
          var i_15518 = 0;
          while(true) {
            if(i_15518 < n__4299__auto___15517) {
              var x_15519 = f.call(null, idx + i_15518, cljs.core._nth.call(null, c, i_15518));
              if(x_15519 == null) {
              }else {
                cljs.core.chunk_append.call(null, b, x_15519)
              }
              var G__15520 = i_15518 + 1;
              i_15518 = G__15520;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)))
        }else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if(x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s))
          }else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)))
          }
        }
      }else {
        return null
      }
    }, null, null)
  };
  return keepi.call(null, 0, coll)
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x))
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3474__auto__ = p.call(null, x);
          if(cljs.core.truth_(and__3474__auto__)) {
            return p.call(null, y)
          }else {
            return and__3474__auto__
          }
        }())
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3474__auto__ = p.call(null, x);
          if(cljs.core.truth_(and__3474__auto__)) {
            var and__3474__auto____$1 = p.call(null, y);
            if(cljs.core.truth_(and__3474__auto____$1)) {
              return p.call(null, z)
            }else {
              return and__3474__auto____$1
            }
          }else {
            return and__3474__auto__
          }
        }())
      };
      var ep1__4 = function() {
        var G__15527__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, function() {
            var and__3474__auto__ = ep1.call(null, x, y, z);
            if(cljs.core.truth_(and__3474__auto__)) {
              return cljs.core.every_QMARK_.call(null, p, args)
            }else {
              return and__3474__auto__
            }
          }())
        };
        var G__15527 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__15527__delegate.call(this, x, y, z, args)
        };
        G__15527.cljs$lang$maxFixedArity = 3;
        G__15527.cljs$lang$applyTo = function(arglist__15528) {
          var x = cljs.core.first(arglist__15528);
          arglist__15528 = cljs.core.next(arglist__15528);
          var y = cljs.core.first(arglist__15528);
          arglist__15528 = cljs.core.next(arglist__15528);
          var z = cljs.core.first(arglist__15528);
          var args = cljs.core.rest(arglist__15528);
          return G__15527__delegate(x, y, z, args)
        };
        G__15527.cljs$core$IFn$_invoke$arity$variadic = G__15527__delegate;
        return G__15527
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1
    }()
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3474__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3474__auto__)) {
            return p2.call(null, x)
          }else {
            return and__3474__auto__
          }
        }())
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3474__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3474__auto__)) {
            var and__3474__auto____$1 = p1.call(null, y);
            if(cljs.core.truth_(and__3474__auto____$1)) {
              var and__3474__auto____$2 = p2.call(null, x);
              if(cljs.core.truth_(and__3474__auto____$2)) {
                return p2.call(null, y)
              }else {
                return and__3474__auto____$2
              }
            }else {
              return and__3474__auto____$1
            }
          }else {
            return and__3474__auto__
          }
        }())
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3474__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3474__auto__)) {
            var and__3474__auto____$1 = p1.call(null, y);
            if(cljs.core.truth_(and__3474__auto____$1)) {
              var and__3474__auto____$2 = p1.call(null, z);
              if(cljs.core.truth_(and__3474__auto____$2)) {
                var and__3474__auto____$3 = p2.call(null, x);
                if(cljs.core.truth_(and__3474__auto____$3)) {
                  var and__3474__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3474__auto____$4)) {
                    return p2.call(null, z)
                  }else {
                    return and__3474__auto____$4
                  }
                }else {
                  return and__3474__auto____$3
                }
              }else {
                return and__3474__auto____$2
              }
            }else {
              return and__3474__auto____$1
            }
          }else {
            return and__3474__auto__
          }
        }())
      };
      var ep2__4 = function() {
        var G__15529__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, function() {
            var and__3474__auto__ = ep2.call(null, x, y, z);
            if(cljs.core.truth_(and__3474__auto__)) {
              return cljs.core.every_QMARK_.call(null, function(p1__15521_SHARP_) {
                var and__3474__auto____$1 = p1.call(null, p1__15521_SHARP_);
                if(cljs.core.truth_(and__3474__auto____$1)) {
                  return p2.call(null, p1__15521_SHARP_)
                }else {
                  return and__3474__auto____$1
                }
              }, args)
            }else {
              return and__3474__auto__
            }
          }())
        };
        var G__15529 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__15529__delegate.call(this, x, y, z, args)
        };
        G__15529.cljs$lang$maxFixedArity = 3;
        G__15529.cljs$lang$applyTo = function(arglist__15530) {
          var x = cljs.core.first(arglist__15530);
          arglist__15530 = cljs.core.next(arglist__15530);
          var y = cljs.core.first(arglist__15530);
          arglist__15530 = cljs.core.next(arglist__15530);
          var z = cljs.core.first(arglist__15530);
          var args = cljs.core.rest(arglist__15530);
          return G__15529__delegate(x, y, z, args)
        };
        G__15529.cljs$core$IFn$_invoke$arity$variadic = G__15529__delegate;
        return G__15529
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2
    }()
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3474__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3474__auto__)) {
            var and__3474__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3474__auto____$1)) {
              return p3.call(null, x)
            }else {
              return and__3474__auto____$1
            }
          }else {
            return and__3474__auto__
          }
        }())
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3474__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3474__auto__)) {
            var and__3474__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3474__auto____$1)) {
              var and__3474__auto____$2 = p3.call(null, x);
              if(cljs.core.truth_(and__3474__auto____$2)) {
                var and__3474__auto____$3 = p1.call(null, y);
                if(cljs.core.truth_(and__3474__auto____$3)) {
                  var and__3474__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3474__auto____$4)) {
                    return p3.call(null, y)
                  }else {
                    return and__3474__auto____$4
                  }
                }else {
                  return and__3474__auto____$3
                }
              }else {
                return and__3474__auto____$2
              }
            }else {
              return and__3474__auto____$1
            }
          }else {
            return and__3474__auto__
          }
        }())
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3474__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3474__auto__)) {
            var and__3474__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3474__auto____$1)) {
              var and__3474__auto____$2 = p3.call(null, x);
              if(cljs.core.truth_(and__3474__auto____$2)) {
                var and__3474__auto____$3 = p1.call(null, y);
                if(cljs.core.truth_(and__3474__auto____$3)) {
                  var and__3474__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3474__auto____$4)) {
                    var and__3474__auto____$5 = p3.call(null, y);
                    if(cljs.core.truth_(and__3474__auto____$5)) {
                      var and__3474__auto____$6 = p1.call(null, z);
                      if(cljs.core.truth_(and__3474__auto____$6)) {
                        var and__3474__auto____$7 = p2.call(null, z);
                        if(cljs.core.truth_(and__3474__auto____$7)) {
                          return p3.call(null, z)
                        }else {
                          return and__3474__auto____$7
                        }
                      }else {
                        return and__3474__auto____$6
                      }
                    }else {
                      return and__3474__auto____$5
                    }
                  }else {
                    return and__3474__auto____$4
                  }
                }else {
                  return and__3474__auto____$3
                }
              }else {
                return and__3474__auto____$2
              }
            }else {
              return and__3474__auto____$1
            }
          }else {
            return and__3474__auto__
          }
        }())
      };
      var ep3__4 = function() {
        var G__15531__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, function() {
            var and__3474__auto__ = ep3.call(null, x, y, z);
            if(cljs.core.truth_(and__3474__auto__)) {
              return cljs.core.every_QMARK_.call(null, function(p1__15522_SHARP_) {
                var and__3474__auto____$1 = p1.call(null, p1__15522_SHARP_);
                if(cljs.core.truth_(and__3474__auto____$1)) {
                  var and__3474__auto____$2 = p2.call(null, p1__15522_SHARP_);
                  if(cljs.core.truth_(and__3474__auto____$2)) {
                    return p3.call(null, p1__15522_SHARP_)
                  }else {
                    return and__3474__auto____$2
                  }
                }else {
                  return and__3474__auto____$1
                }
              }, args)
            }else {
              return and__3474__auto__
            }
          }())
        };
        var G__15531 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__15531__delegate.call(this, x, y, z, args)
        };
        G__15531.cljs$lang$maxFixedArity = 3;
        G__15531.cljs$lang$applyTo = function(arglist__15532) {
          var x = cljs.core.first(arglist__15532);
          arglist__15532 = cljs.core.next(arglist__15532);
          var y = cljs.core.first(arglist__15532);
          arglist__15532 = cljs.core.next(arglist__15532);
          var z = cljs.core.first(arglist__15532);
          var args = cljs.core.rest(arglist__15532);
          return G__15531__delegate(x, y, z, args)
        };
        G__15531.cljs$core$IFn$_invoke$arity$variadic = G__15531__delegate;
        return G__15531
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3
    }()
  };
  var every_pred__4 = function() {
    var G__15533__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__15523_SHARP_) {
            return p1__15523_SHARP_.call(null, x)
          }, ps__$1)
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__15524_SHARP_) {
            var and__3474__auto__ = p1__15524_SHARP_.call(null, x);
            if(cljs.core.truth_(and__3474__auto__)) {
              return p1__15524_SHARP_.call(null, y)
            }else {
              return and__3474__auto__
            }
          }, ps__$1)
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__15525_SHARP_) {
            var and__3474__auto__ = p1__15525_SHARP_.call(null, x);
            if(cljs.core.truth_(and__3474__auto__)) {
              var and__3474__auto____$1 = p1__15525_SHARP_.call(null, y);
              if(cljs.core.truth_(and__3474__auto____$1)) {
                return p1__15525_SHARP_.call(null, z)
              }else {
                return and__3474__auto____$1
              }
            }else {
              return and__3474__auto__
            }
          }, ps__$1)
        };
        var epn__4 = function() {
          var G__15534__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, function() {
              var and__3474__auto__ = epn.call(null, x, y, z);
              if(cljs.core.truth_(and__3474__auto__)) {
                return cljs.core.every_QMARK_.call(null, function(p1__15526_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__15526_SHARP_, args)
                }, ps__$1)
              }else {
                return and__3474__auto__
              }
            }())
          };
          var G__15534 = function(x, y, z, var_args) {
            var args = null;
            if(arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__15534__delegate.call(this, x, y, z, args)
          };
          G__15534.cljs$lang$maxFixedArity = 3;
          G__15534.cljs$lang$applyTo = function(arglist__15535) {
            var x = cljs.core.first(arglist__15535);
            arglist__15535 = cljs.core.next(arglist__15535);
            var y = cljs.core.first(arglist__15535);
            arglist__15535 = cljs.core.next(arglist__15535);
            var z = cljs.core.first(arglist__15535);
            var args = cljs.core.rest(arglist__15535);
            return G__15534__delegate(x, y, z, args)
          };
          G__15534.cljs$core$IFn$_invoke$arity$variadic = G__15534__delegate;
          return G__15534
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn
      }()
    };
    var G__15533 = function(p1, p2, p3, var_args) {
      var ps = null;
      if(arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__15533__delegate.call(this, p1, p2, p3, ps)
    };
    G__15533.cljs$lang$maxFixedArity = 3;
    G__15533.cljs$lang$applyTo = function(arglist__15536) {
      var p1 = cljs.core.first(arglist__15536);
      arglist__15536 = cljs.core.next(arglist__15536);
      var p2 = cljs.core.first(arglist__15536);
      arglist__15536 = cljs.core.next(arglist__15536);
      var p3 = cljs.core.first(arglist__15536);
      var ps = cljs.core.rest(arglist__15536);
      return G__15533__delegate(p1, p2, p3, ps)
    };
    G__15533.cljs$core$IFn$_invoke$arity$variadic = G__15533__delegate;
    return G__15533
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null
      };
      var sp1__1 = function(x) {
        return p.call(null, x)
      };
      var sp1__2 = function(x, y) {
        var or__3483__auto__ = p.call(null, x);
        if(cljs.core.truth_(or__3483__auto__)) {
          return or__3483__auto__
        }else {
          return p.call(null, y)
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3483__auto__ = p.call(null, x);
        if(cljs.core.truth_(or__3483__auto__)) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = p.call(null, y);
          if(cljs.core.truth_(or__3483__auto____$1)) {
            return or__3483__auto____$1
          }else {
            return p.call(null, z)
          }
        }
      };
      var sp1__4 = function() {
        var G__15543__delegate = function(x, y, z, args) {
          var or__3483__auto__ = sp1.call(null, x, y, z);
          if(cljs.core.truth_(or__3483__auto__)) {
            return or__3483__auto__
          }else {
            return cljs.core.some.call(null, p, args)
          }
        };
        var G__15543 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__15543__delegate.call(this, x, y, z, args)
        };
        G__15543.cljs$lang$maxFixedArity = 3;
        G__15543.cljs$lang$applyTo = function(arglist__15544) {
          var x = cljs.core.first(arglist__15544);
          arglist__15544 = cljs.core.next(arglist__15544);
          var y = cljs.core.first(arglist__15544);
          arglist__15544 = cljs.core.next(arglist__15544);
          var z = cljs.core.first(arglist__15544);
          var args = cljs.core.rest(arglist__15544);
          return G__15543__delegate(x, y, z, args)
        };
        G__15543.cljs$core$IFn$_invoke$arity$variadic = G__15543__delegate;
        return G__15543
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1
    }()
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null
      };
      var sp2__1 = function(x) {
        var or__3483__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3483__auto__)) {
          return or__3483__auto__
        }else {
          return p2.call(null, x)
        }
      };
      var sp2__2 = function(x, y) {
        var or__3483__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3483__auto__)) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = p1.call(null, y);
          if(cljs.core.truth_(or__3483__auto____$1)) {
            return or__3483__auto____$1
          }else {
            var or__3483__auto____$2 = p2.call(null, x);
            if(cljs.core.truth_(or__3483__auto____$2)) {
              return or__3483__auto____$2
            }else {
              return p2.call(null, y)
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3483__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3483__auto__)) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = p1.call(null, y);
          if(cljs.core.truth_(or__3483__auto____$1)) {
            return or__3483__auto____$1
          }else {
            var or__3483__auto____$2 = p1.call(null, z);
            if(cljs.core.truth_(or__3483__auto____$2)) {
              return or__3483__auto____$2
            }else {
              var or__3483__auto____$3 = p2.call(null, x);
              if(cljs.core.truth_(or__3483__auto____$3)) {
                return or__3483__auto____$3
              }else {
                var or__3483__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3483__auto____$4)) {
                  return or__3483__auto____$4
                }else {
                  return p2.call(null, z)
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__15545__delegate = function(x, y, z, args) {
          var or__3483__auto__ = sp2.call(null, x, y, z);
          if(cljs.core.truth_(or__3483__auto__)) {
            return or__3483__auto__
          }else {
            return cljs.core.some.call(null, function(p1__15537_SHARP_) {
              var or__3483__auto____$1 = p1.call(null, p1__15537_SHARP_);
              if(cljs.core.truth_(or__3483__auto____$1)) {
                return or__3483__auto____$1
              }else {
                return p2.call(null, p1__15537_SHARP_)
              }
            }, args)
          }
        };
        var G__15545 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__15545__delegate.call(this, x, y, z, args)
        };
        G__15545.cljs$lang$maxFixedArity = 3;
        G__15545.cljs$lang$applyTo = function(arglist__15546) {
          var x = cljs.core.first(arglist__15546);
          arglist__15546 = cljs.core.next(arglist__15546);
          var y = cljs.core.first(arglist__15546);
          arglist__15546 = cljs.core.next(arglist__15546);
          var z = cljs.core.first(arglist__15546);
          var args = cljs.core.rest(arglist__15546);
          return G__15545__delegate(x, y, z, args)
        };
        G__15545.cljs$core$IFn$_invoke$arity$variadic = G__15545__delegate;
        return G__15545
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2
    }()
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null
      };
      var sp3__1 = function(x) {
        var or__3483__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3483__auto__)) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3483__auto____$1)) {
            return or__3483__auto____$1
          }else {
            return p3.call(null, x)
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3483__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3483__auto__)) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3483__auto____$1)) {
            return or__3483__auto____$1
          }else {
            var or__3483__auto____$2 = p3.call(null, x);
            if(cljs.core.truth_(or__3483__auto____$2)) {
              return or__3483__auto____$2
            }else {
              var or__3483__auto____$3 = p1.call(null, y);
              if(cljs.core.truth_(or__3483__auto____$3)) {
                return or__3483__auto____$3
              }else {
                var or__3483__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3483__auto____$4)) {
                  return or__3483__auto____$4
                }else {
                  return p3.call(null, y)
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3483__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3483__auto__)) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3483__auto____$1)) {
            return or__3483__auto____$1
          }else {
            var or__3483__auto____$2 = p3.call(null, x);
            if(cljs.core.truth_(or__3483__auto____$2)) {
              return or__3483__auto____$2
            }else {
              var or__3483__auto____$3 = p1.call(null, y);
              if(cljs.core.truth_(or__3483__auto____$3)) {
                return or__3483__auto____$3
              }else {
                var or__3483__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3483__auto____$4)) {
                  return or__3483__auto____$4
                }else {
                  var or__3483__auto____$5 = p3.call(null, y);
                  if(cljs.core.truth_(or__3483__auto____$5)) {
                    return or__3483__auto____$5
                  }else {
                    var or__3483__auto____$6 = p1.call(null, z);
                    if(cljs.core.truth_(or__3483__auto____$6)) {
                      return or__3483__auto____$6
                    }else {
                      var or__3483__auto____$7 = p2.call(null, z);
                      if(cljs.core.truth_(or__3483__auto____$7)) {
                        return or__3483__auto____$7
                      }else {
                        return p3.call(null, z)
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__15547__delegate = function(x, y, z, args) {
          var or__3483__auto__ = sp3.call(null, x, y, z);
          if(cljs.core.truth_(or__3483__auto__)) {
            return or__3483__auto__
          }else {
            return cljs.core.some.call(null, function(p1__15538_SHARP_) {
              var or__3483__auto____$1 = p1.call(null, p1__15538_SHARP_);
              if(cljs.core.truth_(or__3483__auto____$1)) {
                return or__3483__auto____$1
              }else {
                var or__3483__auto____$2 = p2.call(null, p1__15538_SHARP_);
                if(cljs.core.truth_(or__3483__auto____$2)) {
                  return or__3483__auto____$2
                }else {
                  return p3.call(null, p1__15538_SHARP_)
                }
              }
            }, args)
          }
        };
        var G__15547 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__15547__delegate.call(this, x, y, z, args)
        };
        G__15547.cljs$lang$maxFixedArity = 3;
        G__15547.cljs$lang$applyTo = function(arglist__15548) {
          var x = cljs.core.first(arglist__15548);
          arglist__15548 = cljs.core.next(arglist__15548);
          var y = cljs.core.first(arglist__15548);
          arglist__15548 = cljs.core.next(arglist__15548);
          var z = cljs.core.first(arglist__15548);
          var args = cljs.core.rest(arglist__15548);
          return G__15547__delegate(x, y, z, args)
        };
        G__15547.cljs$core$IFn$_invoke$arity$variadic = G__15547__delegate;
        return G__15547
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3
    }()
  };
  var some_fn__4 = function() {
    var G__15549__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__15539_SHARP_) {
            return p1__15539_SHARP_.call(null, x)
          }, ps__$1)
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__15540_SHARP_) {
            var or__3483__auto__ = p1__15540_SHARP_.call(null, x);
            if(cljs.core.truth_(or__3483__auto__)) {
              return or__3483__auto__
            }else {
              return p1__15540_SHARP_.call(null, y)
            }
          }, ps__$1)
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__15541_SHARP_) {
            var or__3483__auto__ = p1__15541_SHARP_.call(null, x);
            if(cljs.core.truth_(or__3483__auto__)) {
              return or__3483__auto__
            }else {
              var or__3483__auto____$1 = p1__15541_SHARP_.call(null, y);
              if(cljs.core.truth_(or__3483__auto____$1)) {
                return or__3483__auto____$1
              }else {
                return p1__15541_SHARP_.call(null, z)
              }
            }
          }, ps__$1)
        };
        var spn__4 = function() {
          var G__15550__delegate = function(x, y, z, args) {
            var or__3483__auto__ = spn.call(null, x, y, z);
            if(cljs.core.truth_(or__3483__auto__)) {
              return or__3483__auto__
            }else {
              return cljs.core.some.call(null, function(p1__15542_SHARP_) {
                return cljs.core.some.call(null, p1__15542_SHARP_, args)
              }, ps__$1)
            }
          };
          var G__15550 = function(x, y, z, var_args) {
            var args = null;
            if(arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__15550__delegate.call(this, x, y, z, args)
          };
          G__15550.cljs$lang$maxFixedArity = 3;
          G__15550.cljs$lang$applyTo = function(arglist__15551) {
            var x = cljs.core.first(arglist__15551);
            arglist__15551 = cljs.core.next(arglist__15551);
            var y = cljs.core.first(arglist__15551);
            arglist__15551 = cljs.core.next(arglist__15551);
            var z = cljs.core.first(arglist__15551);
            var args = cljs.core.rest(arglist__15551);
            return G__15550__delegate(x, y, z, args)
          };
          G__15550.cljs$core$IFn$_invoke$arity$variadic = G__15550__delegate;
          return G__15550
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn
      }()
    };
    var G__15549 = function(p1, p2, p3, var_args) {
      var ps = null;
      if(arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__15549__delegate.call(this, p1, p2, p3, ps)
    };
    G__15549.cljs$lang$maxFixedArity = 3;
    G__15549.cljs$lang$applyTo = function(arglist__15552) {
      var p1 = cljs.core.first(arglist__15552);
      arglist__15552 = cljs.core.next(arglist__15552);
      var p2 = cljs.core.first(arglist__15552);
      arglist__15552 = cljs.core.next(arglist__15552);
      var p3 = cljs.core.first(arglist__15552);
      var ps = cljs.core.rest(arglist__15552);
      return G__15549__delegate(p1, p2, p3, ps)
    };
    G__15549.cljs$core$IFn$_invoke$arity$variadic = G__15549__delegate;
    return G__15549
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4299__auto___15554 = size;
          var i_15555 = 0;
          while(true) {
            if(i_15555 < n__4299__auto___15554) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_15555)));
              var G__15556 = i_15555 + 1;
              i_15555 = G__15556;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)))
        }else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)))
        }
      }else {
        return null
      }
    }, null, null)
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if(s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)))
      }else {
        return null
      }
    }, null, null)
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if(s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)))
      }else {
        return null
      }
    }, null, null)
  };
  var map__5 = function() {
    var G__15557__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if(cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)))
          }else {
            return null
          }
        }, null, null)
      };
      return map.call(null, function(p1__15553_SHARP_) {
        return cljs.core.apply.call(null, f, p1__15553_SHARP_)
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)))
    };
    var G__15557 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if(arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__15557__delegate.call(this, f, c1, c2, c3, colls)
    };
    G__15557.cljs$lang$maxFixedArity = 4;
    G__15557.cljs$lang$applyTo = function(arglist__15558) {
      var f = cljs.core.first(arglist__15558);
      arglist__15558 = cljs.core.next(arglist__15558);
      var c1 = cljs.core.first(arglist__15558);
      arglist__15558 = cljs.core.next(arglist__15558);
      var c2 = cljs.core.first(arglist__15558);
      arglist__15558 = cljs.core.next(arglist__15558);
      var c3 = cljs.core.first(arglist__15558);
      var colls = cljs.core.rest(arglist__15558);
      return G__15557__delegate(f, c1, c2, c3, colls)
    };
    G__15557.cljs$core$IFn$_invoke$arity$variadic = G__15557__delegate;
    return G__15557
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if(n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)))
      }else {
        return null
      }
    }else {
      return null
    }
  }, null, null)
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while(true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if(n__$1 > 0 && s) {
        var G__15559 = n__$1 - 1;
        var G__15560 = cljs.core.rest.call(null, s);
        n__$1 = G__15559;
        coll__$1 = G__15560;
        continue
      }else {
        return s
      }
      break
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll)
  }, null, null)
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s)
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x
    }, s, cljs.core.drop.call(null, n, s))
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while(true) {
    if(lead) {
      var G__15561 = cljs.core.next.call(null, s);
      var G__15562 = cljs.core.next.call(null, lead);
      s = G__15561;
      lead = G__15562;
      continue
    }else {
      return s
    }
    break
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while(true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if(cljs.core.truth_(function() {
        var and__3474__auto__ = s;
        if(and__3474__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s))
        }else {
          return and__3474__auto__
        }
      }())) {
        var G__15563 = pred__$1;
        var G__15564 = cljs.core.rest.call(null, s);
        pred__$1 = G__15563;
        coll__$1 = G__15564;
        continue
      }else {
        return s
      }
      break
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll)
  }, null, null)
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s))
    }else {
      return null
    }
  }, null, null)
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null)
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x))
    }, null, null)
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x))
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x))
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f))
    }, null, null)
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f))
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x))
  }, null, null))
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if(s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))))
      }else {
        return null
      }
    }, null, null)
  };
  var interleave__3 = function() {
    var G__15565__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if(cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)))
        }else {
          return null
        }
      }, null, null)
    };
    var G__15565 = function(c1, c2, var_args) {
      var colls = null;
      if(arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15565__delegate.call(this, c1, c2, colls)
    };
    G__15565.cljs$lang$maxFixedArity = 2;
    G__15565.cljs$lang$applyTo = function(arglist__15566) {
      var c1 = cljs.core.first(arglist__15566);
      arglist__15566 = cljs.core.next(arglist__15566);
      var c2 = cljs.core.first(arglist__15566);
      var colls = cljs.core.rest(arglist__15566);
      return G__15565__delegate(c1, c2, colls)
    };
    G__15565.cljs$core$IFn$_invoke$arity$variadic = G__15565__delegate;
    return G__15565
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll))
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1))
      }else {
        if(cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1))
        }else {
          return null
        }
      }
    }, null, null)
  };
  return cat.call(null, null, colls)
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll))
  };
  var mapcat__3 = function() {
    var G__15567__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls))
    };
    var G__15567 = function(f, coll, var_args) {
      var colls = null;
      if(arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__15567__delegate.call(this, f, coll, colls)
    };
    G__15567.cljs$lang$maxFixedArity = 2;
    G__15567.cljs$lang$applyTo = function(arglist__15568) {
      var f = cljs.core.first(arglist__15568);
      arglist__15568 = cljs.core.next(arglist__15568);
      var coll = cljs.core.first(arglist__15568);
      var colls = cljs.core.rest(arglist__15568);
      return G__15567__delegate(f, coll, colls)
    };
    G__15567.cljs$core$IFn$_invoke$arity$variadic = G__15567__delegate;
    return G__15567
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4299__auto___15569 = size;
        var i_15570 = 0;
        while(true) {
          if(i_15570 < n__4299__auto___15569) {
            if(cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_15570)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_15570))
            }else {
            }
            var G__15571 = i_15570 + 1;
            i_15570 = G__15571;
            continue
          }else {
          }
          break
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)))
      }else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if(cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r))
        }else {
          return filter.call(null, pred, r)
        }
      }
    }else {
      return null
    }
  }, null, null)
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll)
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null)
    }, null, null)
  };
  return walk.call(null, root)
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__15572_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__15572_SHARP_)
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)))
};
cljs.core.into = function into(to, from) {
  if(!(to == null)) {
    if(function() {
      var G__15574 = to;
      if(G__15574) {
        var bit__4095__auto__ = G__15574.cljs$lang$protocol_mask$partition1$ & 4;
        if(bit__4095__auto__ || G__15574.cljs$core$IEditableCollection$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from))
    }else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from)
    }
  }else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from)
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o))
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll))
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2))
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3))
  };
  var mapv__5 = function() {
    var G__15575__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls))
    };
    var G__15575 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if(arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__15575__delegate.call(this, f, c1, c2, c3, colls)
    };
    G__15575.cljs$lang$maxFixedArity = 4;
    G__15575.cljs$lang$applyTo = function(arglist__15576) {
      var f = cljs.core.first(arglist__15576);
      arglist__15576 = cljs.core.next(arglist__15576);
      var c1 = cljs.core.first(arglist__15576);
      arglist__15576 = cljs.core.next(arglist__15576);
      var c2 = cljs.core.first(arglist__15576);
      arglist__15576 = cljs.core.next(arglist__15576);
      var c3 = cljs.core.first(arglist__15576);
      var colls = cljs.core.rest(arglist__15576);
      return G__15575__delegate(f, c1, c2, c3, colls)
    };
    G__15575.cljs$core$IFn$_invoke$arity$variadic = G__15575__delegate;
    return G__15575
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if(cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o)
    }else {
      return v
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll))
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll)
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if(n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)))
        }else {
          return null
        }
      }else {
        return null
      }
    }, null, null)
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if(n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)))
        }else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)))
        }
      }else {
        return null
      }
    }, null, null)
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null)
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while(true) {
      if(ks__$1) {
        if(!function() {
          var G__15578 = m__$1;
          if(G__15578) {
            var bit__4102__auto__ = G__15578.cljs$lang$protocol_mask$partition0$ & 256;
            if(bit__4102__auto__ || G__15578.cljs$core$ILookup$) {
              return true
            }else {
              if(!G__15578.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__15578)
              }else {
                return false
              }
            }
          }else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__15578)
          }
        }()) {
          return not_found
        }else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if(sentinel === m__$2) {
            return not_found
          }else {
            var G__15579 = sentinel;
            var G__15580 = m__$2;
            var G__15581 = cljs.core.next.call(null, ks__$1);
            sentinel = G__15579;
            m__$1 = G__15580;
            ks__$1 = G__15581;
            continue
          }
        }
      }else {
        return m__$1
      }
      break
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in
}();
cljs.core.assoc_in = function assoc_in(m, p__15582, v) {
  var vec__15584 = p__15582;
  var k = cljs.core.nth.call(null, vec__15584, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__15584, 1);
  if(cljs.core.truth_(ks)) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v))
  }else {
    return cljs.core.assoc.call(null, m, k, v)
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__15585, f) {
    var vec__15595 = p__15585;
    var k = cljs.core.nth.call(null, vec__15595, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__15595, 1);
    if(cljs.core.truth_(ks)) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f))
    }else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)))
    }
  };
  var update_in__4 = function(m, p__15586, f, a) {
    var vec__15596 = p__15586;
    var k = cljs.core.nth.call(null, vec__15596, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__15596, 1);
    if(cljs.core.truth_(ks)) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a))
    }else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a))
    }
  };
  var update_in__5 = function(m, p__15587, f, a, b) {
    var vec__15597 = p__15587;
    var k = cljs.core.nth.call(null, vec__15597, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__15597, 1);
    if(cljs.core.truth_(ks)) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b))
    }else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b))
    }
  };
  var update_in__6 = function(m, p__15588, f, a, b, c) {
    var vec__15598 = p__15588;
    var k = cljs.core.nth.call(null, vec__15598, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__15598, 1);
    if(cljs.core.truth_(ks)) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c))
    }else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c))
    }
  };
  var update_in__7 = function() {
    var G__15600__delegate = function(m, p__15589, f, a, b, c, args) {
      var vec__15599 = p__15589;
      var k = cljs.core.nth.call(null, vec__15599, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__15599, 1);
      if(cljs.core.truth_(ks)) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args))
      }else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args))
      }
    };
    var G__15600 = function(m, p__15589, f, a, b, c, var_args) {
      var args = null;
      if(arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0)
      }
      return G__15600__delegate.call(this, m, p__15589, f, a, b, c, args)
    };
    G__15600.cljs$lang$maxFixedArity = 6;
    G__15600.cljs$lang$applyTo = function(arglist__15601) {
      var m = cljs.core.first(arglist__15601);
      arglist__15601 = cljs.core.next(arglist__15601);
      var p__15589 = cljs.core.first(arglist__15601);
      arglist__15601 = cljs.core.next(arglist__15601);
      var f = cljs.core.first(arglist__15601);
      arglist__15601 = cljs.core.next(arglist__15601);
      var a = cljs.core.first(arglist__15601);
      arglist__15601 = cljs.core.next(arglist__15601);
      var b = cljs.core.first(arglist__15601);
      arglist__15601 = cljs.core.next(arglist__15601);
      var c = cljs.core.first(arglist__15601);
      var args = cljs.core.rest(arglist__15601);
      return G__15600__delegate(m, p__15589, f, a, b, c, args)
    };
    G__15600.cljs$core$IFn$_invoke$arity$variadic = G__15600__delegate;
    return G__15600
  }();
  update_in = function(m, p__15589, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__15589, f);
      case 4:
        return update_in__4.call(this, m, p__15589, f, a);
      case 5:
        return update_in__5.call(this, m, p__15589, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__15589, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__15589, f, a, b, c, cljs.core.array_seq(arguments, 6))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4023__auto__, writer__4024__auto__, opts__4025__auto__) {
  return cljs.core._write.call(null, writer__4024__auto__, "cljs.core/VectorNode")
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr)
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, new Array(32))
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx]
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr))
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if(cnt < 32) {
    return 0
  }else {
    return cnt - 1 >>> 5 << 5
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while(true) {
    if(ll === 0) {
      return ret
    }else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__15602 = ll - 5;
      var G__15603 = r;
      ll = G__15602;
      ret = G__15603;
      continue
    }
    break
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if(5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret
  }else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if(!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret
    }else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if(0 <= i && i < pv.cnt) {
    if(i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail
    }else {
      var node = pv.root;
      var level = pv.shift;
      while(true) {
        if(level > 0) {
          var G__15604 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__15605 = level - 5;
          node = G__15604;
          level = G__15605;
          continue
        }else {
          return node.arr
        }
        break
      }
    }
  }else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt)
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if(level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret
  }else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if(level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if(new_child == null && subidx === 0) {
      return null
    }else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret
    }
  }else {
    if(subidx === 0) {
      return null
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 167668511
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/PersistentVector")
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail))
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null)
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found)
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if(0 <= k && k < self__.cnt) {
    if(cljs.core.tail_off.call(null, coll__$1) <= k) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[k & 31] = v;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null)
    }else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, k, v), self__.tail, null)
    }
  }else {
    if(k === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, v)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(k), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__15607 = null;
  var G__15607__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k)
  };
  var G__15607__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found)
  };
  G__15607 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15607__2.call(this, self__, k);
      case 3:
        return G__15607__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15607
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args15606) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15606)))
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k)
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found)
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while(true) {
    if(i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while(true) {
          if(j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2
            }else {
              var G__15608 = j + 1;
              var G__15609 = init__$2;
              j = G__15608;
              init__$1 = G__15609;
              continue
            }
          }else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1
          }
          break
        }
      }();
      if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1)
      }else {
        var G__15610 = i + step_init[0];
        i = G__15610;
        continue
      }
    }else {
      return step_init[1]
    }
    break
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4299__auto___15611 = len;
    var i_15612 = 0;
    while(true) {
      if(i_15612 < n__4299__auto___15611) {
        new_tail[i_15612] = self__.tail[i_15612];
        var G__15613 = i_15612 + 1;
        i_15612 = G__15613;
        continue
      }else {
      }
      break
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null)
  }else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null)
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null)
  }else {
    return null
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0)
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1)
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f)
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start)
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt === 0) {
    return null
  }else {
    if(self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1)
  }else {
    return null
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  }else {
    if(1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
    }else {
      if(1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if(5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null)
          }else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null)
          }
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val)
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash)
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31]
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n)
  }else {
    return not_found
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash)
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, new Array(32));
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if(l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null)
  }else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while(true) {
      if(i < l) {
        var G__15614 = i + 1;
        var G__15615 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__15614;
        out = G__15615;
        continue
      }else {
        return cljs.core.persistent_BANG_.call(null, out)
      }
      break
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll))
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if(args instanceof cljs.core.IndexedSeq) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true)
    }else {
      return cljs.core.vec.call(null, args)
    }
  };
  var vector = function(var_args) {
    var args = null;
    if(arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return vector__delegate.call(this, args)
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__15616) {
    var args = cljs.core.seq(arglist__15616);
    return vector__delegate(args)
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/ChunkedSeq")
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if(s == null) {
      return null
    }else {
      return s
    }
  }else {
    return cljs.core._chunked_next.call(null, coll__$1)
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start)
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off]
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if(s == null) {
      return cljs.core.List.EMPTY
    }else {
      return s
    }
  }else {
    return cljs.core._chunked_rest.call(null, coll__$1)
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if(s == null) {
    return null
  }else {
    return s
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if(s == null) {
    return cljs.core.List.EMPTY
  }else {
    return s
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash)
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null)
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null)
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null)
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32400159
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/Subvec")
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null)
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found)
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + key;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3788__auto__ = self__.end;
    var y__3789__auto__ = v_pos + 1;
    return x__3788__auto__ > y__3789__auto__ ? x__3788__auto__ : y__3789__auto__
  }(), null)
};
cljs.core.Subvec.prototype.call = function() {
  var G__15618 = null;
  var G__15618__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k)
  };
  var G__15618__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found)
  };
  G__15618 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15618__2.call(this, self__, k);
      case 3:
        return G__15618__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15618
}();
cljs.core.Subvec.prototype.apply = function(self__, args15617) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15617)))
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k)
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found)
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null)
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f)
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1)
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if(i === self__.end) {
      return null
    }else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1)
      }, null, null))
    }
  };
  return subvec_seq.call(null, self__.start)
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1)
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  }else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null)
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val)
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash)
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if(n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start)
  }else {
    return cljs.core._nth.call(null, self__.v, self__.start + n)
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(n < 0 || self__.end <= self__.start + n) {
    return not_found
  }else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found)
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash)
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while(true) {
    if(v instanceof cljs.core.Subvec) {
      var G__15619 = meta;
      var G__15620 = v.v;
      var G__15621 = v.start + start;
      var G__15622 = v.start + end;
      var G__15623 = __hash;
      meta = G__15619;
      v = G__15620;
      start = G__15621;
      end = G__15622;
      __hash = G__15623;
      continue
    }else {
      var c = cljs.core.count.call(null, v);
      if(start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      }else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash)
    }
    break
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v))
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null)
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if(edit === node.edit) {
    return node
  }else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr))
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj15627 = {};
    return obj15627
  }(), cljs.core.aclone.call(null, node.arr))
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = new Array(32);
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if(!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node)
    }else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node)
    }
  }());
  return ret
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if(level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if(new_child == null && subidx === 0) {
      return null
    }else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1
    }
  }else {
    if(subidx === 0) {
      return null
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1
      }else {
        return null
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if(0 <= i && i < tv.cnt) {
    if(i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail
    }else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while(true) {
        if(level > 0) {
          var G__15628 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__15629 = level - 5;
          node = G__15628;
          level = G__15629;
          continue
        }else {
          return node.arr
        }
        break
      }
    }
  }else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/TransientVector")
};
cljs.core.TransientVector.prototype.call = function() {
  var G__15631 = null;
  var G__15631__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__15631__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__15631 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15631__2.call(this, self__, k);
      case 3:
        return G__15631__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15631
}();
cljs.core.TransientVector.prototype.apply = function(self__, args15630) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15630)))
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null)
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found)
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31]
  }else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n)
  }else {
    return not_found
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.root.edit) {
    return self__.cnt
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if(self__.root.edit) {
    if(0 <= n && n < self__.cnt) {
      if(cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1
      }else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if(level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1
          }else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1
      }
    }else {
      if(n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        }else {
          return null
        }
      }
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if(self__.root.edit) {
    if(self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    }else {
      if(1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1
      }else {
        if((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if(!(nr == null)) {
                return nr
              }else {
                return new cljs.core.VectorNode(self__.root.edit, new Array(32))
              }
            }();
            if(5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1
            }else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1
            }
          }else {
            return null
          }
        }
      }
    }
  }else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val)
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if(self__.root.edit) {
    if(self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1
    }else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = new Array(32);
      new_tail[0] = o;
      self__.tail = new_tail;
      if(self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = new Array(32);
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1
      }else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1
      }
    }
  }else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if(self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail)
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/PersistentQueueSeq")
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if(temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null)
  }else {
    if(self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1)
    }else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null)
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash)
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31858766
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/PersistentQueue")
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3483__auto__ = self__.rear;
      if(cljs.core.truth_(or__3483__auto__)) {
        return or__3483__auto__
      }else {
        return cljs.core.PersistentVector.EMPTY
      }
    }(), o), null)
  }else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null)
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if(cljs.core.truth_(function() {
    var or__3483__auto__ = self__.front;
    if(cljs.core.truth_(or__3483__auto__)) {
      return or__3483__auto__
    }else {
      return rear__$1
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null)
  }else {
    return null
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front)
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if(temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null)
    }else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null)
    }
  }else {
    return coll__$1
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front)
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1))
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash)
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash)
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/NeverEquiv")
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv))
  }, x)) : null : null)
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while(true) {
    if(i < len) {
      if(k === array[i]) {
        return i
      }else {
        var G__15632 = i + incr;
        i = G__15632;
        continue
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if(a__$1 < b__$1) {
    return-1
  }else {
    if(a__$1 > b__$1) {
      return 1
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0
      }else {
        return null
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while(true) {
    if(i < len) {
      var k__$1 = ks[i];
      var G__15633 = i + 1;
      var G__15634 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__15633;
      out = G__15634;
      continue
    }else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm)
    }
    break
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj15638 = {};
    return obj15638
  }();
  var l = ks.length;
  var i_15639 = 0;
  while(true) {
    if(i_15639 < l) {
      var k_15640 = ks[i_15639];
      new_obj[k_15640] = obj[k_15640];
      var G__15641 = i_15639 + 1;
      i_15639 = G__15641;
      continue
    }else {
    }
    break
  }
  return new_obj
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/ObjMap")
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1))
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null)
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k]
  }else {
    return not_found
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if(goog.isString(k)) {
    if(self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v)
    }else {
      if(!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null)
      }else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null)
      }
    }
  }else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v)
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if(goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true
  }else {
    return false
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__15644 = null;
  var G__15644__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__15644__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__15644 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15644__2.call(this, self__, k);
      case 3:
        return G__15644__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15644
}();
cljs.core.ObjMap.prototype.apply = function(self__, args15643) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15643)))
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while(true) {
    if(cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__15645 = cljs.core.rest.call(null, keys__$1);
        var G__15646 = init__$2;
        keys__$1 = G__15645;
        init__$1 = G__15646;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry)
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__15642_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__15642_SHARP_, self__.strobj[p1__15642_SHARP_]], null)
    }, self__.keys.sort(cljs.core.obj_map_compare_keys))
  }else {
    return null
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other)
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash)
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta)
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if(goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null)
  }else {
    return coll__$1
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash)
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj15648 = {};
  return obj15648
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null)
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(arr[i] == null) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15649 = i + 2;
          i = G__15649;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn
      }()) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15650 = i + 2;
          i = G__15650;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str
      }()) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15651 = i + 2;
          i = G__15651;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(k === arr[i]) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15652 = i + 2;
          i = G__15652;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(cljs.core._EQ_.call(null, k, arr[i])) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15653 = i + 2;
          i = G__15653;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if(k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k)
  }else {
    if(goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k)
    }else {
      if(k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k)
      }else {
        if(k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k)
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k)
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_15654 = 0;
  while(true) {
    if(i_15654 < l) {
      narr[i_15654] = arr[i_15654];
      var G__15655 = i_15654 + 1;
      i_15654 = G__15655;
      continue
    }else {
    }
    break
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/PersistentArrayMapSeq")
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta)
  }else {
    return null
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta)
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta)
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if(i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta)
  }else {
    return null
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/PersistentArrayMap")
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj15658 = {};
    return obj15658
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr))
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if(idx === -1) {
    return not_found
  }else {
    return self__.arr[idx + 1]
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if(idx === -1) {
    if(self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null)
    }else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta)
    }
  }else {
    if(v === self__.arr[idx + 1]) {
      return coll__$1
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__15659 = cljs.core.aclone.call(null, self__.arr);
          G__15659[idx + 1] = v;
          return G__15659
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1)
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__15660 = null;
  var G__15660__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__15660__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__15660 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15660__2.call(this, self__, k);
      case 3:
        return G__15660__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15660
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args15656) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15656)))
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__15661 = i + 2;
        var G__15662 = init__$2;
        i = G__15661;
        init__$1 = G__15662;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry)
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if(idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if(new_len === 0) {
      return cljs.core._empty.call(null, coll__$1)
    }else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while(true) {
        if(s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null)
        }else {
          if(cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__15663 = s + 2;
            var G__15664 = d;
            s = G__15663;
            d = G__15664;
            continue
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__15665 = s + 2;
              var G__15666 = d + 2;
              s = G__15665;
              d = G__15666;
              continue
            }else {
              return null
            }
          }
        }
        break
      }
    }
  }else {
    return coll__$1
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash)
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if(no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null)
  }else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while(true) {
      if(i < len) {
        var G__15667 = i + 2;
        var G__15668 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__15667;
        ret = G__15668;
        continue
      }else {
        return cljs.core._persistent_BANG_.call(null, ret)
      }
      break
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/TransientArrayMap")
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if(idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__15669_15671 = self__.arr;
      G__15669_15671.pop();
      G__15669_15671.pop();
      self__.len = self__.len - 2
    }else {
    }
    return tcoll__$1
  }else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if(idx === -1) {
      if(self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1
      }else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val)
      }
    }else {
      if(val === self__.arr[idx + 1]) {
        return tcoll__$1
      }else {
        self__.arr[idx + 1] = val;
        return tcoll__$1
      }
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    if(function() {
      var G__15670 = o;
      if(G__15670) {
        var bit__4102__auto__ = G__15670.cljs$lang$protocol_mask$partition0$ & 2048;
        if(bit__4102__auto__ || G__15670.cljs$core$IMapEntry$) {
          return true
        }else {
          if(!G__15670.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__15670)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__15670)
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o))
    }else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while(true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if(cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__15672 = cljs.core.next.call(null, es);
          var G__15673 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__15672;
          tcoll__$2 = G__15673;
          continue
        }else {
          return tcoll__$2
        }
        break
      }
    }
  }else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null)
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if(idx === -1) {
      return not_found
    }else {
      return self__.arr[idx + 1]
    }
  }else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2)
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr)
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while(true) {
    if(i < len) {
      var G__15674 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__15675 = i + 2;
      out = G__15674;
      i = G__15675;
      continue
    }else {
      return out
    }
    break
  }
};
cljs.core.Box = function(val) {
  this.val = val
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4023__auto__, writer__4024__auto__, opts__4025__auto__) {
  return cljs.core._write.call(null, writer__4024__auto__, "cljs.core/Box")
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val)
};
cljs.core.key_test = function key_test(key, other) {
  if(key === other) {
    return true
  }else {
    if(cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other)
      }else {
        return null
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__15678 = cljs.core.aclone.call(null, arr);
    G__15678[i] = a;
    return G__15678
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__15679 = cljs.core.aclone.call(null, arr);
    G__15679[i] = a;
    G__15679[j] = b;
    return G__15679
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1)
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31)
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if(!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1])
        }else {
          var node = arr[i + 1];
          if(!(node == null)) {
            return node.kv_reduce(f, init__$1)
          }else {
            return init__$1
          }
        }
      }();
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__15680 = i + 2;
        var G__15681 = init__$2;
        i = G__15680;
        init__$1 = G__15681;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/BitmapIndexedNode")
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if(self__.bitmap === bit) {
    return null
  }else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if(2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable
    }else {
      if(n >= 16) {
        var nodes = new Array(32);
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_15682 = 0;
        var j_15683 = 0;
        while(true) {
          if(i_15682 < 32) {
            if((self__.bitmap >>> i_15682 & 1) === 0) {
              var G__15684 = i_15682 + 1;
              var G__15685 = j_15683;
              i_15682 = G__15684;
              j_15683 = G__15685;
              continue
            }else {
              nodes[i_15682] = !(self__.arr[j_15683] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_15683]), self__.arr[j_15683], self__.arr[j_15683 + 1], added_leaf_QMARK_) : self__.arr[j_15683 + 1];
              var G__15686 = i_15682 + 1;
              var G__15687 = j_15683 + 2;
              i_15682 = G__15686;
              j_15683 = G__15687;
              continue
            }
          }else {
          }
          break
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable
        }else {
          return null
        }
      }
    }
  }else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n)
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        if(val === val_or_node) {
          return inode
        }else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val)
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val))
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr)
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return inode
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        if(!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n)
        }else {
          if(self__.bitmap === bit) {
            return null
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx)
            }else {
              return null
            }
          }
        }
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr)
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init)
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return not_found
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found)
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return inode
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if(n === val_or_node) {
        return inode
      }else {
        if(!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n))
        }else {
          if(self__.bitmap === bit) {
            return null
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx))
            }else {
              return null
            }
          }
        }
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx))
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if(n >= 16) {
      var nodes = new Array(32);
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_15688 = 0;
      var j_15689 = 0;
      while(true) {
        if(i_15688 < 32) {
          if((self__.bitmap >>> i_15688 & 1) === 0) {
            var G__15690 = i_15688 + 1;
            var G__15691 = j_15689;
            i_15688 = G__15690;
            j_15689 = G__15691;
            continue
          }else {
            nodes[i_15688] = !(self__.arr[j_15689] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_15689]), self__.arr[j_15689], self__.arr[j_15689 + 1], added_leaf_QMARK_) : self__.arr[j_15689 + 1];
            var G__15692 = i_15688 + 1;
            var G__15693 = j_15689 + 2;
            i_15688 = G__15692;
            j_15689 = G__15693;
            continue
          }
        }else {
        }
        break
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes)
    }else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr)
    }
  }else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n))
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        if(val === val_or_node) {
          return inode
        }else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val))
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)))
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return not_found
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found)
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr)
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, new Array(0));
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while(true) {
    if(i < len) {
      if(!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__15694 = i + 1;
        var G__15695 = j + 2;
        var G__15696 = bitmap | 1 << i;
        i = G__15694;
        j = G__15695;
        bitmap = G__15696;
        continue
      }else {
        var G__15697 = i + 1;
        var G__15698 = j;
        var G__15699 = bitmap;
        i = G__15697;
        j = G__15698;
        bitmap = G__15699;
        continue
      }
    }else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr)
    }
    break
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/ArrayNode")
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable
  }else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n)
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr)
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    return inode
  }else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      if(n == null) {
        if(self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx)
        }else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n)
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr))
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var node = self__.arr[i];
      if(!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2)
        }else {
          var G__15700 = i + 1;
          var G__15701 = init__$2;
          i = G__15700;
          init__$1 = G__15701;
          continue
        }
      }else {
        var G__15702 = i + 1;
        var G__15703 = init__$1;
        i = G__15702;
        init__$1 = G__15703;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found)
  }else {
    return not_found
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if(n === node) {
      return inode
    }else {
      if(n == null) {
        if(self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx)
        }else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
        }else {
          return null
        }
      }
    }
  }else {
    return inode
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)))
  }else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found)
  }else {
    return not_found
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr)
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while(true) {
    if(i < lim) {
      if(cljs.core.key_test.call(null, key, arr[i])) {
        return i
      }else {
        var G__15704 = i + 2;
        i = G__15704;
        continue
      }
    }else {
      return-1
    }
    break
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/HashCollisionNode")
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if(hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if(idx === -1) {
      if(self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable
      }else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr)
      }
    }else {
      if(self__.arr[idx + 1] === val) {
        return inode
      }else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val)
      }
    }
  }else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_)
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr)
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx === -1) {
    return inode
  }else {
    removed_leaf_QMARK_[0] = true;
    if(self__.cnt === 1) {
      return null
    }else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr)
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init)
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx < 0) {
    return not_found
  }else {
    if(cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx === -1) {
    return inode
  }else {
    if(self__.cnt === 1) {
      return null
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)))
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if(hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if(idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr)
    }else {
      if(cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode
      }else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val))
      }
    }
  }else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_)
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx < 0) {
    return not_found
  }else {
    if(cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1]
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode
  }else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array)
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr)
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if(key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2])
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_)
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if(key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2])
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_)
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/NodeSeq")
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null)
  }else {
    return cljs.core.first.call(null, self__.s)
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null)
  }else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s))
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash)
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash)
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null)
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if(s == null) {
      var len = nodes.length;
      var j = i;
      while(true) {
        if(j < len) {
          if(!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null)
          }else {
            var temp__4090__auto__ = nodes[j + 1];
            if(cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if(cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null)
              }else {
                var G__15705 = j + 2;
                j = G__15705;
                continue
              }
            }else {
              var G__15706 = j + 2;
              j = G__15706;
              continue
            }
          }
        }else {
          return null
        }
        break
      }
    }else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null)
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/ArrayNodeSeq")
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s))
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash)
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null)
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if(s == null) {
      var len = nodes.length;
      var j = i;
      while(true) {
        if(j < len) {
          var temp__4090__auto__ = nodes[j];
          if(cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if(cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null)
            }else {
              var G__15707 = j + 1;
              j = G__15707;
              continue
            }
          }else {
            var G__15708 = j + 1;
            j = G__15708;
            continue
          }
        }else {
          return null
        }
        break
      }
    }else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null)
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/PersistentHashMap")
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj15711 = {};
    return obj15711
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null)
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return not_found
    }
  }else {
    if(self__.root == null) {
      return not_found
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if(k == null) {
    if(self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1
    }else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null)
    }
  }else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if(new_root === self__.root) {
      return coll__$1
    }else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null)
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if(k == null) {
    return self__.has_nil_QMARK_
  }else {
    if(self__.root == null) {
      return false
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__15712 = null;
  var G__15712__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__15712__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__15712 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15712__2.call(this, self__, k);
      case 3:
        return G__15712__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15712
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args15709) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15709)))
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1)
  }else {
    if(!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry)
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if(self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s)
    }else {
      return s
    }
  }else {
    return null
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null)
    }else {
      return coll__$1
    }
  }else {
    if(self__.root == null) {
      return coll__$1
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if(new_root === self__.root) {
          return coll__$1
        }else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null)
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash)
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while(true) {
    if(i < len) {
      var G__15713 = i + 1;
      var G__15714 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__15713;
      out = G__15714;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, out)
    }
    break
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/TransientHashMap")
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_()
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return null
    }
  }else {
    if(self__.root == null) {
      return null
    }else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k)
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return not_found
    }
  }else {
    if(self__.root == null) {
      return not_found
    }else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found)
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.edit) {
    return self__.count
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(function() {
      var G__15715 = o;
      if(G__15715) {
        var bit__4102__auto__ = G__15715.cljs$lang$protocol_mask$partition0$ & 2048;
        if(bit__4102__auto__ || G__15715.cljs$core$IMapEntry$) {
          return true
        }else {
          if(!G__15715.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__15715)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__15715)
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o))
    }else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while(true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if(cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__15716 = cljs.core.next.call(null, es);
          var G__15717 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__15716;
          tcoll__$1 = G__15717;
          continue
        }else {
          return tcoll__$1
        }
        break
      }
    }
  }else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(k == null) {
      if(self__.nil_val === v) {
      }else {
        self__.nil_val = v
      }
      if(self__.has_nil_QMARK_) {
      }else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true
      }
      return tcoll
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if(node === self__.root) {
      }else {
        self__.root = node
      }
      if(added_leaf_QMARK_.val) {
        self__.count = self__.count + 1
      }else {
      }
      return tcoll
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(k == null) {
      if(self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll
      }else {
        return tcoll
      }
    }else {
      if(self__.root == null) {
        return tcoll
      }else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if(node === self__.root) {
        }else {
          self__.root = node
        }
        if(cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1
        }else {
        }
        return tcoll
      }
    }
  }else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val)
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while(true) {
    if(!(t == null)) {
      var G__15718 = ascending_QMARK_ ? t.left : t.right;
      var G__15719 = cljs.core.conj.call(null, stack__$1, t);
      t = G__15718;
      stack__$1 = G__15719;
      continue
    }else {
      return stack__$1
    }
    break
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/PersistentTreeMapSeq")
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1
  }else {
    return self__.cnt
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if(!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash)
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null)
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if(ins instanceof cljs.core.RedNode) {
    if(ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null)
    }else {
      if(ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null)
        }else {
          return null
        }
      }
    }
  }else {
    return new cljs.core.BlackNode(key, val, ins, right, null)
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if(ins instanceof cljs.core.RedNode) {
    if(ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null)
    }else {
      if(ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null)
        }else {
          return null
        }
      }
    }
  }else {
    return new cljs.core.BlackNode(key, val, left, ins, null)
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if(del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null)
  }else {
    if(right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden())
    }else {
      if(right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if(del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null)
  }else {
    if(left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del)
    }else {
      if(left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1)
  }else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2)
    }else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if(cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3)
      }else {
        return init__$3
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/BlackNode")
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null)
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found)
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v)
};
cljs.core.BlackNode.prototype.call = function() {
  var G__15721 = null;
  var G__15721__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__15721__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__15721 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15721__2.call(this, self__, k);
      case 3:
        return G__15721__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15721
}();
cljs.core.BlackNode.prototype.apply = function(self__, args15720) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15720)))
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null)
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node)
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null)
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del)
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null)
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init)
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right)
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node)
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null)
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null)
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f)
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start)
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key)
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null)
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._assoc_n.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), n, v)
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta)
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null
      }else {
        return null
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash)
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/RedNode")
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null)
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found)
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v)
};
cljs.core.RedNode.prototype.call = function() {
  var G__15723 = null;
  var G__15723__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__15723__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__15723 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15723__2.call(this, self__, k);
      case 3:
        return G__15723__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15723
}();
cljs.core.RedNode.prototype.apply = function(self__, args15722) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15722)))
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null)
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null)
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null)
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null)
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init)
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null)
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null)
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if(self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null)
  }else {
    if(self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if(self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null)
  }else {
    if(self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null)
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f)
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start)
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key)
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null)
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._assoc_n.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), n, v)
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta)
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash)
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if(tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null)
  }else {
    var c = comp.call(null, k, tree.key);
    if(c === 0) {
      found[0] = tree;
      return null
    }else {
      if(c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if(!(ins == null)) {
          return tree.add_left(ins)
        }else {
          return null
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if(!(ins == null)) {
            return tree.add_right(ins)
          }else {
            return null
          }
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if(left == null) {
    return right
  }else {
    if(right == null) {
      return left
    }else {
      if(left instanceof cljs.core.RedNode) {
        if(right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if(app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null)
          }else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null)
          }
        }else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null)
        }
      }else {
        if(right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null)
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if(app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null)
            }else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null))
            }
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if(!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if(c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right)
    }else {
      if(c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if(!(del == null) || !(found[0] == null)) {
          if(tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right)
          }else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null)
          }
        }else {
          return null
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if(!(del == null) || !(found[0] == null)) {
            if(tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del)
            }else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null)
            }
          }else {
            return null
          }
        }else {
          return null
        }
      }
    }
  }else {
    return null
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if(c === 0) {
    return tree.replace(tk, v, tree.left, tree.right)
  }else {
    if(c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v))
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 418776847
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/PersistentTreeMap")
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if(!(n == null)) {
    return n.val
  }else {
    return not_found
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if(t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if(cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1
    }else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null)
    }
  }else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null)
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null)
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__15725 = null;
  var G__15725__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__15725__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__15725 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15725__2.call(this, self__, k);
      case 3:
        return G__15725__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15725
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args15724) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15724)))
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if(!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init)
  }else {
    return init
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry)
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while(true) {
    if(!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if(c === 0) {
        return t
      }else {
        if(c < 0) {
          var G__15726 = t.left;
          t = G__15726;
          continue
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__15727 = t.right;
            t = G__15727;
            continue
          }else {
            return null
          }
        }
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while(true) {
      if(!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if(c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null)
        }else {
          if(cljs.core.truth_(ascending_QMARK_)) {
            if(c < 0) {
              var G__15728 = cljs.core.conj.call(null, stack, t);
              var G__15729 = t.left;
              stack = G__15728;
              t = G__15729;
              continue
            }else {
              var G__15730 = stack;
              var G__15731 = t.right;
              stack = G__15730;
              t = G__15731;
              continue
            }
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if(c > 0) {
                var G__15732 = cljs.core.conj.call(null, stack, t);
                var G__15733 = t.right;
                stack = G__15732;
                t = G__15733;
                continue
              }else {
                var G__15734 = stack;
                var G__15735 = t.left;
                stack = G__15734;
                t = G__15735;
                continue
              }
            }else {
              return null
            }
          }
        }
      }else {
        if(stack == null) {
          return null
        }else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null)
        }
      }
      break
    }
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if(t == null) {
    if(cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1
    }else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null)
    }
  }else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null)
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash)
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while(true) {
      if(in$) {
        var G__15736 = cljs.core.nnext.call(null, in$);
        var G__15737 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__15736;
        out = G__15737;
        continue
      }else {
        return cljs.core.persistent_BANG_.call(null, out)
      }
      break
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if(arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return hash_map__delegate.call(this, keyvals)
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__15738) {
    var keyvals = cljs.core.seq(arglist__15738);
    return hash_map__delegate(keyvals)
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null)
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if(arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return array_map__delegate.call(this, keyvals)
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__15739) {
    var keyvals = cljs.core.seq(arglist__15739);
    return array_map__delegate(keyvals)
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj15743 = {};
      return obj15743
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while(true) {
      if(kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__15744 = cljs.core.nnext.call(null, kvs);
        kvs = G__15744;
        continue
      }else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj)
      }
      break
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if(arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return obj_map__delegate.call(this, keyvals)
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__15745) {
    var keyvals = cljs.core.seq(arglist__15745);
    return obj_map__delegate(keyvals)
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while(true) {
      if(in$) {
        var G__15746 = cljs.core.nnext.call(null, in$);
        var G__15747 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__15746;
        out = G__15747;
        continue
      }else {
        return out
      }
      break
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if(arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return sorted_map__delegate.call(this, keyvals)
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__15748) {
    var keyvals = cljs.core.seq(arglist__15748);
    return sorted_map__delegate(keyvals)
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while(true) {
      if(in$) {
        var G__15749 = cljs.core.nnext.call(null, in$);
        var G__15750 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__15749;
        out = G__15750;
        continue
      }else {
        return out
      }
      break
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if(arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals)
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__15751) {
    var comparator = cljs.core.first(arglist__15751);
    var keyvals = cljs.core.rest(arglist__15751);
    return sorted_map_by__delegate(comparator, keyvals)
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/KeySeq")
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1)
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__15752 = self__.mseq;
    if(G__15752) {
      var bit__4102__auto__ = G__15752.cljs$lang$protocol_mask$partition0$ & 128;
      if(bit__4102__auto__ || G__15752.cljs$core$INext$) {
        return true
      }else {
        if(!G__15752.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15752)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15752)
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if(nseq == null) {
    return null
  }else {
    return new cljs.core.KeySeq(nseq, self__._meta)
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me)
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__15753 = self__.mseq;
    if(G__15753) {
      var bit__4102__auto__ = G__15753.cljs$lang$protocol_mask$partition0$ & 128;
      if(bit__4102__auto__ || G__15753.cljs$core$INext$) {
        return true
      }else {
        if(!G__15753.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15753)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15753)
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if(!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta)
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta)
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta)
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if(temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null)
  }else {
    return null
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry)
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/ValSeq")
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1)
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__15754 = self__.mseq;
    if(G__15754) {
      var bit__4102__auto__ = G__15754.cljs$lang$protocol_mask$partition0$ & 128;
      if(bit__4102__auto__ || G__15754.cljs$core$INext$) {
        return true
      }else {
        if(!G__15754.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15754)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15754)
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if(nseq == null) {
    return null
  }else {
    return new cljs.core.ValSeq(nseq, self__._meta)
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me)
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__15755 = self__.mseq;
    if(G__15755) {
      var bit__4102__auto__ = G__15755.cljs$lang$protocol_mask$partition0$ & 128;
      if(bit__4102__auto__ || G__15755.cljs$core$INext$) {
        return true
      }else {
        if(!G__15755.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15755)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15755)
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if(!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta)
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta)
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta)
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if(temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null)
  }else {
    return null
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry)
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if(cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__15756_SHARP_, p2__15757_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3483__auto__ = p1__15756_SHARP_;
          if(cljs.core.truth_(or__3483__auto__)) {
            return or__3483__auto__
          }else {
            return cljs.core.PersistentArrayMap.EMPTY
          }
        }(), p2__15757_SHARP_)
      }, maps)
    }else {
      return null
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if(arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return merge__delegate.call(this, maps)
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__15758) {
    var maps = cljs.core.seq(arglist__15758);
    return merge__delegate(maps)
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if(cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if(cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v))
        }else {
          return cljs.core.assoc.call(null, m, k, v)
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3483__auto__ = m1;
            if(cljs.core.truth_(or__3483__auto__)) {
              return or__3483__auto__
            }else {
              return cljs.core.PersistentArrayMap.EMPTY
            }
          }(), cljs.core.seq.call(null, m2))
        }
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps)
    }else {
      return null
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if(arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return merge_with__delegate.call(this, f, maps)
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__15759) {
    var f = cljs.core.first(arglist__15759);
    var maps = cljs.core.rest(arglist__15759);
    return merge_with__delegate(f, maps)
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while(true) {
    if(keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__15760 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__15761 = cljs.core.next.call(null, keys);
      ret = G__15760;
      keys = G__15761;
      continue
    }else {
      return ret
    }
    break
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 15077647
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/PersistentHashSet")
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map))
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.truth_(cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v))) {
    return v
  }else {
    return not_found
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__15764 = null;
  var G__15764__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__15764__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__15764 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15764__2.call(this, self__, k);
      case 3:
        return G__15764__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15764
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args15763) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15763)))
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null)
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__15762_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__15762_SHARP_)
  }, other)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash)
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if(len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while(true) {
      if(i < len) {
        var G__15765 = i + 1;
        var G__15766 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__15765;
        out = G__15766;
        continue
      }else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null)
      }
      break
    }
  }else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while(true) {
      if(i < len) {
        var G__15767 = i + 2;
        var G__15768 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__15767;
        out = G__15768;
        continue
      }else {
        return cljs.core._persistent_BANG_.call(null, out)
      }
      break
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/TransientHashSet")
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__15770 = null;
  var G__15770__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null
    }else {
      return k
    }
  };
  var G__15770__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found
    }else {
      return k
    }
  };
  G__15770 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15770__2.call(this, self__, k);
      case 3:
        return G__15770__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15770
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args15769) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15769)))
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null
  }else {
    return k
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found
  }else {
    return k
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null)
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found
  }else {
    return v
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map)
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null)
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map)
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 417730831
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/PersistentTreeSet")
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if(!(n == null)) {
    return n.key
  }else {
    return not_found
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__15773 = null;
  var G__15773__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__15773__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__15773 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15773__2.call(this, self__, k);
      case 3:
        return G__15773__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15773
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args15772) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15772)))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map))
  }else {
    return null
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__15771_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__15771_SHARP_)
  }, other)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash)
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4293__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while(true) {
      if(i < a__4293__auto__.length) {
        var G__15774 = i + 1;
        var G__15775 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__15774;
        res = G__15775;
        continue
      }else {
        return res
      }
      break
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret)
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if(in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY
  }else {
    if(in$ instanceof cljs.core.IndexedSeq) {
      return cljs.core.set_from_indexed_seq.call(null, in$)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while(true) {
          if(!(in$__$1 == null)) {
            var G__15776 = cljs.core._next.call(null, in$__$1);
            var G__15777 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__15776;
            out = G__15777;
            continue
          }else {
            return cljs.core._persistent_BANG_.call(null, out)
          }
          break
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY
  };
  var hash_set__1 = function() {
    var G__15778__delegate = function(keys) {
      return cljs.core.set.call(null, keys)
    };
    var G__15778 = function(var_args) {
      var keys = null;
      if(arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__15778__delegate.call(this, keys)
    };
    G__15778.cljs$lang$maxFixedArity = 0;
    G__15778.cljs$lang$applyTo = function(arglist__15779) {
      var keys = cljs.core.seq(arglist__15779);
      return G__15778__delegate(keys)
    };
    G__15778.cljs$core$IFn$_invoke$arity$variadic = G__15778__delegate;
    return G__15778
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys)
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if(arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return sorted_set__delegate.call(this, keys)
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__15780) {
    var keys = cljs.core.seq(arglist__15780);
    return sorted_set__delegate(keys)
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys)
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if(arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return sorted_set_by__delegate.call(this, comparator, keys)
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__15781) {
    var comparator = cljs.core.first(arglist__15781);
    var keys = cljs.core.rest(arglist__15781);
    return sorted_set_by__delegate(comparator, keys)
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by
}();
cljs.core.replace = function replace(smap, coll) {
  if(cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if(cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e))
      }else {
        return v
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)))
  }else {
    return cljs.core.map.call(null, function(p1__15782_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__15782_SHARP_);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e)
      }else {
        return p1__15782_SHARP_
      }
    }, coll)
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__15789, seen__$1) {
        while(true) {
          var vec__15790 = p__15789;
          var f = cljs.core.nth.call(null, vec__15790, 0, null);
          var xs__$1 = vec__15790;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if(temp__4092__auto__) {
            var s = temp__4092__auto__;
            if(cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__15791 = cljs.core.rest.call(null, s);
              var G__15792 = seen__$1;
              p__15789 = G__15791;
              seen__$1 = G__15792;
              continue
            }else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)))
            }
          }else {
            return null
          }
          break
        }
      }.call(null, xs, seen)
    }, null, null)
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY)
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while(true) {
    if(cljs.core.next.call(null, s__$1)) {
      var G__15793 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__15794 = cljs.core.next.call(null, s__$1);
      ret = G__15793;
      s__$1 = G__15794;
      continue
    }else {
      return cljs.core.seq.call(null, ret)
    }
    break
  }
};
cljs.core.name = function name(x) {
  if(function() {
    var G__15796 = x;
    if(G__15796) {
      var bit__4095__auto__ = G__15796.cljs$lang$protocol_mask$partition1$ & 4096;
      if(bit__4095__auto__ || G__15796.cljs$core$INamed$) {
        return true
      }else {
        return false
      }
    }else {
      return false
    }
  }()) {
    return cljs.core._name.call(null, x)
  }else {
    if(typeof x === "string") {
      return x
    }else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while(true) {
    if(ks && vs) {
      var G__15797 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__15798 = cljs.core.next.call(null, ks);
      var G__15799 = cljs.core.next.call(null, vs);
      map = G__15797;
      ks = G__15798;
      vs = G__15799;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, map)
    }
    break
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x
  };
  var max_key__3 = function(k, x, y) {
    if(k.call(null, x) > k.call(null, y)) {
      return x
    }else {
      return y
    }
  };
  var max_key__4 = function() {
    var G__15802__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__15800_SHARP_, p2__15801_SHARP_) {
        return max_key.call(null, k, p1__15800_SHARP_, p2__15801_SHARP_)
      }, max_key.call(null, k, x, y), more)
    };
    var G__15802 = function(k, x, y, var_args) {
      var more = null;
      if(arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__15802__delegate.call(this, k, x, y, more)
    };
    G__15802.cljs$lang$maxFixedArity = 3;
    G__15802.cljs$lang$applyTo = function(arglist__15803) {
      var k = cljs.core.first(arglist__15803);
      arglist__15803 = cljs.core.next(arglist__15803);
      var x = cljs.core.first(arglist__15803);
      arglist__15803 = cljs.core.next(arglist__15803);
      var y = cljs.core.first(arglist__15803);
      var more = cljs.core.rest(arglist__15803);
      return G__15802__delegate(k, x, y, more)
    };
    G__15802.cljs$core$IFn$_invoke$arity$variadic = G__15802__delegate;
    return G__15802
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x
  };
  var min_key__3 = function(k, x, y) {
    if(k.call(null, x) < k.call(null, y)) {
      return x
    }else {
      return y
    }
  };
  var min_key__4 = function() {
    var G__15806__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__15804_SHARP_, p2__15805_SHARP_) {
        return min_key.call(null, k, p1__15804_SHARP_, p2__15805_SHARP_)
      }, min_key.call(null, k, x, y), more)
    };
    var G__15806 = function(k, x, y, var_args) {
      var more = null;
      if(arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__15806__delegate.call(this, k, x, y, more)
    };
    G__15806.cljs$lang$maxFixedArity = 3;
    G__15806.cljs$lang$applyTo = function(arglist__15807) {
      var k = cljs.core.first(arglist__15807);
      arglist__15807 = cljs.core.next(arglist__15807);
      var x = cljs.core.first(arglist__15807);
      arglist__15807 = cljs.core.next(arglist__15807);
      var y = cljs.core.first(arglist__15807);
      var more = cljs.core.rest(arglist__15807);
      return G__15806__delegate(k, x, y, more)
    };
    G__15806.cljs$core$IFn$_invoke$arity$variadic = G__15806__delegate;
    return G__15806
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll)
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)))
      }else {
        return null
      }
    }, null, null)
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      if(cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)))
      }else {
        return null
      }
    }else {
      return null
    }
  }, null, null)
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0)
  }
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if(cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if(cljs.core.truth_(temp__4092__auto__)) {
        var vec__15810 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__15810, 0, null);
        var s = vec__15810;
        if(cljs.core.truth_(include.call(null, e))) {
          return s
        }else {
          return cljs.core.next.call(null, s)
        }
      }else {
        return null
      }
    }else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true))
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if(cljs.core.truth_(temp__4092__auto__)) {
      var vec__15811 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__15811, 0, null);
      var s = vec__15811;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s))
    }else {
      return null
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if(cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if(cljs.core.truth_(temp__4092__auto__)) {
        var vec__15814 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__15814, 0, null);
        var s = vec__15814;
        if(cljs.core.truth_(include.call(null, e))) {
          return s
        }else {
          return cljs.core.next.call(null, s)
        }
      }else {
        return null
      }
    }else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false))
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if(cljs.core.truth_(temp__4092__auto__)) {
      var vec__15815 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__15815, 0, null);
      var s = vec__15815;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s))
    }else {
      return null
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32375006
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/Range")
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3887__auto__ = self__.__hash;
  if(!(h__3887__auto__ == null)) {
    return h__3887__auto__
  }else {
    var h__3887__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__3887__auto____$1;
    return h__3887__auto____$1
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if(self__.step > 0) {
    if(self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
    }else {
      return null
    }
  }else {
    if(self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
    }else {
      return null
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1)
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f)
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s)
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if(self__.step > 0) {
    if(self__.start < self__.end) {
      return rng__$1
    }else {
      return null
    }
  }else {
    if(self__.start > self__.end) {
      return rng__$1
    }else {
      return null
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if(cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0
  }else {
    return Math.ceil((self__.end - self__.start) / self__.step)
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.start
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if(!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other)
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash)
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if(n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step
  }else {
    if(self__.start > self__.end && self__.step === 0) {
      return self__.start
    }else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if(n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step
  }else {
    if(self__.start > self__.end && self__.step === 0) {
      return self__.start
    }else {
      return not_found
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash)
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1)
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1)
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1)
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null)
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)))
    }else {
      return null
    }
  }, null, null)
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null)
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__15816_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__15816_SHARP_))
        }
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))))
    }else {
      return null
    }
  }, null, null)
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1)
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll))
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s))
      }else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null))
      }
    }, null, null)
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s))
      }else {
        return null
      }
    }, null, null))
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__15827 = null;
      var G__15827__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null)
      };
      var G__15827__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null)
      };
      var G__15827__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null)
      };
      var G__15827__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null)
      };
      var G__15827__4 = function() {
        var G__15828__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null)
        };
        var G__15828 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__15828__delegate.call(this, x, y, z, args)
        };
        G__15828.cljs$lang$maxFixedArity = 3;
        G__15828.cljs$lang$applyTo = function(arglist__15829) {
          var x = cljs.core.first(arglist__15829);
          arglist__15829 = cljs.core.next(arglist__15829);
          var y = cljs.core.first(arglist__15829);
          arglist__15829 = cljs.core.next(arglist__15829);
          var z = cljs.core.first(arglist__15829);
          var args = cljs.core.rest(arglist__15829);
          return G__15828__delegate(x, y, z, args)
        };
        G__15828.cljs$core$IFn$_invoke$arity$variadic = G__15828__delegate;
        return G__15828
      }();
      G__15827 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15827__0.call(this);
          case 1:
            return G__15827__1.call(this, x);
          case 2:
            return G__15827__2.call(this, x, y);
          case 3:
            return G__15827__3.call(this, x, y, z);
          default:
            return G__15827__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15827.cljs$lang$maxFixedArity = 3;
      G__15827.cljs$lang$applyTo = G__15827__4.cljs$lang$applyTo;
      return G__15827
    }()
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__15830 = null;
      var G__15830__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null)
      };
      var G__15830__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null)
      };
      var G__15830__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null)
      };
      var G__15830__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null)
      };
      var G__15830__4 = function() {
        var G__15831__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null)
        };
        var G__15831 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__15831__delegate.call(this, x, y, z, args)
        };
        G__15831.cljs$lang$maxFixedArity = 3;
        G__15831.cljs$lang$applyTo = function(arglist__15832) {
          var x = cljs.core.first(arglist__15832);
          arglist__15832 = cljs.core.next(arglist__15832);
          var y = cljs.core.first(arglist__15832);
          arglist__15832 = cljs.core.next(arglist__15832);
          var z = cljs.core.first(arglist__15832);
          var args = cljs.core.rest(arglist__15832);
          return G__15831__delegate(x, y, z, args)
        };
        G__15831.cljs$core$IFn$_invoke$arity$variadic = G__15831__delegate;
        return G__15831
      }();
      G__15830 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15830__0.call(this);
          case 1:
            return G__15830__1.call(this, x);
          case 2:
            return G__15830__2.call(this, x, y);
          case 3:
            return G__15830__3.call(this, x, y, z);
          default:
            return G__15830__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15830.cljs$lang$maxFixedArity = 3;
      G__15830.cljs$lang$applyTo = G__15830__4.cljs$lang$applyTo;
      return G__15830
    }()
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__15833 = null;
      var G__15833__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null)
      };
      var G__15833__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null)
      };
      var G__15833__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null)
      };
      var G__15833__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null)
      };
      var G__15833__4 = function() {
        var G__15834__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null)
        };
        var G__15834 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__15834__delegate.call(this, x, y, z, args)
        };
        G__15834.cljs$lang$maxFixedArity = 3;
        G__15834.cljs$lang$applyTo = function(arglist__15835) {
          var x = cljs.core.first(arglist__15835);
          arglist__15835 = cljs.core.next(arglist__15835);
          var y = cljs.core.first(arglist__15835);
          arglist__15835 = cljs.core.next(arglist__15835);
          var z = cljs.core.first(arglist__15835);
          var args = cljs.core.rest(arglist__15835);
          return G__15834__delegate(x, y, z, args)
        };
        G__15834.cljs$core$IFn$_invoke$arity$variadic = G__15834__delegate;
        return G__15834
      }();
      G__15833 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15833__0.call(this);
          case 1:
            return G__15833__1.call(this, x);
          case 2:
            return G__15833__2.call(this, x, y);
          case 3:
            return G__15833__3.call(this, x, y, z);
          default:
            return G__15833__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15833.cljs$lang$maxFixedArity = 3;
      G__15833.cljs$lang$applyTo = G__15833__4.cljs$lang$applyTo;
      return G__15833
    }()
  };
  var juxt__4 = function() {
    var G__15836__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__15837 = null;
        var G__15837__0 = function() {
          return cljs.core.reduce.call(null, function(p1__15817_SHARP_, p2__15818_SHARP_) {
            return cljs.core.conj.call(null, p1__15817_SHARP_, p2__15818_SHARP_.call(null))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__15837__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__15819_SHARP_, p2__15820_SHARP_) {
            return cljs.core.conj.call(null, p1__15819_SHARP_, p2__15820_SHARP_.call(null, x))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__15837__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__15821_SHARP_, p2__15822_SHARP_) {
            return cljs.core.conj.call(null, p1__15821_SHARP_, p2__15822_SHARP_.call(null, x, y))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__15837__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__15823_SHARP_, p2__15824_SHARP_) {
            return cljs.core.conj.call(null, p1__15823_SHARP_, p2__15824_SHARP_.call(null, x, y, z))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__15837__4 = function() {
          var G__15838__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__15825_SHARP_, p2__15826_SHARP_) {
              return cljs.core.conj.call(null, p1__15825_SHARP_, cljs.core.apply.call(null, p2__15826_SHARP_, x, y, z, args))
            }, cljs.core.PersistentVector.EMPTY, fs__$1)
          };
          var G__15838 = function(x, y, z, var_args) {
            var args = null;
            if(arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__15838__delegate.call(this, x, y, z, args)
          };
          G__15838.cljs$lang$maxFixedArity = 3;
          G__15838.cljs$lang$applyTo = function(arglist__15839) {
            var x = cljs.core.first(arglist__15839);
            arglist__15839 = cljs.core.next(arglist__15839);
            var y = cljs.core.first(arglist__15839);
            arglist__15839 = cljs.core.next(arglist__15839);
            var z = cljs.core.first(arglist__15839);
            var args = cljs.core.rest(arglist__15839);
            return G__15838__delegate(x, y, z, args)
          };
          G__15838.cljs$core$IFn$_invoke$arity$variadic = G__15838__delegate;
          return G__15838
        }();
        G__15837 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__15837__0.call(this);
            case 1:
              return G__15837__1.call(this, x);
            case 2:
              return G__15837__2.call(this, x, y);
            case 3:
              return G__15837__3.call(this, x, y, z);
            default:
              return G__15837__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__15837.cljs$lang$maxFixedArity = 3;
        G__15837.cljs$lang$applyTo = G__15837__4.cljs$lang$applyTo;
        return G__15837
      }()
    };
    var G__15836 = function(f, g, h, var_args) {
      var fs = null;
      if(arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__15836__delegate.call(this, f, g, h, fs)
    };
    G__15836.cljs$lang$maxFixedArity = 3;
    G__15836.cljs$lang$applyTo = function(arglist__15840) {
      var f = cljs.core.first(arglist__15840);
      arglist__15840 = cljs.core.next(arglist__15840);
      var g = cljs.core.first(arglist__15840);
      arglist__15840 = cljs.core.next(arglist__15840);
      var h = cljs.core.first(arglist__15840);
      var fs = cljs.core.rest(arglist__15840);
      return G__15836__delegate(f, g, h, fs)
    };
    G__15836.cljs$core$IFn$_invoke$arity$variadic = G__15836__delegate;
    return G__15836
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while(true) {
      if(cljs.core.seq.call(null, coll)) {
        var G__15841 = cljs.core.next.call(null, coll);
        coll = G__15841;
        continue
      }else {
        return null
      }
      break
    }
  };
  var dorun__2 = function(n, coll) {
    while(true) {
      if(cljs.core.seq.call(null, coll) && n > 0) {
        var G__15842 = n - 1;
        var G__15843 = cljs.core.next.call(null, coll);
        n = G__15842;
        coll = G__15843;
        continue
      }else {
        return null
      }
      break
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if(cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches)
    }else {
      return cljs.core.vec.call(null, matches)
    }
  }else {
    return null
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if(matches == null) {
    return null
  }else {
    if(cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches)
    }else {
      return cljs.core.vec.call(null, matches)
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if(cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null)
    }, null, null)
  }else {
    return null
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__15845 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__15845, 0, null);
  var flags = cljs.core.nth.call(null, vec__15845, 1, null);
  var pattern = cljs.core.nth.call(null, vec__15845, 2, null);
  return new RegExp(pattern, flags)
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  cljs.core._write.call(null, writer, begin);
  if(cljs.core.seq.call(null, coll)) {
    print_one.call(null, cljs.core.first.call(null, coll), writer, opts)
  }else {
  }
  var coll_15846__$1 = cljs.core.next.call(null, coll);
  var n_15847 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
  while(true) {
    if(coll_15846__$1 && (n_15847 == null || !(n_15847 === 0))) {
      cljs.core._write.call(null, writer, sep);
      print_one.call(null, cljs.core.first.call(null, coll_15846__$1), writer, opts);
      var G__15848 = cljs.core.next.call(null, coll_15846__$1);
      var G__15849 = n_15847 - 1;
      coll_15846__$1 = G__15848;
      n_15847 = G__15849;
      continue
    }else {
    }
    break
  }
  if(cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
    cljs.core._write.call(null, writer, sep);
    print_one.call(null, "...", writer, opts)
  }else {
  }
  return cljs.core._write.call(null, writer, end)
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__15854 = cljs.core.seq.call(null, ss);
    var chunk__15855 = null;
    var count__15856 = 0;
    var i__15857 = 0;
    while(true) {
      if(i__15857 < count__15856) {
        var s = cljs.core._nth.call(null, chunk__15855, i__15857);
        cljs.core._write.call(null, writer, s);
        var G__15858 = seq__15854;
        var G__15859 = chunk__15855;
        var G__15860 = count__15856;
        var G__15861 = i__15857 + 1;
        seq__15854 = G__15858;
        chunk__15855 = G__15859;
        count__15856 = G__15860;
        i__15857 = G__15861;
        continue
      }else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__15854);
        if(temp__4092__auto__) {
          var seq__15854__$1 = temp__4092__auto__;
          if(cljs.core.chunked_seq_QMARK_.call(null, seq__15854__$1)) {
            var c__4200__auto__ = cljs.core.chunk_first.call(null, seq__15854__$1);
            var G__15862 = cljs.core.chunk_rest.call(null, seq__15854__$1);
            var G__15863 = c__4200__auto__;
            var G__15864 = cljs.core.count.call(null, c__4200__auto__);
            var G__15865 = 0;
            seq__15854 = G__15862;
            chunk__15855 = G__15863;
            count__15856 = G__15864;
            i__15857 = G__15865;
            continue
          }else {
            var s = cljs.core.first.call(null, seq__15854__$1);
            cljs.core._write.call(null, writer, s);
            var G__15866 = cljs.core.next.call(null, seq__15854__$1);
            var G__15867 = null;
            var G__15868 = 0;
            var G__15869 = 0;
            seq__15854 = G__15866;
            chunk__15855 = G__15867;
            count__15856 = G__15868;
            i__15857 = G__15869;
            continue
          }
        }else {
          return null
        }
      }
      break
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if(arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return write_all__delegate.call(this, writer, ss)
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__15870) {
    var writer = cljs.core.first(arglist__15870);
    var ss = cljs.core.rest(arglist__15870);
    return write_all__delegate(writer, ss)
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null
};
cljs.core.flush = function flush() {
  return null
};
cljs.core.char_escapes = function() {
  var obj15872 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj15872
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match]
  })), cljs.core.str('"')].join("")
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if(obj == null) {
    return cljs.core._write.call(null, writer, "nil")
  }else {
    if(void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e")
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if(cljs.core.truth_(function() {
          var and__3474__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if(cljs.core.truth_(and__3474__auto__)) {
            var and__3474__auto____$1 = function() {
              var G__15878 = obj;
              if(G__15878) {
                var bit__4102__auto__ = G__15878.cljs$lang$protocol_mask$partition0$ & 131072;
                if(bit__4102__auto__ || G__15878.cljs$core$IMeta$) {
                  return true
                }else {
                  if(!G__15878.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15878)
                  }else {
                    return false
                  }
                }
              }else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15878)
              }
            }();
            if(and__3474__auto____$1) {
              return cljs.core.meta.call(null, obj)
            }else {
              return and__3474__auto____$1
            }
          }else {
            return and__3474__auto__
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ")
        }else {
        }
        if(obj == null) {
          return cljs.core._write.call(null, writer, "nil")
        }else {
          if(obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts)
          }else {
            if(function() {
              var G__15879 = obj;
              if(G__15879) {
                var bit__4095__auto__ = G__15879.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if(bit__4095__auto__ || G__15879.cljs$core$IPrintWithWriter$) {
                  return true
                }else {
                  return false
                }
              }else {
                return false
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts)
            }else {
              if(cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""))
              }else {
                if(obj instanceof Array) {
                  return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#\x3cArray [", ", ", "]\x3e", opts, obj)
                }else {
                  if(goog.isString(obj)) {
                    if(cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj))
                    }else {
                      return cljs.core._write.call(null, writer, obj)
                    }
                  }else {
                    if(cljs.core.fn_QMARK_.call(null, obj)) {
                      return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e")
                    }else {
                      if(obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while(true) {
                            if(cljs.core.count.call(null, ns) < len) {
                              var G__15881 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__15881;
                              continue
                            }else {
                              return ns
                            }
                            break
                          }
                        };
                        return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"')
                      }else {
                        if(cljs.core.truth_(cljs.core.regexp_QMARK_.call(null, obj))) {
                          return cljs.core.write_all.call(null, writer, '#"', obj.source, '"')
                        }else {
                          if(function() {
                            var G__15880 = obj;
                            if(G__15880) {
                              var bit__4102__auto__ = G__15880.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if(bit__4102__auto__ || G__15880.cljs$core$IPrintWithWriter$) {
                                return true
                              }else {
                                if(!G__15880.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__15880)
                                }else {
                                  return false
                                }
                              }
                            }else {
                              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__15880)
                            }
                          }()) {
                            return cljs.core._pr_writer.call(null, obj, writer, opts)
                          }else {
                            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                              return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e")
                            }else {
                              return null
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__15886 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__15887 = null;
  var count__15888 = 0;
  var i__15889 = 0;
  while(true) {
    if(i__15889 < count__15888) {
      var obj = cljs.core._nth.call(null, chunk__15887, i__15889);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__15890 = seq__15886;
      var G__15891 = chunk__15887;
      var G__15892 = count__15888;
      var G__15893 = i__15889 + 1;
      seq__15886 = G__15890;
      chunk__15887 = G__15891;
      count__15888 = G__15892;
      i__15889 = G__15893;
      continue
    }else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__15886);
      if(temp__4092__auto__) {
        var seq__15886__$1 = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__15886__$1)) {
          var c__4200__auto__ = cljs.core.chunk_first.call(null, seq__15886__$1);
          var G__15894 = cljs.core.chunk_rest.call(null, seq__15886__$1);
          var G__15895 = c__4200__auto__;
          var G__15896 = cljs.core.count.call(null, c__4200__auto__);
          var G__15897 = 0;
          seq__15886 = G__15894;
          chunk__15887 = G__15895;
          count__15888 = G__15896;
          i__15889 = G__15897;
          continue
        }else {
          var obj = cljs.core.first.call(null, seq__15886__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__15898 = cljs.core.next.call(null, seq__15886__$1);
          var G__15899 = null;
          var G__15900 = 0;
          var G__15901 = 0;
          seq__15886 = G__15898;
          chunk__15887 = G__15899;
          count__15888 = G__15900;
          i__15889 = G__15901;
          continue
        }
      }else {
        return null
      }
    }
    break
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if(cljs.core.empty_QMARK_.call(null, objs)) {
    return""
  }else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("")
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if(cljs.core.empty_QMARK_.call(null, objs)) {
    return"\n"
  }else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("")
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts))
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if(cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null)
  }else {
    return null
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var pr_str = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return pr_str__delegate.call(this, objs)
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__15902) {
    var objs = cljs.core.seq(arglist__15902);
    return pr_str__delegate(objs)
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var prn_str = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return prn_str__delegate.call(this, objs)
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__15903) {
    var objs = cljs.core.seq(arglist__15903);
    return prn_str__delegate(objs)
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var pr = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return pr__delegate.call(this, objs)
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__15904) {
    var objs = cljs.core.seq(arglist__15904);
    return pr__delegate(objs)
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false))
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return cljs_core_print__delegate.call(this, objs)
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__15905) {
    var objs = cljs.core.seq(arglist__15905);
    return cljs_core_print__delegate(objs)
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false))
  };
  var print_str = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return print_str__delegate.call(this, objs)
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__15906) {
    var objs = cljs.core.seq(arglist__15906);
    return print_str__delegate(objs)
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if(cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null))
    }else {
      return null
    }
  };
  var println = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return println__delegate.call(this, objs)
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__15907) {
    var objs = cljs.core.seq(arglist__15907);
    return println__delegate(objs)
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false))
  };
  var println_str = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return println_str__delegate.call(this, objs)
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__15908) {
    var objs = cljs.core.seq(arglist__15908);
    return println_str__delegate(objs)
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if(cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null))
    }else {
      return null
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return prn__delegate.call(this, objs)
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__15909) {
    var objs = cljs.core.seq(arglist__15909);
    return prn__delegate(objs)
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn
}();
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1)
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1)
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1))
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1)
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1)
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1)
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()")
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1)
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y)
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y)
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y)
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y)
};
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 2
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/Atom")
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1)
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__15910 = cljs.core.seq.call(null, self__.watches);
  var chunk__15911 = null;
  var count__15912 = 0;
  var i__15913 = 0;
  while(true) {
    if(i__15913 < count__15912) {
      var vec__15914 = cljs.core._nth.call(null, chunk__15911, i__15913);
      var key = cljs.core.nth.call(null, vec__15914, 0, null);
      var f = cljs.core.nth.call(null, vec__15914, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__15916 = seq__15910;
      var G__15917 = chunk__15911;
      var G__15918 = count__15912;
      var G__15919 = i__15913 + 1;
      seq__15910 = G__15916;
      chunk__15911 = G__15917;
      count__15912 = G__15918;
      i__15913 = G__15919;
      continue
    }else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__15910);
      if(temp__4092__auto__) {
        var seq__15910__$1 = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__15910__$1)) {
          var c__4200__auto__ = cljs.core.chunk_first.call(null, seq__15910__$1);
          var G__15920 = cljs.core.chunk_rest.call(null, seq__15910__$1);
          var G__15921 = c__4200__auto__;
          var G__15922 = cljs.core.count.call(null, c__4200__auto__);
          var G__15923 = 0;
          seq__15910 = G__15920;
          chunk__15911 = G__15921;
          count__15912 = G__15922;
          i__15913 = G__15923;
          continue
        }else {
          var vec__15915 = cljs.core.first.call(null, seq__15910__$1);
          var key = cljs.core.nth.call(null, vec__15915, 0, null);
          var f = cljs.core.nth.call(null, vec__15915, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__15924 = cljs.core.next.call(null, seq__15910__$1);
          var G__15925 = null;
          var G__15926 = 0;
          var G__15927 = 0;
          seq__15910 = G__15924;
          chunk__15911 = G__15925;
          count__15912 = G__15926;
          i__15913 = G__15927;
          continue
        }
      }else {
        return null
      }
    }
    break
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f)
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key)
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e")
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches)
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null)
  };
  var atom__2 = function() {
    var G__15931__delegate = function(x, p__15928) {
      var map__15930 = p__15928;
      var map__15930__$1 = cljs.core.seq_QMARK_.call(null, map__15930) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15930) : map__15930;
      var validator = cljs.core.get.call(null, map__15930__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__15930__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null)
    };
    var G__15931 = function(x, var_args) {
      var p__15928 = null;
      if(arguments.length > 1) {
        p__15928 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__15931__delegate.call(this, x, p__15928)
    };
    G__15931.cljs$lang$maxFixedArity = 1;
    G__15931.cljs$lang$applyTo = function(arglist__15932) {
      var x = cljs.core.first(arglist__15932);
      var p__15928 = cljs.core.rest(arglist__15932);
      return G__15931__delegate(x, p__15928)
    };
    G__15931.cljs$core$IFn$_invoke$arity$variadic = G__15931__delegate;
    return G__15931
  }();
  atom = function(x, var_args) {
    var p__15928 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  var temp__4092__auto___15933 = a.validator;
  if(cljs.core.truth_(temp__4092__auto___15933)) {
    var validate_15934 = temp__4092__auto___15933;
    if(cljs.core.truth_(validate_15934.call(null, new_value))) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
    }
  }else {
  }
  var old_value_15935 = a.state;
  a.state = new_value;
  cljs.core._notify_watches.call(null, a, old_value_15935, new_value);
  return new_value
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state))
  };
  var swap_BANG___3 = function(a, f, x) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x))
  };
  var swap_BANG___4 = function(a, f, x, y) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y))
  };
  var swap_BANG___5 = function(a, f, x, y, z) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y, z))
  };
  var swap_BANG___6 = function() {
    var G__15936__delegate = function(a, f, x, y, z, more) {
      return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, z, more))
    };
    var G__15936 = function(a, f, x, y, z, var_args) {
      var more = null;
      if(arguments.length > 5) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0)
      }
      return G__15936__delegate.call(this, a, f, x, y, z, more)
    };
    G__15936.cljs$lang$maxFixedArity = 5;
    G__15936.cljs$lang$applyTo = function(arglist__15937) {
      var a = cljs.core.first(arglist__15937);
      arglist__15937 = cljs.core.next(arglist__15937);
      var f = cljs.core.first(arglist__15937);
      arglist__15937 = cljs.core.next(arglist__15937);
      var x = cljs.core.first(arglist__15937);
      arglist__15937 = cljs.core.next(arglist__15937);
      var y = cljs.core.first(arglist__15937);
      arglist__15937 = cljs.core.next(arglist__15937);
      var z = cljs.core.first(arglist__15937);
      var more = cljs.core.rest(arglist__15937);
      return G__15936__delegate(a, f, x, y, z, more)
    };
    G__15936.cljs$core$IFn$_invoke$arity$variadic = G__15936__delegate;
    return G__15936
  }();
  swap_BANG_ = function(a, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      case 5:
        return swap_BANG___5.call(this, a, f, x, y, z);
      default:
        return swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, z, cljs.core.array_seq(arguments, 5))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 5;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$5 = swap_BANG___5;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if(cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true
  }else {
    return false
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o)
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args)
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if(arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args)
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__15938) {
    var iref = cljs.core.first(arglist__15938);
    arglist__15938 = cljs.core.next(arglist__15938);
    var f = cljs.core.first(arglist__15938);
    var args = cljs.core.rest(arglist__15938);
    return alter_meta_BANG___delegate(iref, f, args)
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f)
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key)
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__")
  };
  var gensym__1 = function(prefix_string) {
    if(cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0)
    }else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""))
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/Delay")
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state))
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__15939) {
    var map__15940 = p__15939;
    var map__15940__$1 = cljs.core.seq_QMARK_.call(null, map__15940) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15940) : map__15940;
    var curr_state = map__15940__$1;
    var done = cljs.core.get.call(null, map__15940__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if(cljs.core.truth_(done)) {
      return curr_state
    }else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null)
    }
  }))
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f)
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay
};
cljs.core.force = function force(x) {
  if(cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x)
  }else {
    return x
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d)
};
cljs.core.IEncodeJS = function() {
  var obj15942 = {};
  return obj15942
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if(function() {
    var and__3474__auto__ = x;
    if(and__3474__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x)
  }else {
    var x__4079__auto__ = x == null ? null : x;
    return function() {
      var or__3483__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._clj__GT_js["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x)
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if(function() {
    var and__3474__auto__ = x;
    if(and__3474__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x)
  }else {
    var x__4079__auto__ = x == null ? null : x;
    return function() {
      var or__3483__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._key__GT_js["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x)
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if(function() {
    var G__15944 = k;
    if(G__15944) {
      var bit__4102__auto__ = null;
      if(cljs.core.truth_(function() {
        var or__3483__auto__ = bit__4102__auto__;
        if(cljs.core.truth_(or__3483__auto__)) {
          return or__3483__auto__
        }else {
          return G__15944.cljs$core$IEncodeJS$
        }
      }())) {
        return true
      }else {
        if(!G__15944.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__15944)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__15944)
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k)
  }else {
    if(typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k)
    }else {
      return cljs.core.pr_str.call(null, k)
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if(x == null) {
    return null
  }else {
    if(function() {
      var G__15954 = x;
      if(G__15954) {
        var bit__4102__auto__ = null;
        if(cljs.core.truth_(function() {
          var or__3483__auto__ = bit__4102__auto__;
          if(cljs.core.truth_(or__3483__auto__)) {
            return or__3483__auto__
          }else {
            return G__15954.cljs$core$IEncodeJS$
          }
        }())) {
          return true
        }else {
          if(!G__15954.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__15954)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__15954)
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x)
    }else {
      if(x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x)
      }else {
        if(x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("")
        }else {
          if(cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj15956 = {};
              return obj15956
            }();
            var seq__15957_15963 = cljs.core.seq.call(null, x);
            var chunk__15958_15964 = null;
            var count__15959_15965 = 0;
            var i__15960_15966 = 0;
            while(true) {
              if(i__15960_15966 < count__15959_15965) {
                var vec__15961_15967 = cljs.core._nth.call(null, chunk__15958_15964, i__15960_15966);
                var k_15968 = cljs.core.nth.call(null, vec__15961_15967, 0, null);
                var v_15969 = cljs.core.nth.call(null, vec__15961_15967, 1, null);
                m[cljs.core.key__GT_js.call(null, k_15968)] = clj__GT_js.call(null, v_15969);
                var G__15970 = seq__15957_15963;
                var G__15971 = chunk__15958_15964;
                var G__15972 = count__15959_15965;
                var G__15973 = i__15960_15966 + 1;
                seq__15957_15963 = G__15970;
                chunk__15958_15964 = G__15971;
                count__15959_15965 = G__15972;
                i__15960_15966 = G__15973;
                continue
              }else {
                var temp__4092__auto___15974 = cljs.core.seq.call(null, seq__15957_15963);
                if(temp__4092__auto___15974) {
                  var seq__15957_15975__$1 = temp__4092__auto___15974;
                  if(cljs.core.chunked_seq_QMARK_.call(null, seq__15957_15975__$1)) {
                    var c__4200__auto___15976 = cljs.core.chunk_first.call(null, seq__15957_15975__$1);
                    var G__15977 = cljs.core.chunk_rest.call(null, seq__15957_15975__$1);
                    var G__15978 = c__4200__auto___15976;
                    var G__15979 = cljs.core.count.call(null, c__4200__auto___15976);
                    var G__15980 = 0;
                    seq__15957_15963 = G__15977;
                    chunk__15958_15964 = G__15978;
                    count__15959_15965 = G__15979;
                    i__15960_15966 = G__15980;
                    continue
                  }else {
                    var vec__15962_15981 = cljs.core.first.call(null, seq__15957_15975__$1);
                    var k_15982 = cljs.core.nth.call(null, vec__15962_15981, 0, null);
                    var v_15983 = cljs.core.nth.call(null, vec__15962_15981, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_15982)] = clj__GT_js.call(null, v_15983);
                    var G__15984 = cljs.core.next.call(null, seq__15957_15975__$1);
                    var G__15985 = null;
                    var G__15986 = 0;
                    var G__15987 = 0;
                    seq__15957_15963 = G__15984;
                    chunk__15958_15964 = G__15985;
                    count__15959_15965 = G__15986;
                    i__15960_15966 = G__15987;
                    continue
                  }
                }else {
                }
              }
              break
            }
            return m
          }else {
            if(cljs.core.coll_QMARK_.call(null, x)) {
              return cljs.core.apply.call(null, cljs.core.array, cljs.core.map.call(null, clj__GT_js, x))
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x
              }else {
                return null
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj15989 = {};
  return obj15989
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if(function() {
    var and__3474__auto__ = x;
    if(and__3474__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options)
  }else {
    var x__4079__auto__ = x == null ? null : x;
    return function() {
      var or__3483__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._js__GT_clj["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options)
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null))
  };
  var js__GT_clj__2 = function() {
    var G__16010__delegate = function(x, opts) {
      if(function() {
        var G__16000 = x;
        if(G__16000) {
          var bit__4102__auto__ = null;
          if(cljs.core.truth_(function() {
            var or__3483__auto__ = bit__4102__auto__;
            if(cljs.core.truth_(or__3483__auto__)) {
              return or__3483__auto__
            }else {
              return G__16000.cljs$core$IEncodeClojure$
            }
          }())) {
            return true
          }else {
            if(!G__16000.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__16000)
            }else {
              return false
            }
          }
        }else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__16000)
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts))
      }else {
        if(cljs.core.seq.call(null, opts)) {
          var map__16001 = opts;
          var map__16001__$1 = cljs.core.seq_QMARK_.call(null, map__16001) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16001) : map__16001;
          var keywordize_keys = cljs.core.get.call(null, map__16001__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__16001, map__16001__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if(cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1))
              }else {
                if(cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1))
                }else {
                  if(x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1))
                  }else {
                    if(cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4169__auto__ = function(map__16001, map__16001__$1, keywordize_keys, keyfn) {
                          return function iter__16006(s__16007) {
                            return new cljs.core.LazySeq(null, function(map__16001, map__16001__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__16007__$1 = s__16007;
                                while(true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__16007__$1);
                                  if(temp__4092__auto__) {
                                    var s__16007__$2 = temp__4092__auto__;
                                    if(cljs.core.chunked_seq_QMARK_.call(null, s__16007__$2)) {
                                      var c__4167__auto__ = cljs.core.chunk_first.call(null, s__16007__$2);
                                      var size__4168__auto__ = cljs.core.count.call(null, c__4167__auto__);
                                      var b__16009 = cljs.core.chunk_buffer.call(null, size__4168__auto__);
                                      if(function() {
                                        var i__16008 = 0;
                                        while(true) {
                                          if(i__16008 < size__4168__auto__) {
                                            var k = cljs.core._nth.call(null, c__4167__auto__, i__16008);
                                            cljs.core.chunk_append.call(null, b__16009, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__16011 = i__16008 + 1;
                                            i__16008 = G__16011;
                                            continue
                                          }else {
                                            return true
                                          }
                                          break
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16009), iter__16006.call(null, cljs.core.chunk_rest.call(null, s__16007__$2)))
                                      }else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16009), null)
                                      }
                                    }else {
                                      var k = cljs.core.first.call(null, s__16007__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__16006.call(null, cljs.core.rest.call(null, s__16007__$2)))
                                    }
                                  }else {
                                    return null
                                  }
                                  break
                                }
                              }
                            }(map__16001, map__16001__$1, keywordize_keys, keyfn), null, null)
                          }
                        }(map__16001, map__16001__$1, keywordize_keys, keyfn);
                        return iter__4169__auto__.call(null, cljs.core.js_keys.call(null, x__$1))
                      }())
                    }else {
                      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1
                      }else {
                        return null
                      }
                    }
                  }
                }
              }
            }
          }(map__16001, map__16001__$1, keywordize_keys, keyfn);
          return f.call(null, x)
        }else {
          return null
        }
      }
    };
    var G__16010 = function(x, var_args) {
      var opts = null;
      if(arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__16010__delegate.call(this, x, opts)
    };
    G__16010.cljs$lang$maxFixedArity = 1;
    G__16010.cljs$lang$applyTo = function(arglist__16012) {
      var x = cljs.core.first(arglist__16012);
      var opts = cljs.core.rest(arglist__16012);
      return G__16010__delegate(x, opts)
    };
    G__16010.cljs$core$IFn$_invoke$arity$variadic = G__16010__delegate;
    return G__16010
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__16013__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v
      }else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret
      }
    };
    var G__16013 = function(var_args) {
      var args = null;
      if(arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__16013__delegate.call(this, args)
    };
    G__16013.cljs$lang$maxFixedArity = 0;
    G__16013.cljs$lang$applyTo = function(arglist__16014) {
      var args = cljs.core.seq(arglist__16014);
      return G__16013__delegate(args)
    };
    G__16013.cljs$core$IFn$_invoke$arity$variadic = G__16013__delegate;
    return G__16013
  }()
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while(true) {
      var ret = f.call(null);
      if(cljs.core.fn_QMARK_.call(null, ret)) {
        var G__16015 = ret;
        f = G__16015;
        continue
      }else {
        return ret
      }
      break
    }
  };
  var trampoline__2 = function() {
    var G__16016__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args)
      })
    };
    var G__16016 = function(f, var_args) {
      var args = null;
      if(arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__16016__delegate.call(this, f, args)
    };
    G__16016.cljs$lang$maxFixedArity = 1;
    G__16016.cljs$lang$applyTo = function(arglist__16017) {
      var f = cljs.core.first(arglist__16017);
      var args = cljs.core.rest(arglist__16017);
      return G__16016__delegate(f, args)
    };
    G__16016.cljs$core$IFn$_invoke$arity$variadic = G__16016__delegate;
    return G__16016
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1)
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n)
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)))
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x))
  }, cljs.core.PersistentArrayMap.EMPTY, coll)
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null)
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if(cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null))
  }else {
  }
  return cljs.core._global_hierarchy
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args)
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if(arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args)
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__16018) {
    var f = cljs.core.first(arglist__16018);
    var args = cljs.core.rest(arglist__16018);
    return swap_global_hierarchy_BANG___delegate(f, args)
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent)
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3483__auto__ = cljs.core._EQ_.call(null, child, parent);
    if(or__3483__auto__) {
      return or__3483__auto__
    }else {
      var or__3483__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if(or__3483__auto____$1) {
        return or__3483__auto____$1
      }else {
        var and__3474__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if(and__3474__auto__) {
          var and__3474__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if(and__3474__auto____$1) {
            var and__3474__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if(and__3474__auto____$2) {
              var ret = true;
              var i = 0;
              while(true) {
                if(!ret || i === cljs.core.count.call(null, parent)) {
                  return ret
                }else {
                  var G__16019 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__16020 = i + 1;
                  ret = G__16019;
                  i = G__16020;
                  continue
                }
                break
              }
            }else {
              return and__3474__auto____$2
            }
          }else {
            return and__3474__auto____$1
          }
        }else {
          return and__3474__auto__
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag)
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag))
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag)
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag))
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag)
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag))
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if(cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null
  };
  var derive__3 = function(h, tag, parent) {
    if(cljs.core.not_EQ_.call(null, tag, parent)) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))))
          }
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)))
      }
    }(tp, td, ta);
    var or__3483__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if(cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      }else {
      }
      if(cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      }else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null)
    }();
    if(cljs.core.truth_(or__3483__auto__)) {
      return or__3483__auto__
    }else {
      return h
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__16021_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__16021_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__16021_SHARP_), cljs.core.second.call(null, p1__16021_SHARP_)))
      }
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if(cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__16022_SHARP_, p2__16023_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__16022_SHARP_, p2__16023_SHARP_)
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq))
    }else {
      return h
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table)
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy)
  })
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3483__auto__ = cljs.core.truth_(function() {
    var and__3474__auto__ = xprefs;
    if(cljs.core.truth_(and__3474__auto__)) {
      return xprefs.call(null, y)
    }else {
      return and__3474__auto__
    }
  }()) ? true : null;
  if(cljs.core.truth_(or__3483__auto__)) {
    return or__3483__auto__
  }else {
    var or__3483__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while(true) {
        if(cljs.core.count.call(null, ps) > 0) {
          if(cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          }else {
          }
          var G__16024 = cljs.core.rest.call(null, ps);
          ps = G__16024;
          continue
        }else {
          return null
        }
        break
      }
    }();
    if(cljs.core.truth_(or__3483__auto____$1)) {
      return or__3483__auto____$1
    }else {
      var or__3483__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while(true) {
          if(cljs.core.count.call(null, ps) > 0) {
            if(cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            }else {
            }
            var G__16025 = cljs.core.rest.call(null, ps);
            ps = G__16025;
            continue
          }else {
            return null
          }
          break
        }
      }();
      if(cljs.core.truth_(or__3483__auto____$2)) {
        return or__3483__auto____$2
      }else {
        return false
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3483__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if(cljs.core.truth_(or__3483__auto__)) {
    return or__3483__auto__
  }else {
    return cljs.core.isa_QMARK_.call(null, x, y)
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__16028) {
    var vec__16029 = p__16028;
    var k = cljs.core.nth.call(null, vec__16029, 0, null);
    var _ = cljs.core.nth.call(null, vec__16029, 1, null);
    var e = vec__16029;
    if(cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3483__auto__ = be == null;
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table)
        }
      }()) ? e : be;
      if(cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      }else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2
    }else {
      return be
    }
  }, null, cljs.core.deref.call(null, method_table));
  if(cljs.core.truth_(best_entry)) {
    if(cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry)
    }else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy)
    }
  }else {
    return null
  }
};
cljs.core.IMultiFn = function() {
  var obj16031 = {};
  return obj16031
}();
cljs.core._reset = function _reset(mf) {
  if(function() {
    var and__3474__auto__ = mf;
    if(and__3474__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf)
  }else {
    var x__4079__auto__ = mf == null ? null : mf;
    return function() {
      var or__3483__auto__ = cljs.core._reset[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._reset["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if(function() {
    var and__3474__auto__ = mf;
    if(and__3474__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3
    }else {
      return and__3474__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method)
  }else {
    var x__4079__auto__ = mf == null ? null : mf;
    return function() {
      var or__3483__auto__ = cljs.core._add_method[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._add_method["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method)
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if(function() {
    var and__3474__auto__ = mf;
    if(and__3474__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val)
  }else {
    var x__4079__auto__ = mf == null ? null : mf;
    return function() {
      var or__3483__auto__ = cljs.core._remove_method[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._remove_method["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val)
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if(function() {
    var and__3474__auto__ = mf;
    if(and__3474__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3
    }else {
      return and__3474__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y)
  }else {
    var x__4079__auto__ = mf == null ? null : mf;
    return function() {
      var or__3483__auto__ = cljs.core._prefer_method[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._prefer_method["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y)
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if(function() {
    var and__3474__auto__ = mf;
    if(and__3474__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val)
  }else {
    var x__4079__auto__ = mf == null ? null : mf;
    return function() {
      var or__3483__auto__ = cljs.core._get_method[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._get_method["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val)
  }
};
cljs.core._methods = function _methods(mf) {
  if(function() {
    var and__3474__auto__ = mf;
    if(and__3474__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf)
  }else {
    var x__4079__auto__ = mf == null ? null : mf;
    return function() {
      var or__3483__auto__ = cljs.core._methods[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._methods["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._prefers = function _prefers(mf) {
  if(function() {
    var and__3474__auto__ = mf;
    if(and__3474__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf)
  }else {
    var x__4079__auto__ = mf == null ? null : mf;
    return function() {
      var or__3483__auto__ = cljs.core._prefers[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._prefers["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if(function() {
    var and__3474__auto__ = mf;
    if(and__3474__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args)
  }else {
    var x__4079__auto__ = mf == null ? null : mf;
    return function() {
      var or__3483__auto__ = cljs.core._dispatch[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = cljs.core._dispatch["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args)
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if(cljs.core.truth_(target_fn)) {
  }else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args)
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/MultiFn")
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null
  });
  return mf__$1
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if(cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  }else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy)
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if(cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn
  }else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if(cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn
    }else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val)
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if(cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  }else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y))
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args)
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy)
};
cljs.core.MultiFn.prototype.call = function() {
  var G__16032__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args)
  };
  var G__16032 = function(_, var_args) {
    var args = null;
    if(arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return G__16032__delegate.call(this, _, args)
  };
  G__16032.cljs$lang$maxFixedArity = 1;
  G__16032.cljs$lang$applyTo = function(arglist__16033) {
    var _ = cljs.core.first(arglist__16033);
    var args = cljs.core.rest(arglist__16033);
    return G__16032__delegate(_, args)
  };
  G__16032.cljs$core$IFn$_invoke$arity$variadic = G__16032__delegate;
  return G__16032
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args)
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn)
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val)
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y)
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn)
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val)
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn)
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/UUID")
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1))
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""))
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid)
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4023__auto__, writer__4024__auto__, opts__4025__auto__) {
  return cljs.core._write.call(null, writer__4024__auto__, "cljs.core/ExceptionInfo")
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause)
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null)
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause)
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info
}();
cljs.core.ex_data = function ex_data(ex) {
  if(ex instanceof cljs.core.ExceptionInfo) {
    return ex.data
  }else {
    return null
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if(ex instanceof Error) {
    return ex.message
  }else {
    return null
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if(ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause
  }else {
    return null
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if(cljs.core.truth_(pred.call(null, x, y))) {
      return-1
    }else {
      if(cljs.core.truth_(pred.call(null, y, x))) {
        return 1
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x)
};
goog.provide("ribol.cljs");
goog.require("cljs.core");
ribol.cljs._STAR_managers_STAR_ = cljs.core.PersistentVector.EMPTY;
ribol.cljs._STAR_optmap_STAR_ = cljs.core.PersistentArrayMap.EMPTY;
ribol.cljs.hash_map_QMARK_ = function hash_map_QMARK_(x) {
  return x instanceof cljs.core.PersistentArrayMap || x instanceof cljs.core.PersistentHashMap || x instanceof cljs.core.PersistentTreeMap
};
ribol.cljs.hash_set_QMARK_ = function hash_set_QMARK_(x) {
  return x instanceof cljs.core.PersistentHashSet || x instanceof cljs.core.PersistentTreeSet
};
ribol.cljs.assoc_if = function() {
  var assoc_if = null;
  var assoc_if__3 = function(m, k, v) {
    if(v == null) {
      return m
    }else {
      return cljs.core.assoc.call(null, m, k, v)
    }
  };
  var assoc_if__4 = function() {
    var G__6828__delegate = function(m, k, v, more) {
      return cljs.core.apply.call(null, assoc_if, assoc_if.call(null, m, k, v), more)
    };
    var G__6828 = function(m, k, v, var_args) {
      var more = null;
      if(arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__6828__delegate.call(this, m, k, v, more)
    };
    G__6828.cljs$lang$maxFixedArity = 3;
    G__6828.cljs$lang$applyTo = function(arglist__6829) {
      var m = cljs.core.first(arglist__6829);
      arglist__6829 = cljs.core.next(arglist__6829);
      var k = cljs.core.first(arglist__6829);
      arglist__6829 = cljs.core.next(arglist__6829);
      var v = cljs.core.first(arglist__6829);
      var more = cljs.core.rest(arglist__6829);
      return G__6828__delegate(m, k, v, more)
    };
    G__6828.cljs$core$IFn$_invoke$arity$variadic = G__6828__delegate;
    return G__6828
  }();
  assoc_if = function(m, k, v, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_if__3.call(this, m, k, v);
      default:
        return assoc_if__4.cljs$core$IFn$_invoke$arity$variadic(m, k, v, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_if.cljs$lang$maxFixedArity = 3;
  assoc_if.cljs$lang$applyTo = assoc_if__4.cljs$lang$applyTo;
  assoc_if.cljs$core$IFn$_invoke$arity$3 = assoc_if__3;
  assoc_if.cljs$core$IFn$_invoke$arity$variadic = assoc_if__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_if
}();
ribol.cljs.parse_contents = function parse_contents(contents) {
  if(cljs.core.truth_(ribol.cljs.hash_map_QMARK_.call(null, contents))) {
    return contents
  }else {
    if(contents instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentArrayMap.fromArray([contents, true], true, false)
    }else {
      if(cljs.core.vector_QMARK_.call(null, contents)) {
        return cljs.core.apply.call(null, cljs.core.merge, cljs.core.map.call(null, parse_contents, contents))
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("PARSE_CONTENTS: "), cljs.core.str(contents), cljs.core.str(" should be a keyword, hash-map or vector")].join(""));
        }else {
          return null
        }
      }
    }
  }
};
ribol.cljs.check_contents = function check_contents(contents, chk) {
  if(cljs.core.truth_(ribol.cljs.hash_map_QMARK_.call(null, chk))) {
    return cljs.core.every_QMARK_.call(null, function(p__6834) {
      var vec__6835 = p__6834;
      var k = cljs.core.nth.call(null, vec__6835, 0, null);
      var vchk = cljs.core.nth.call(null, vec__6835, 1, null);
      var vcnt = cljs.core.get.call(null, contents, k);
      if(vchk instanceof cljs.core.Keyword) {
        return cljs.core._EQ_.call(null, vchk, vcnt)
      }else {
        if(cljs.core.fn_QMARK_.call(null, vchk)) {
          return vchk.call(null, vcnt)
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core._EQ_.call(null, vchk, vcnt)
          }else {
            return null
          }
        }
      }
    }, chk)
  }else {
    if(cljs.core.vector_QMARK_.call(null, chk)) {
      return cljs.core.every_QMARK_.call(null, function(p1__6830_SHARP_) {
        return check_contents.call(null, contents, p1__6830_SHARP_)
      }, chk)
    }else {
      if(cljs.core.fn_QMARK_.call(null, chk) || chk instanceof cljs.core.Keyword) {
        return chk.call(null, contents)
      }else {
        if(cljs.core.truth_(ribol.cljs.hash_set_QMARK_.call(null, chk))) {
          return cljs.core.some.call(null, function(p1__6831_SHARP_) {
            return check_contents.call(null, contents, p1__6831_SHARP_)
          }, chk)
        }else {
          if(cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "_", "_", -1640531432, null), chk)) {
            return true
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str("CHECK_CONTENTS: "), cljs.core.str(chk), cljs.core.str(" cannot be found")].join(""));
            }else {
              return null
            }
          }
        }
      }
    }
  }
};
ribol.cljs.create_issue = function create_issue(contents, msg, options, default$) {
  var contents__$1 = ribol.cljs.parse_contents.call(null, contents);
  var id = cljs.core.keyword.call(null, cljs.core.gensym.call(null));
  var options__$1 = function() {
    var or__3190__auto__ = options;
    if(cljs.core.truth_(or__3190__auto__)) {
      return or__3190__auto__
    }else {
      return cljs.core.PersistentArrayMap.EMPTY
    }
  }();
  var optmap = cljs.core.zipmap.call(null, cljs.core.keys.call(null, options__$1), cljs.core.repeat.call(null, id));
  return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "id", "id", 1013907597), id, new cljs.core.Keyword(null, "contents", "contents", 4741549708), contents__$1, new cljs.core.Keyword(null, "msg", "msg", 1014012659), msg, new cljs.core.Keyword(null, "options", "options", 4059396624), options__$1, new cljs.core.Keyword(null, "optmap", "optmap", 4298737979), optmap, new cljs.core.Keyword(null, "default", "default", 2558708147), default$], null)
};
ribol.cljs.create_signal = function() {
  var create_signal__delegate = function(issue, signal, args) {
    var contents = (new cljs.core.Keyword(null, "contents", "contents", 4741549708)).cljs$core$IFn$_invoke$arity$1(issue);
    var data = cljs.core.apply.call(null, cljs.core.assoc, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("ribol.cljs", "contents", "ribol.cljs/contents", 4631325442), contents], null), new cljs.core.Keyword("ribol.cljs", "signal", "ribol.cljs/signal", 4163140736), signal, args);
    var msg = [cljs.core.str((new cljs.core.Keyword(null, "msg", "msg", 1014012659)).cljs$core$IFn$_invoke$arity$1(issue)), cljs.core.str(" "), cljs.core.str(signal), cljs.core.str(" - "), cljs.core.str(contents)].join("");
    return cljs.core.ex_info.call(null, msg, data)
  };
  var create_signal = function(issue, signal, var_args) {
    var args = null;
    if(arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return create_signal__delegate.call(this, issue, signal, args)
  };
  create_signal.cljs$lang$maxFixedArity = 2;
  create_signal.cljs$lang$applyTo = function(arglist__6836) {
    var issue = cljs.core.first(arglist__6836);
    arglist__6836 = cljs.core.next(arglist__6836);
    var signal = cljs.core.first(arglist__6836);
    var args = cljs.core.rest(arglist__6836);
    return create_signal__delegate(issue, signal, args)
  };
  create_signal.cljs$core$IFn$_invoke$arity$variadic = create_signal__delegate;
  return create_signal
}();
ribol.cljs.create_catch_signal = function create_catch_signal(target, value) {
  return cljs.core.ex_info.call(null, "catch", new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("ribol.cljs", "signal", "ribol.cljs/signal", 4163140736), new cljs.core.Keyword(null, "catch", "catch", 1108337197), new cljs.core.Keyword("ribol.cljs", "target", "ribol.cljs/target", 4141582729), target, new cljs.core.Keyword("ribol.cljs", "value", "ribol.cljs/value", 999139753), value], null))
};
ribol.cljs.create_choose_signal = function create_choose_signal(target, label, args) {
  return cljs.core.ex_info.call(null, "choose", new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("ribol.cljs", "signal", "ribol.cljs/signal", 4163140736), new cljs.core.Keyword(null, "choose", "choose", 3947653513), new cljs.core.Keyword("ribol.cljs", "target", "ribol.cljs/target", 4141582729), target, new cljs.core.Keyword("ribol.cljs", "label", "ribol.cljs/label", 1006278444), label, new cljs.core.Keyword("ribol.cljs", "args", "ribol.cljs/args", 839706181), args], null))
};
ribol.cljs.create_exception = function() {
  var create_exception = null;
  var create_exception__1 = function(issue) {
    var contents = (new cljs.core.Keyword(null, "contents", "contents", 4741549708)).cljs$core$IFn$_invoke$arity$1(issue);
    var msg = [cljs.core.str((new cljs.core.Keyword(null, "msg", "msg", 1014012659)).cljs$core$IFn$_invoke$arity$1(issue)), cljs.core.str(" - "), cljs.core.str(contents)].join("");
    return cljs.core.ex_info.call(null, msg, contents)
  };
  var create_exception__2 = function(issue, contents) {
    return create_exception.call(null, cljs.core.update_in.call(null, issue, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "contents", "contents", 4741549708)], null), cljs.core.merge, contents))
  };
  create_exception = function(issue, contents) {
    switch(arguments.length) {
      case 1:
        return create_exception__1.call(this, issue);
      case 2:
        return create_exception__2.call(this, issue, contents)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_exception.cljs$core$IFn$_invoke$arity$1 = create_exception__1;
  create_exception.cljs$core$IFn$_invoke$arity$2 = create_exception__2;
  return create_exception
}();
ribol.cljs.raise_valid_handler = function raise_valid_handler(issue, handlers) {
  while(true) {
    var temp__4090__auto__ = cljs.core.first.call(null, handlers);
    if(cljs.core.truth_(temp__4090__auto__)) {
      var h = temp__4090__auto__;
      if(cljs.core.truth_(ribol.cljs.check_contents.call(null, (new cljs.core.Keyword(null, "contents", "contents", 4741549708)).cljs$core$IFn$_invoke$arity$1(issue), (new cljs.core.Keyword(null, "checker", "checker", 1756218151)).cljs$core$IFn$_invoke$arity$1(h)))) {
        return h
      }else {
        var G__6837 = issue;
        var G__6838 = cljs.core.next.call(null, handlers);
        issue = G__6837;
        handlers = G__6838;
        continue
      }
    }else {
      return null
    }
    break
  }
};
ribol.cljs.default_unhandled_fn = function default_unhandled_fn(issue) {
  var ex = ribol.cljs.create_exception.call(null, issue);
  throw ex;
};
ribol.cljs.raise_catch = function raise_catch(manager, value) {
  throw ribol.cljs.create_catch_signal.call(null, (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(manager), value);
};
ribol.cljs.raise_choose = function raise_choose(issue, label, args, optmap) {
  var target = cljs.core.get.call(null, optmap, label);
  if(target == null) {
    throw new Error([cljs.core.str("RAISE_CHOOSE: the label "), cljs.core.str(label), cljs.core.str(" has not been implemented")].join(""));
  }else {
    if(cljs.core._EQ_.call(null, target, (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(issue))) {
      return cljs.core.apply.call(null, label.call(null, (new cljs.core.Keyword(null, "options", "options", 4059396624)).cljs$core$IFn$_invoke$arity$1(issue)), args)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw ribol.cljs.create_choose_signal.call(null, target, label, args);
      }else {
        return null
      }
    }
  }
};
ribol.cljs.raise_unhandled = function raise_unhandled(issue, optmap) {
  var temp__4090__auto__ = (new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(issue);
  if(cljs.core.truth_(temp__4090__auto__)) {
    var vec__6840 = temp__4090__auto__;
    var label = cljs.core.nth.call(null, vec__6840, 0, null);
    var args = cljs.core.nthnext.call(null, vec__6840, 1);
    return ribol.cljs.raise_choose.call(null, issue, label, args, optmap)
  }else {
    return ribol.cljs.default_unhandled_fn.call(null, issue)
  }
};
ribol.cljs.raise_fail = function raise_fail(issue, contents) {
  throw ribol.cljs.create_exception.call(null, issue, ribol.cljs.parse_contents.call(null, contents));
};
ribol.cljs.raise_escalate = function raise_escalate(issue, res, managers, optmap) {
  var ncontents = ribol.cljs.parse_contents.call(null, (new cljs.core.Keyword("ribol.cljs", "contents", "ribol.cljs/contents", 4631325442)).cljs$core$IFn$_invoke$arity$1(res));
  var noptions = (new cljs.core.Keyword("ribol.cljs", "options", "ribol.cljs/options", 3975386246)).cljs$core$IFn$_invoke$arity$1(res);
  var noptmap = cljs.core.zipmap.call(null, cljs.core.keys.call(null, noptions), cljs.core.repeat.call(null, (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(issue)));
  var ndefault = (new cljs.core.Keyword("ribol.cljs", "default", "ribol.cljs/default", 2517033945)).cljs$core$IFn$_invoke$arity$1(res);
  var nissue = ribol.cljs.assoc_if.call(null, cljs.core.update_in.call(null, cljs.core.update_in.call(null, issue, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "contents", "contents", 4741549708)], null), cljs.core.merge, ncontents), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "options", "options", 4059396624)], null), cljs.core.merge, noptions), new cljs.core.Keyword(null, 
  "default", "default", 2558708147), ndefault);
  return ribol.cljs.raise_loop.call(null, nissue, cljs.core.next.call(null, managers), cljs.core.merge.call(null, noptmap, optmap))
};
ribol.cljs.raise_loop = function raise_loop(issue, managers, optmap) {
  while(true) {
    var temp__4090__auto__ = cljs.core.first.call(null, managers);
    if(cljs.core.truth_(temp__4090__auto__)) {
      var mgr = temp__4090__auto__;
      var temp__4090__auto____$1 = ribol.cljs.raise_valid_handler.call(null, issue, (new cljs.core.Keyword(null, "handlers", "handlers", 1015973339)).cljs$core$IFn$_invoke$arity$1(mgr));
      if(cljs.core.truth_(temp__4090__auto____$1)) {
        var h = temp__4090__auto____$1;
        var ctns = (new cljs.core.Keyword(null, "contents", "contents", 4741549708)).cljs$core$IFn$_invoke$arity$1(issue);
        var res = (new cljs.core.Keyword(null, "fn", "fn", 1013907514)).cljs$core$IFn$_invoke$arity$1(h).call(null, ctns);
        var pred__6844 = cljs.core._EQ_;
        var expr__6845 = (new cljs.core.Keyword("ribol.cljs", "type", "ribol.cljs/type", 841197282)).cljs$core$IFn$_invoke$arity$1(res);
        if(pred__6844.call(null, new cljs.core.Keyword(null, "continue", "continue", 4741668889), expr__6845)) {
          return(new cljs.core.Keyword("ribol.cljs", "value", "ribol.cljs/value", 999139753)).cljs$core$IFn$_invoke$arity$1(res)
        }else {
          if(pred__6844.call(null, new cljs.core.Keyword(null, "choose", "choose", 3947653513), expr__6845)) {
            return ribol.cljs.raise_choose.call(null, issue, (new cljs.core.Keyword("ribol.cljs", "label", "ribol.cljs/label", 1006278444)).cljs$core$IFn$_invoke$arity$1(res), (new cljs.core.Keyword("ribol.cljs", "args", "ribol.cljs/args", 839706181)).cljs$core$IFn$_invoke$arity$1(res), optmap)
          }else {
            if(pred__6844.call(null, new cljs.core.Keyword(null, "default", "default", 2558708147), expr__6845)) {
              return ribol.cljs.raise_unhandled.call(null, issue, optmap)
            }else {
              if(pred__6844.call(null, new cljs.core.Keyword(null, "fail", "fail", 1017039504), expr__6845)) {
                return ribol.cljs.raise_fail.call(null, issue, (new cljs.core.Keyword("ribol.cljs", "contents", "ribol.cljs/contents", 4631325442)).cljs$core$IFn$_invoke$arity$1(res))
              }else {
                if(pred__6844.call(null, new cljs.core.Keyword(null, "escalate", "escalate", 2854978980), expr__6845)) {
                  return ribol.cljs.raise_escalate.call(null, issue, res, managers, optmap)
                }else {
                  return ribol.cljs.raise_catch.call(null, mgr, res)
                }
              }
            }
          }
        }
      }else {
        var G__6847 = issue;
        var G__6848 = cljs.core.next.call(null, managers);
        var G__6849 = optmap;
        issue = G__6847;
        managers = G__6848;
        optmap = G__6849;
        continue
      }
    }else {
      return ribol.cljs.raise_unhandled.call(null, issue, optmap)
    }
    break
  }
};
goog.provide("purnam.protocols");
goog.require("cljs.core");
purnam.protocols.Curried = function() {
  var obj17729 = {};
  return obj17729
}();
purnam.protocols.arity = function arity(f) {
  if(function() {
    var and__3474__auto__ = f;
    if(and__3474__auto__) {
      return f.purnam$protocols$Curried$arity$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return f.purnam$protocols$Curried$arity$arity$1(f)
  }else {
    var x__4079__auto__ = f == null ? null : f;
    return function() {
      var or__3483__auto__ = purnam.protocols.arity[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = purnam.protocols.arity["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Curried.arity", f);
        }
      }
    }().call(null, f)
  }
};
purnam.protocols.Functor = function() {
  var obj17731 = {};
  return obj17731
}();
purnam.protocols.fmap = function() {
  var fmap = null;
  var fmap__2 = function(fv, g) {
    if(function() {
      var and__3474__auto__ = fv;
      if(and__3474__auto__) {
        return fv.purnam$protocols$Functor$fmap$arity$2
      }else {
        return and__3474__auto__
      }
    }()) {
      return fv.purnam$protocols$Functor$fmap$arity$2(fv, g)
    }else {
      var x__4079__auto__ = fv == null ? null : fv;
      return function() {
        var or__3483__auto__ = purnam.protocols.fmap[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = purnam.protocols.fmap["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "Functor.fmap", fv);
          }
        }
      }().call(null, fv, g)
    }
  };
  var fmap__3 = function(fv, g, fvs) {
    if(function() {
      var and__3474__auto__ = fv;
      if(and__3474__auto__) {
        return fv.purnam$protocols$Functor$fmap$arity$3
      }else {
        return and__3474__auto__
      }
    }()) {
      return fv.purnam$protocols$Functor$fmap$arity$3(fv, g, fvs)
    }else {
      var x__4079__auto__ = fv == null ? null : fv;
      return function() {
        var or__3483__auto__ = purnam.protocols.fmap[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = purnam.protocols.fmap["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "Functor.fmap", fv);
          }
        }
      }().call(null, fv, g, fvs)
    }
  };
  fmap = function(fv, g, fvs) {
    switch(arguments.length) {
      case 2:
        return fmap__2.call(this, fv, g);
      case 3:
        return fmap__3.call(this, fv, g, fvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fmap.cljs$core$IFn$_invoke$arity$2 = fmap__2;
  fmap.cljs$core$IFn$_invoke$arity$3 = fmap__3;
  return fmap
}();
purnam.protocols.Applicative = function() {
  var obj17733 = {};
  return obj17733
}();
purnam.protocols.pure = function pure(av, v) {
  if(function() {
    var and__3474__auto__ = av;
    if(and__3474__auto__) {
      return av.purnam$protocols$Applicative$pure$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return av.purnam$protocols$Applicative$pure$arity$2(av, v)
  }else {
    var x__4079__auto__ = av == null ? null : av;
    return function() {
      var or__3483__auto__ = purnam.protocols.pure[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = purnam.protocols.pure["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Applicative.pure", av);
        }
      }
    }().call(null, av, v)
  }
};
purnam.protocols.fapply = function() {
  var fapply = null;
  var fapply__2 = function(ag, av) {
    if(function() {
      var and__3474__auto__ = ag;
      if(and__3474__auto__) {
        return ag.purnam$protocols$Applicative$fapply$arity$2
      }else {
        return and__3474__auto__
      }
    }()) {
      return ag.purnam$protocols$Applicative$fapply$arity$2(ag, av)
    }else {
      var x__4079__auto__ = ag == null ? null : ag;
      return function() {
        var or__3483__auto__ = purnam.protocols.fapply[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = purnam.protocols.fapply["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "Applicative.fapply", ag);
          }
        }
      }().call(null, ag, av)
    }
  };
  var fapply__3 = function(ag, av, avs) {
    if(function() {
      var and__3474__auto__ = ag;
      if(and__3474__auto__) {
        return ag.purnam$protocols$Applicative$fapply$arity$3
      }else {
        return and__3474__auto__
      }
    }()) {
      return ag.purnam$protocols$Applicative$fapply$arity$3(ag, av, avs)
    }else {
      var x__4079__auto__ = ag == null ? null : ag;
      return function() {
        var or__3483__auto__ = purnam.protocols.fapply[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = purnam.protocols.fapply["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "Applicative.fapply", ag);
          }
        }
      }().call(null, ag, av, avs)
    }
  };
  fapply = function(ag, av, avs) {
    switch(arguments.length) {
      case 2:
        return fapply__2.call(this, ag, av);
      case 3:
        return fapply__3.call(this, ag, av, avs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fapply.cljs$core$IFn$_invoke$arity$2 = fapply__2;
  fapply.cljs$core$IFn$_invoke$arity$3 = fapply__3;
  return fapply
}();
purnam.protocols.Monad = function() {
  var obj17735 = {};
  return obj17735
}();
purnam.protocols.bind = function() {
  var bind = null;
  var bind__2 = function(mv, g) {
    if(function() {
      var and__3474__auto__ = mv;
      if(and__3474__auto__) {
        return mv.purnam$protocols$Monad$bind$arity$2
      }else {
        return and__3474__auto__
      }
    }()) {
      return mv.purnam$protocols$Monad$bind$arity$2(mv, g)
    }else {
      var x__4079__auto__ = mv == null ? null : mv;
      return function() {
        var or__3483__auto__ = purnam.protocols.bind[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = purnam.protocols.bind["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "Monad.bind", mv);
          }
        }
      }().call(null, mv, g)
    }
  };
  var bind__3 = function(mv, g, mvs) {
    if(function() {
      var and__3474__auto__ = mv;
      if(and__3474__auto__) {
        return mv.purnam$protocols$Monad$bind$arity$3
      }else {
        return and__3474__auto__
      }
    }()) {
      return mv.purnam$protocols$Monad$bind$arity$3(mv, g, mvs)
    }else {
      var x__4079__auto__ = mv == null ? null : mv;
      return function() {
        var or__3483__auto__ = purnam.protocols.bind[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = purnam.protocols.bind["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "Monad.bind", mv);
          }
        }
      }().call(null, mv, g, mvs)
    }
  };
  bind = function(mv, g, mvs) {
    switch(arguments.length) {
      case 2:
        return bind__2.call(this, mv, g);
      case 3:
        return bind__3.call(this, mv, g, mvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bind.cljs$core$IFn$_invoke$arity$2 = bind__2;
  bind.cljs$core$IFn$_invoke$arity$3 = bind__3;
  return bind
}();
purnam.protocols.join = function join(mv) {
  if(function() {
    var and__3474__auto__ = mv;
    if(and__3474__auto__) {
      return mv.purnam$protocols$Monad$join$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return mv.purnam$protocols$Monad$join$arity$1(mv)
  }else {
    var x__4079__auto__ = mv == null ? null : mv;
    return function() {
      var or__3483__auto__ = purnam.protocols.join[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = purnam.protocols.join["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Monad.join", mv);
        }
      }
    }().call(null, mv)
  }
};
purnam.protocols.Magma = function() {
  var obj17737 = {};
  return obj17737
}();
purnam.protocols.op = function() {
  var op = null;
  var op__2 = function(x, y) {
    if(function() {
      var and__3474__auto__ = x;
      if(and__3474__auto__) {
        return x.purnam$protocols$Magma$op$arity$2
      }else {
        return and__3474__auto__
      }
    }()) {
      return x.purnam$protocols$Magma$op$arity$2(x, y)
    }else {
      var x__4079__auto__ = x == null ? null : x;
      return function() {
        var or__3483__auto__ = purnam.protocols.op[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = purnam.protocols.op["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "Magma.op", x);
          }
        }
      }().call(null, x, y)
    }
  };
  var op__3 = function(x, y, ys) {
    if(function() {
      var and__3474__auto__ = x;
      if(and__3474__auto__) {
        return x.purnam$protocols$Magma$op$arity$3
      }else {
        return and__3474__auto__
      }
    }()) {
      return x.purnam$protocols$Magma$op$arity$3(x, y, ys)
    }else {
      var x__4079__auto__ = x == null ? null : x;
      return function() {
        var or__3483__auto__ = purnam.protocols.op[goog.typeOf(x__4079__auto__)];
        if(or__3483__auto__) {
          return or__3483__auto__
        }else {
          var or__3483__auto____$1 = purnam.protocols.op["_"];
          if(or__3483__auto____$1) {
            return or__3483__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "Magma.op", x);
          }
        }
      }().call(null, x, y, ys)
    }
  };
  op = function(x, y, ys) {
    switch(arguments.length) {
      case 2:
        return op__2.call(this, x, y);
      case 3:
        return op__3.call(this, x, y, ys)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  op.cljs$core$IFn$_invoke$arity$2 = op__2;
  op.cljs$core$IFn$_invoke$arity$3 = op__3;
  return op
}();
purnam.protocols.Monoid = function() {
  var obj17739 = {};
  return obj17739
}();
purnam.protocols.id = function id(m) {
  if(function() {
    var and__3474__auto__ = m;
    if(and__3474__auto__) {
      return m.purnam$protocols$Monoid$id$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return m.purnam$protocols$Monoid$id$arity$1(m)
  }else {
    var x__4079__auto__ = m == null ? null : m;
    return function() {
      var or__3483__auto__ = purnam.protocols.id[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = purnam.protocols.id["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Monoid.id", m);
        }
      }
    }().call(null, m)
  }
};
purnam.protocols.Foldable = function() {
  var obj17741 = {};
  return obj17741
}();
purnam.protocols.fold = function fold(fd) {
  if(function() {
    var and__3474__auto__ = fd;
    if(and__3474__auto__) {
      return fd.purnam$protocols$Foldable$fold$arity$1
    }else {
      return and__3474__auto__
    }
  }()) {
    return fd.purnam$protocols$Foldable$fold$arity$1(fd)
  }else {
    var x__4079__auto__ = fd == null ? null : fd;
    return function() {
      var or__3483__auto__ = purnam.protocols.fold[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = purnam.protocols.fold["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Foldable.fold", fd);
        }
      }
    }().call(null, fd)
  }
};
purnam.protocols.foldmap = function foldmap(fd, g) {
  if(function() {
    var and__3474__auto__ = fd;
    if(and__3474__auto__) {
      return fd.purnam$protocols$Foldable$foldmap$arity$2
    }else {
      return and__3474__auto__
    }
  }()) {
    return fd.purnam$protocols$Foldable$foldmap$arity$2(fd, g)
  }else {
    var x__4079__auto__ = fd == null ? null : fd;
    return function() {
      var or__3483__auto__ = purnam.protocols.foldmap[goog.typeOf(x__4079__auto__)];
      if(or__3483__auto__) {
        return or__3483__auto__
      }else {
        var or__3483__auto____$1 = purnam.protocols.foldmap["_"];
        if(or__3483__auto____$1) {
          return or__3483__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Foldable.foldmap", fd);
        }
      }
    }().call(null, fd, g)
  }
};
goog.provide("purnam.common");
goog.require("cljs.core");
purnam.common.flags = function() {
  var obj17615 = {};
  return obj17615
}();
purnam.common.get_context = function get_context() {
  return purnam.common._STAR_pure_context_STAR_
};
goog.provide("purnam.types.curried");
goog.require("cljs.core");
goog.require("purnam.protocols");
goog.require("purnam.protocols");
goog.require("purnam.common");
purnam.types.curried.CFn = function(n, f) {
  this.n = n;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 3
};
purnam.types.curried.CFn.cljs$lang$type = true;
purnam.types.curried.CFn.cljs$lang$ctorStr = "purnam.types.curried/CFn";
purnam.types.curried.CFn.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "purnam.types.curried/CFn")
};
purnam.types.curried.CFn.prototype.call = function() {
  var G__17751 = null;
  var G__17751__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 0) {
      return purnam.types.curried.curry.call(null, self__.n, self__.f)
    }else {
      return self__.f.call(null)
    }
  };
  var G__17751__2 = function(self__, a0) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 1) {
      return purnam.types.curried.curry.call(null, self__.n - 1, cljs.core.partial.call(null, self__.f, a0))
    }else {
      return self__.f.call(null, a0)
    }
  };
  var G__17751__3 = function(self__, a0, a1) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 2) {
      return purnam.types.curried.curry.call(null, self__.n - 2, cljs.core.partial.call(null, self__.f, a0, a1))
    }else {
      return self__.f.call(null, a0, a1)
    }
  };
  var G__17751__4 = function(self__, a0, a1, a2) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 3) {
      return purnam.types.curried.curry.call(null, self__.n - 3, cljs.core.partial.call(null, self__.f, a0, a1, a2))
    }else {
      return self__.f.call(null, a0, a1, a2)
    }
  };
  var G__17751__5 = function(self__, a0, a1, a2, a3) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 4) {
      return purnam.types.curried.curry.call(null, self__.n - 4, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3))
    }else {
      return self__.f.call(null, a0, a1, a2, a3)
    }
  };
  var G__17751__6 = function(self__, a0, a1, a2, a3, a4) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 5) {
      return purnam.types.curried.curry.call(null, self__.n - 5, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4))
    }else {
      return self__.f.call(null, a0, a1, a2, a3, a4)
    }
  };
  var G__17751__7 = function(self__, a0, a1, a2, a3, a4, a5) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 6) {
      return purnam.types.curried.curry.call(null, self__.n - 6, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5))
    }else {
      return self__.f.call(null, a0, a1, a2, a3, a4, a5)
    }
  };
  var G__17751__8 = function(self__, a0, a1, a2, a3, a4, a5, a6) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 7) {
      return purnam.types.curried.curry.call(null, self__.n - 7, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6))
    }else {
      return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6)
    }
  };
  var G__17751__9 = function(self__, a0, a1, a2, a3, a4, a5, a6, a7) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 8) {
      return purnam.types.curried.curry.call(null, self__.n - 8, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7))
    }else {
      return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7)
    }
  };
  var G__17751__10 = function(self__, a0, a1, a2, a3, a4, a5, a6, a7, a8) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 9) {
      return purnam.types.curried.curry.call(null, self__.n - 9, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8))
    }else {
      return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8)
    }
  };
  var G__17751__11 = function(self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 10) {
      return purnam.types.curried.curry.call(null, self__.n - 10, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9))
    }else {
      return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
    }
  };
  var G__17751__12 = function(self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 11) {
      return purnam.types.curried.curry.call(null, self__.n - 11, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10))
    }else {
      return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
    }
  };
  var G__17751__13 = function(self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 12) {
      return purnam.types.curried.curry.call(null, self__.n - 12, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11))
    }else {
      return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)
    }
  };
  var G__17751__14 = function(self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 13) {
      return purnam.types.curried.curry.call(null, self__.n - 13, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12))
    }else {
      return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
    }
  };
  var G__17751__15 = function(self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 14) {
      return purnam.types.curried.curry.call(null, self__.n - 14, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13))
    }else {
      return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
    }
  };
  var G__17751__16 = function(self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 15) {
      return purnam.types.curried.curry.call(null, self__.n - 15, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14))
    }else {
      return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14)
    }
  };
  var G__17751__17 = function(self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 16) {
      return purnam.types.curried.curry.call(null, self__.n - 16, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15))
    }else {
      return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15)
    }
  };
  var G__17751__18 = function(self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 17) {
      return purnam.types.curried.curry.call(null, self__.n - 17, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16))
    }else {
      return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16)
    }
  };
  var G__17751__19 = function(self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 18) {
      return purnam.types.curried.curry.call(null, self__.n - 18, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17))
    }else {
      return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17)
    }
  };
  var G__17751__20 = function(self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 19) {
      return purnam.types.curried.curry.call(null, self__.n - 19, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18))
    }else {
      return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18)
    }
  };
  var G__17751__21 = function(self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(self__.n > 20) {
      return purnam.types.curried.curry.call(null, self__.n - 20, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19))
    }else {
      return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19)
    }
  };
  G__17751 = function(self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
    switch(arguments.length) {
      case 1:
        return G__17751__1.call(this, self__);
      case 2:
        return G__17751__2.call(this, self__, a0);
      case 3:
        return G__17751__3.call(this, self__, a0, a1);
      case 4:
        return G__17751__4.call(this, self__, a0, a1, a2);
      case 5:
        return G__17751__5.call(this, self__, a0, a1, a2, a3);
      case 6:
        return G__17751__6.call(this, self__, a0, a1, a2, a3, a4);
      case 7:
        return G__17751__7.call(this, self__, a0, a1, a2, a3, a4, a5);
      case 8:
        return G__17751__8.call(this, self__, a0, a1, a2, a3, a4, a5, a6);
      case 9:
        return G__17751__9.call(this, self__, a0, a1, a2, a3, a4, a5, a6, a7);
      case 10:
        return G__17751__10.call(this, self__, a0, a1, a2, a3, a4, a5, a6, a7, a8);
      case 11:
        return G__17751__11.call(this, self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
      case 12:
        return G__17751__12.call(this, self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
      case 13:
        return G__17751__13.call(this, self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      case 14:
        return G__17751__14.call(this, self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
      case 15:
        return G__17751__15.call(this, self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
      case 16:
        return G__17751__16.call(this, self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
      case 17:
        return G__17751__17.call(this, self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
      case 18:
        return G__17751__18.call(this, self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
      case 19:
        return G__17751__19.call(this, self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
      case 20:
        return G__17751__20.call(this, self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
      case 21:
        return G__17751__21.call(this, self__, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17751
}();
purnam.types.curried.CFn.prototype.apply = function(self__, args17750) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17750)))
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  if(self__.n > 0) {
    return purnam.types.curried.curry.call(null, self__.n, self__.f)
  }else {
    return self__.f.call(null)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a0) {
  var self__ = this;
  var _ = this;
  if(self__.n > 1) {
    return purnam.types.curried.curry.call(null, self__.n - 1, cljs.core.partial.call(null, self__.f, a0))
  }else {
    return self__.f.call(null, a0)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a0, a1) {
  var self__ = this;
  var _ = this;
  if(self__.n > 2) {
    return purnam.types.curried.curry.call(null, self__.n - 2, cljs.core.partial.call(null, self__.f, a0, a1))
  }else {
    return self__.f.call(null, a0, a1)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a0, a1, a2) {
  var self__ = this;
  var _ = this;
  if(self__.n > 3) {
    return purnam.types.curried.curry.call(null, self__.n - 3, cljs.core.partial.call(null, self__.f, a0, a1, a2))
  }else {
    return self__.f.call(null, a0, a1, a2)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a0, a1, a2, a3) {
  var self__ = this;
  var _ = this;
  if(self__.n > 4) {
    return purnam.types.curried.curry.call(null, self__.n - 4, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3))
  }else {
    return self__.f.call(null, a0, a1, a2, a3)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a0, a1, a2, a3, a4) {
  var self__ = this;
  var _ = this;
  if(self__.n > 5) {
    return purnam.types.curried.curry.call(null, self__.n - 5, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4))
  }else {
    return self__.f.call(null, a0, a1, a2, a3, a4)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a0, a1, a2, a3, a4, a5) {
  var self__ = this;
  var _ = this;
  if(self__.n > 6) {
    return purnam.types.curried.curry.call(null, self__.n - 6, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5))
  }else {
    return self__.f.call(null, a0, a1, a2, a3, a4, a5)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a0, a1, a2, a3, a4, a5, a6) {
  var self__ = this;
  var _ = this;
  if(self__.n > 7) {
    return purnam.types.curried.curry.call(null, self__.n - 7, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6))
  }else {
    return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a0, a1, a2, a3, a4, a5, a6, a7) {
  var self__ = this;
  var _ = this;
  if(self__.n > 8) {
    return purnam.types.curried.curry.call(null, self__.n - 8, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7))
  }else {
    return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {
  var self__ = this;
  var _ = this;
  if(self__.n > 9) {
    return purnam.types.curried.curry.call(null, self__.n - 9, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8))
  }else {
    return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
  var self__ = this;
  var _ = this;
  if(self__.n > 10) {
    return purnam.types.curried.curry.call(null, self__.n - 10, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9))
  }else {
    return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
  var self__ = this;
  var _ = this;
  if(self__.n > 11) {
    return purnam.types.curried.curry.call(null, self__.n - 11, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10))
  }else {
    return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
  var self__ = this;
  var _ = this;
  if(self__.n > 12) {
    return purnam.types.curried.curry.call(null, self__.n - 12, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11))
  }else {
    return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
  var self__ = this;
  var _ = this;
  if(self__.n > 13) {
    return purnam.types.curried.curry.call(null, self__.n - 13, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12))
  }else {
    return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) {
  var self__ = this;
  var _ = this;
  if(self__.n > 14) {
    return purnam.types.curried.curry.call(null, self__.n - 14, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13))
  }else {
    return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
  var self__ = this;
  var _ = this;
  if(self__.n > 15) {
    return purnam.types.curried.curry.call(null, self__.n - 15, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14))
  }else {
    return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
  var self__ = this;
  var _ = this;
  if(self__.n > 16) {
    return purnam.types.curried.curry.call(null, self__.n - 16, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15))
  }else {
    return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) {
  var self__ = this;
  var _ = this;
  if(self__.n > 17) {
    return purnam.types.curried.curry.call(null, self__.n - 17, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16))
  }else {
    return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) {
  var self__ = this;
  var _ = this;
  if(self__.n > 18) {
    return purnam.types.curried.curry.call(null, self__.n - 18, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17))
  }else {
    return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) {
  var self__ = this;
  var _ = this;
  if(self__.n > 19) {
    return purnam.types.curried.curry.call(null, self__.n - 19, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18))
  }else {
    return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18)
  }
};
purnam.types.curried.CFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
  var self__ = this;
  var _ = this;
  if(self__.n > 20) {
    return purnam.types.curried.curry.call(null, self__.n - 20, cljs.core.partial.call(null, self__.f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19))
  }else {
    return self__.f.call(null, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19)
  }
};
purnam.types.curried.CFn.prototype.purnam$protocols$Foldable$ = true;
purnam.types.curried.CFn.prototype.purnam$protocols$Foldable$fold$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.f
};
purnam.types.curried.CFn.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(_, g) {
  var self__ = this;
  var ___$1 = this;
  return g.call(null, self__.f)
};
purnam.types.curried.CFn.prototype.purnam$protocols$Magma$ = true;
purnam.types.curried.CFn.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var self__ = this;
  var x__$1 = this;
  if(cljs.core._EQ_.call(null, cljs.core.identity, self__.f)) {
    return y
  }else {
    if(cljs.core._EQ_.call(null, cljs.core.identity, purnam.protocols.fold.call(null, y))) {
      return x__$1
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return purnam.protocols.fmap.call(null, x__$1, y)
      }else {
        return null
      }
    }
  }
};
purnam.types.curried.CFn.prototype.purnam$protocols$Monoid$ = true;
purnam.types.curried.CFn.prototype.purnam$protocols$Monoid$id$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new purnam.types.curried.CFn(1, cljs.core.identity)
};
purnam.types.curried.CFn.prototype.purnam$protocols$Functor$ = true;
purnam.types.curried.CFn.prototype.purnam$protocols$Functor$fmap$arity$2 = function(_, g) {
  var self__ = this;
  var ___$1 = this;
  return new purnam.types.curried.CFn(self__.n, cljs.core.comp.call(null, g, self__.f))
};
purnam.types.curried.CFn.prototype.purnam$protocols$Functor$fmap$arity$3 = function(cf, g, cfs) {
  var self__ = this;
  var cf__$1 = this;
  return cljs.core.reduce.call(null, purnam.protocols.fmap, cljs.core.into.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, g), cf__$1), cljs.core.seq.call(null, cfs)))
};
purnam.types.curried.CFn.prototype.purnam$protocols$Curried$ = true;
purnam.types.curried.CFn.prototype.purnam$protocols$Curried$arity$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.n
};
purnam.types.curried.CFn.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.n
};
purnam.types.curried.__GT_CFn = function __GT_CFn(n, f) {
  return new purnam.types.curried.CFn(n, f)
};
purnam.types.curried.arities = function arities(f) {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.length], null)
};
purnam.types.curried.curry = function() {
  var curry = null;
  var curry__1 = function(f) {
    return curry.call(null, cljs.core.apply.call(null, cljs.core.min, purnam.types.curried.arities.call(null, f)), f)
  };
  var curry__2 = function(n, f) {
    return new purnam.types.curried.CFn(n, f)
  };
  var curry__3 = function() {
    var G__17752__delegate = function(n, f, args) {
      return cljs.core.apply.call(null, curry.call(null, n, f), args)
    };
    var G__17752 = function(n, f, var_args) {
      var args = null;
      if(arguments.length > 2) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__17752__delegate.call(this, n, f, args)
    };
    G__17752.cljs$lang$maxFixedArity = 2;
    G__17752.cljs$lang$applyTo = function(arglist__17753) {
      var n = cljs.core.first(arglist__17753);
      arglist__17753 = cljs.core.next(arglist__17753);
      var f = cljs.core.first(arglist__17753);
      var args = cljs.core.rest(arglist__17753);
      return G__17752__delegate(n, f, args)
    };
    G__17752.cljs$core$IFn$_invoke$arity$variadic = G__17752__delegate;
    return G__17752
  }();
  curry = function(n, f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return curry__1.call(this, n);
      case 2:
        return curry__2.call(this, n, f);
      default:
        return curry__3.cljs$core$IFn$_invoke$arity$variadic(n, f, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  curry.cljs$lang$maxFixedArity = 2;
  curry.cljs$lang$applyTo = curry__3.cljs$lang$applyTo;
  curry.cljs$core$IFn$_invoke$arity$1 = curry__1;
  curry.cljs$core$IFn$_invoke$arity$2 = curry__2;
  curry.cljs$core$IFn$_invoke$arity$variadic = curry__3.cljs$core$IFn$_invoke$arity$variadic;
  return curry
}();
purnam.types.curried.CFn.prototype.purnam$protocols$Applicative$ = true;
purnam.types.curried.CFn.prototype.purnam$protocols$Applicative$pure$arity$2 = function(_, x) {
  var ___$1 = this;
  return purnam.types.curried.curry.call(null, 0, function() {
    var G__17756__delegate = function(___$2) {
      return x
    };
    var G__17756 = function(var_args) {
      var ___$2 = null;
      if(arguments.length > 0) {
        ___$2 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__17756__delegate.call(this, ___$2)
    };
    G__17756.cljs$lang$maxFixedArity = 0;
    G__17756.cljs$lang$applyTo = function(arglist__17757) {
      var ___$2 = cljs.core.seq(arglist__17757);
      return G__17756__delegate(___$2)
    };
    G__17756.cljs$core$IFn$_invoke$arity$variadic = G__17756__delegate;
    return G__17756
  }())
};
purnam.types.curried.CFn.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(cg, cf) {
  var cg__$1 = this;
  return purnam.types.curried.curry.call(null, 1, function() {
    var G__17758 = null;
    var G__17758__1 = function(x) {
      return cg__$1.call(null, x).call(null, cf.call(null, x))
    };
    var G__17758__2 = function() {
      var G__17759__delegate = function(x, xs) {
        return cljs.core.apply.call(null, cg__$1, x, xs).call(null, cljs.core.apply.call(null, cf, x, xs))
      };
      var G__17759 = function(x, var_args) {
        var xs = null;
        if(arguments.length > 1) {
          xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
        }
        return G__17759__delegate.call(this, x, xs)
      };
      G__17759.cljs$lang$maxFixedArity = 1;
      G__17759.cljs$lang$applyTo = function(arglist__17760) {
        var x = cljs.core.first(arglist__17760);
        var xs = cljs.core.rest(arglist__17760);
        return G__17759__delegate(x, xs)
      };
      G__17759.cljs$core$IFn$_invoke$arity$variadic = G__17759__delegate;
      return G__17759
    }();
    G__17758 = function(x, var_args) {
      var xs = var_args;
      switch(arguments.length) {
        case 1:
          return G__17758__1.call(this, x);
        default:
          return G__17758__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17758.cljs$lang$maxFixedArity = 1;
    G__17758.cljs$lang$applyTo = G__17758__2.cljs$lang$applyTo;
    return G__17758
  }())
};
purnam.types.curried.CFn.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(cg, cf, hs) {
  var cg__$1 = this;
  return purnam.types.curried.curry.call(null, 1, function() {
    var G__17761 = null;
    var G__17761__1 = function(x) {
      return cljs.core.apply.call(null, cg__$1.call(null, x), cf.call(null, x), cljs.core.map.call(null, function(p1__17754_SHARP_) {
        return p1__17754_SHARP_.call(null, x)
      }, hs))
    };
    var G__17761__2 = function() {
      var G__17762__delegate = function(x, xs) {
        return cljs.core.apply.call(null, cljs.core.apply.call(null, cg__$1, x, xs), cljs.core.apply.call(null, cf, x, xs), cljs.core.map.call(null, function(p1__17755_SHARP_) {
          return cljs.core.apply.call(null, p1__17755_SHARP_, x, xs)
        }, hs))
      };
      var G__17762 = function(x, var_args) {
        var xs = null;
        if(arguments.length > 1) {
          xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
        }
        return G__17762__delegate.call(this, x, xs)
      };
      G__17762.cljs$lang$maxFixedArity = 1;
      G__17762.cljs$lang$applyTo = function(arglist__17763) {
        var x = cljs.core.first(arglist__17763);
        var xs = cljs.core.rest(arglist__17763);
        return G__17762__delegate(x, xs)
      };
      G__17762.cljs$core$IFn$_invoke$arity$variadic = G__17762__delegate;
      return G__17762
    }();
    G__17761 = function(x, var_args) {
      var xs = var_args;
      switch(arguments.length) {
        case 1:
          return G__17761__1.call(this, x);
        default:
          return G__17761__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17761.cljs$lang$maxFixedArity = 1;
    G__17761.cljs$lang$applyTo = G__17761__2.cljs$lang$applyTo;
    return G__17761
  }())
};
purnam.types.curried.CFn.prototype.purnam$protocols$Monad$ = true;
purnam.types.curried.CFn.prototype.purnam$protocols$Monad$bind$arity$2 = function(cf, cg) {
  var cf__$1 = this;
  return purnam.types.curried.curry.call(null, 1, function() {
    var G__17770 = null;
    var G__17770__1 = function(x) {
      var _STAR_pure_context_STAR_17766 = purnam.common._STAR_pure_context_STAR_;
      try {
        purnam.common._STAR_pure_context_STAR_ = cf__$1;
        return cg.call(null, cf__$1.call(null, x)).call(null, x)
      }finally {
        purnam.common._STAR_pure_context_STAR_ = _STAR_pure_context_STAR_17766
      }
    };
    var G__17770__2 = function() {
      var G__17771__delegate = function(x, xs) {
        var _STAR_pure_context_STAR_17767 = purnam.common._STAR_pure_context_STAR_;
        try {
          purnam.common._STAR_pure_context_STAR_ = cf__$1;
          return cljs.core.apply.call(null, cg.call(null, cljs.core.apply.call(null, cf__$1, x, xs)), x, xs)
        }finally {
          purnam.common._STAR_pure_context_STAR_ = _STAR_pure_context_STAR_17767
        }
      };
      var G__17771 = function(x, var_args) {
        var xs = null;
        if(arguments.length > 1) {
          xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
        }
        return G__17771__delegate.call(this, x, xs)
      };
      G__17771.cljs$lang$maxFixedArity = 1;
      G__17771.cljs$lang$applyTo = function(arglist__17772) {
        var x = cljs.core.first(arglist__17772);
        var xs = cljs.core.rest(arglist__17772);
        return G__17771__delegate(x, xs)
      };
      G__17771.cljs$core$IFn$_invoke$arity$variadic = G__17771__delegate;
      return G__17771
    }();
    G__17770 = function(x, var_args) {
      var xs = var_args;
      switch(arguments.length) {
        case 1:
          return G__17770__1.call(this, x);
        default:
          return G__17770__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17770.cljs$lang$maxFixedArity = 1;
    G__17770.cljs$lang$applyTo = G__17770__2.cljs$lang$applyTo;
    return G__17770
  }())
};
purnam.types.curried.CFn.prototype.purnam$protocols$Monad$bind$arity$3 = function(cf, cg, hs) {
  var cf__$1 = this;
  return purnam.types.curried.curry.call(null, 1, function() {
    var G__17773 = null;
    var G__17773__1 = function(x) {
      var _STAR_pure_context_STAR_17768 = purnam.common._STAR_pure_context_STAR_;
      try {
        purnam.common._STAR_pure_context_STAR_ = cf__$1;
        return cljs.core.apply.call(null, cg, cf__$1.call(null, x), cljs.core.map.call(null, function(p1__17764_SHARP_) {
          return p1__17764_SHARP_.call(null, x)
        }, hs)).call(null, x)
      }finally {
        purnam.common._STAR_pure_context_STAR_ = _STAR_pure_context_STAR_17768
      }
    };
    var G__17773__2 = function() {
      var G__17774__delegate = function(x, xs) {
        var _STAR_pure_context_STAR_17769 = purnam.common._STAR_pure_context_STAR_;
        try {
          purnam.common._STAR_pure_context_STAR_ = cf__$1;
          return cljs.core.apply.call(null, cljs.core.apply.call(null, cg, cljs.core.apply.call(null, cf__$1, x, xs), cljs.core.map.call(null, function(p1__17765_SHARP_) {
            return cljs.core.apply.call(null, p1__17765_SHARP_, x, xs)
          }, hs)), x, xs)
        }finally {
          purnam.common._STAR_pure_context_STAR_ = _STAR_pure_context_STAR_17769
        }
      };
      var G__17774 = function(x, var_args) {
        var xs = null;
        if(arguments.length > 1) {
          xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
        }
        return G__17774__delegate.call(this, x, xs)
      };
      G__17774.cljs$lang$maxFixedArity = 1;
      G__17774.cljs$lang$applyTo = function(arglist__17775) {
        var x = cljs.core.first(arglist__17775);
        var xs = cljs.core.rest(arglist__17775);
        return G__17774__delegate(x, xs)
      };
      G__17774.cljs$core$IFn$_invoke$arity$variadic = G__17774__delegate;
      return G__17774
    }();
    G__17773 = function(x, var_args) {
      var xs = var_args;
      switch(arguments.length) {
        case 1:
          return G__17773__1.call(this, x);
        default:
          return G__17773__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17773.cljs$lang$maxFixedArity = 1;
    G__17773.cljs$lang$applyTo = G__17773__2.cljs$lang$applyTo;
    return G__17773
  }())
};
purnam.types.curried.CFn.prototype.purnam$protocols$Monad$join$arity$1 = function(cf) {
  var cf__$1 = this;
  return purnam.protocols.bind.call(null, cf__$1, cljs.core.identity)
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll)
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("")
};
clojure.string.replace = function replace(s, match, replacement) {
  if(typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement)
  }else {
    if(cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      }else {
        return null
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement)
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll)
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll))
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase()
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase()
};
clojure.string.capitalize = function capitalize(s) {
  if(cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s)
  }else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("")
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while(true) {
    if(cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__17557 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__17557;
      continue
    }else {
      return v__$1
    }
    break
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if(cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v)
  }else {
    return v
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if(limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "")
  }else {
    var pred__17561 = cljs.core._EQ_;
    var expr__17562 = limit;
    if(pred__17561.call(null, 1, expr__17562)) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null)
    }else {
      if(pred__17561.call(null, 2, expr__17562)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null)
      }else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c))
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0)
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while(true) {
        if(cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1)
        }else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if(cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__17564 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__17565 = limit__$1 - 1;
            var G__17566 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__17564;
            limit__$1 = G__17565;
            parts = G__17566;
            continue
          }else {
            return cljs.core.conj.call(null, parts, s__$1)
          }
        }
        break
      }
    }())
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/)
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s)
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s)
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s)
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while(true) {
    if(index === 0) {
      return""
    }else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if(cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__17567 = index - 1;
        index = G__17567;
        continue
      }else {
        return s.substring(0, index)
      }
    }
    break
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s)
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while(true) {
    if(cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString()
    }else {
      var ch = s.charAt(index);
      var temp__4090__auto___17568 = cljs.core.get.call(null, cmap, ch);
      if(cljs.core.truth_(temp__4090__auto___17568)) {
        var replacement_17569 = temp__4090__auto___17568;
        buffer.append([cljs.core.str(replacement_17569)].join(""))
      }else {
        buffer.append(ch)
      }
      var G__17570 = index + 1;
      index = G__17570;
      continue
    }
    break
  }
};
goog.provide("purnam.native$");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("purnam.common");
goog.require("purnam.common");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
purnam.native$.nested_val = function nested_val(p__17236, val) {
  var vec__17240 = p__17236;
  var k = cljs.core.nth.call(null, vec__17240, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__17240, 1);
  if(k == null) {
    return val
  }else {
    var o = function() {
      var obj17242 = {};
      return obj17242
    }();
    o[k] = nested_val.call(null, ks, val);
    return o
  }
};
purnam.native$.nested_delete = function nested_delete(p__17243, val) {
  var vec__17245 = p__17243;
  var k = cljs.core.nth.call(null, vec__17245, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__17245, 1);
  if(ks == null) {
    delete val[k]
  }else {
    nested_delete.call(null, ks, val)
  }
  return val
};
purnam.native$.aset_in = function() {
  var aset_in = null;
  var aset_in__2 = function(var$, arr) {
    return aset_in.call(null, var$, arr, null)
  };
  var aset_in__3 = function(var$, arr, val) {
    var vec__17247 = arr;
    var k = cljs.core.nth.call(null, vec__17247, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__17247, 1);
    if(k == null) {
    }else {
      if(cljs.core.empty_QMARK_.call(null, ks)) {
        if(cljs.core.truth_(val)) {
          var$[k] = val
        }else {
          delete var$[k]
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var temp__4090__auto___17248 = var$[k];
          if(cljs.core.truth_(temp__4090__auto___17248)) {
            var svar_17249 = temp__4090__auto___17248;
            aset_in.call(null, svar_17249, ks, val)
          }else {
            if(cljs.core.truth_(val)) {
              var$[k] = purnam.native$.nested_val.call(null, ks, val)
            }else {
            }
          }
        }else {
        }
      }
    }
    return var$
  };
  aset_in = function(var$, arr, val) {
    switch(arguments.length) {
      case 2:
        return aset_in__2.call(this, var$, arr);
      case 3:
        return aset_in__3.call(this, var$, arr, val)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset_in.cljs$core$IFn$_invoke$arity$2 = aset_in__2;
  aset_in.cljs$core$IFn$_invoke$arity$3 = aset_in__3;
  return aset_in
}();
purnam.native$.aget_in = function() {
  var aget_in = null;
  var aget_in__1 = function(var$) {
    return var$
  };
  var aget_in__2 = function(var$, arr) {
    if(var$ == null) {
      return null
    }else {
      if(cljs.core.empty_QMARK_.call(null, arr)) {
        return var$
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return aget_in.call(null, var$[cljs.core.first.call(null, arr)], cljs.core.next.call(null, arr))
        }else {
          return null
        }
      }
    }
  };
  aget_in = function(var$, arr) {
    switch(arguments.length) {
      case 1:
        return aget_in__1.call(this, var$);
      case 2:
        return aget_in__2.call(this, var$, arr)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget_in.cljs$core$IFn$_invoke$arity$1 = aget_in__1;
  aget_in.cljs$core$IFn$_invoke$arity$2 = aget_in__2;
  return aget_in
}();
purnam.native$.js_strkey = function js_strkey(x) {
  if(typeof x === "string") {
    return x
  }else {
    if(x instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, x)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return[cljs.core.str(x)].join("")
      }else {
        return null
      }
    }
  }
};
purnam.native$.js_obj_name = function js_obj_name(this$) {
  var temp__4090__auto__ = cljs.core.re_find.call(null, /^function (\w+)/, [cljs.core.str(this$)].join(""));
  if(cljs.core.truth_(temp__4090__auto__)) {
    var vec__17251 = temp__4090__auto__;
    var _ = cljs.core.nth.call(null, vec__17251, 0, null);
    var n = cljs.core.nth.call(null, vec__17251, 1, null);
    return n
  }else {
    return"Object"
  }
};
purnam.native$.js_type = function js_type(o) {
  var ty = cljs.core.type.call(null, o);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3474__auto__ = ty;
    if(cljs.core.truth_(and__3474__auto__)) {
      return ty.cljs$lang$type
    }else {
      return and__3474__auto__
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(o);
  return ty__$1
};
purnam.native$.js_lookup = function() {
  var js_lookup = null;
  var js_lookup__2 = function(o, k) {
    return o[purnam.native$.js_strkey.call(null, k)]
  };
  var js_lookup__3 = function(o, k, not_found) {
    var s = purnam.native$.js_strkey.call(null, k);
    var temp__4090__auto__ = o[s];
    if(cljs.core.truth_(temp__4090__auto__)) {
      var res = temp__4090__auto__;
      return res
    }else {
      return not_found
    }
  };
  js_lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return js_lookup__2.call(this, o, k);
      case 3:
        return js_lookup__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_lookup.cljs$core$IFn$_invoke$arity$2 = js_lookup__2;
  js_lookup.cljs$core$IFn$_invoke$arity$3 = js_lookup__3;
  return js_lookup
}();
purnam.native$.js_range = function js_range(n) {
  var res = new Array(n);
  var i = 0;
  while(true) {
    if(i < n) {
      res.push(i);
      var G__17252 = i + 1;
      i = G__17252;
      continue
    }else {
      return res
    }
    break
  }
};
purnam.native$.js_assoc = function() {
  var js_assoc = null;
  var js_assoc__3 = function(o, k, v) {
    o[purnam.native$.js_strkey.call(null, k)] = v;
    return o
  };
  var js_assoc__4 = function() {
    var G__17253__delegate = function(o, k, v, more) {
      while(true) {
        js_assoc.call(null, o, k, v);
        if(cljs.core.truth_(more)) {
          var G__17254 = o;
          var G__17255 = cljs.core.first.call(null, more);
          var G__17256 = cljs.core.second.call(null, more);
          var G__17257 = cljs.core.nnext.call(null, more);
          o = G__17254;
          k = G__17255;
          v = G__17256;
          more = G__17257;
          continue
        }else {
          return o
        }
        break
      }
    };
    var G__17253 = function(o, k, v, var_args) {
      var more = null;
      if(arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__17253__delegate.call(this, o, k, v, more)
    };
    G__17253.cljs$lang$maxFixedArity = 3;
    G__17253.cljs$lang$applyTo = function(arglist__17258) {
      var o = cljs.core.first(arglist__17258);
      arglist__17258 = cljs.core.next(arglist__17258);
      var k = cljs.core.first(arglist__17258);
      arglist__17258 = cljs.core.next(arglist__17258);
      var v = cljs.core.first(arglist__17258);
      var more = cljs.core.rest(arglist__17258);
      return G__17253__delegate(o, k, v, more)
    };
    G__17253.cljs$core$IFn$_invoke$arity$variadic = G__17253__delegate;
    return G__17253
  }();
  js_assoc = function(o, k, v, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return js_assoc__3.call(this, o, k, v);
      default:
        return js_assoc__4.cljs$core$IFn$_invoke$arity$variadic(o, k, v, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_assoc.cljs$lang$maxFixedArity = 3;
  js_assoc.cljs$lang$applyTo = js_assoc__4.cljs$lang$applyTo;
  js_assoc.cljs$core$IFn$_invoke$arity$3 = js_assoc__3;
  js_assoc.cljs$core$IFn$_invoke$arity$variadic = js_assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return js_assoc
}();
purnam.native$.js_dissoc = function() {
  var js_dissoc__delegate = function(o, k, more) {
    while(true) {
      delete o[purnam.native$.js_strkey.call(null, k)];
      if(cljs.core.truth_(more)) {
        var G__17259 = o;
        var G__17260 = cljs.core.first.call(null, more);
        var G__17261 = cljs.core.next.call(null, more);
        o = G__17259;
        k = G__17260;
        more = G__17261;
        continue
      }else {
        return o
      }
      break
    }
  };
  var js_dissoc = function(o, k, var_args) {
    var more = null;
    if(arguments.length > 2) {
      more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return js_dissoc__delegate.call(this, o, k, more)
  };
  js_dissoc.cljs$lang$maxFixedArity = 2;
  js_dissoc.cljs$lang$applyTo = function(arglist__17262) {
    var o = cljs.core.first(arglist__17262);
    arglist__17262 = cljs.core.next(arglist__17262);
    var k = cljs.core.first(arglist__17262);
    var more = cljs.core.rest(arglist__17262);
    return js_dissoc__delegate(o, k, more)
  };
  js_dissoc.cljs$core$IFn$_invoke$arity$variadic = js_dissoc__delegate;
  return js_dissoc
}();
purnam.native$.js_empty = function js_empty(o) {
  var G__17268_17273 = goog.typeOf(o);
  if(cljs.core._EQ_.call(null, "array", G__17268_17273)) {
    o["length"] = 0
  }else {
    if(cljs.core._EQ_.call(null, "object", G__17268_17273)) {
      var seq__17269_17274 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o));
      var chunk__17270_17275 = null;
      var count__17271_17276 = 0;
      var i__17272_17277 = 0;
      while(true) {
        if(i__17272_17277 < count__17271_17276) {
          var k_17278 = cljs.core._nth.call(null, chunk__17270_17275, i__17272_17277);
          delete o[k_17278];
          var G__17279 = seq__17269_17274;
          var G__17280 = chunk__17270_17275;
          var G__17281 = count__17271_17276;
          var G__17282 = i__17272_17277 + 1;
          seq__17269_17274 = G__17279;
          chunk__17270_17275 = G__17280;
          count__17271_17276 = G__17281;
          i__17272_17277 = G__17282;
          continue
        }else {
          var temp__4092__auto___17283 = cljs.core.seq.call(null, seq__17269_17274);
          if(temp__4092__auto___17283) {
            var seq__17269_17284__$1 = temp__4092__auto___17283;
            if(cljs.core.chunked_seq_QMARK_.call(null, seq__17269_17284__$1)) {
              var c__4200__auto___17285 = cljs.core.chunk_first.call(null, seq__17269_17284__$1);
              var G__17286 = cljs.core.chunk_rest.call(null, seq__17269_17284__$1);
              var G__17287 = c__4200__auto___17285;
              var G__17288 = cljs.core.count.call(null, c__4200__auto___17285);
              var G__17289 = 0;
              seq__17269_17274 = G__17286;
              chunk__17270_17275 = G__17287;
              count__17271_17276 = G__17288;
              i__17272_17277 = G__17289;
              continue
            }else {
              var k_17290 = cljs.core.first.call(null, seq__17269_17284__$1);
              delete o[k_17290];
              var G__17291 = cljs.core.next.call(null, seq__17269_17284__$1);
              var G__17292 = null;
              var G__17293 = 0;
              var G__17294 = 0;
              seq__17269_17274 = G__17291;
              chunk__17270_17275 = G__17292;
              count__17271_17276 = G__17293;
              i__17272_17277 = G__17294;
              continue
            }
          }else {
          }
        }
        break
      }
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(goog.typeOf(o))].join(""));
      }else {
      }
    }
  }
  return o
};
purnam.native$.js_merge = function() {
  var js_merge = null;
  var js_merge__2 = function(o1, o2) {
    var seq__17299_17303 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o2));
    var chunk__17300_17304 = null;
    var count__17301_17305 = 0;
    var i__17302_17306 = 0;
    while(true) {
      if(i__17302_17306 < count__17301_17305) {
        var k_17307 = cljs.core._nth.call(null, chunk__17300_17304, i__17302_17306);
        o1[k_17307] = o2[k_17307];
        var G__17308 = seq__17299_17303;
        var G__17309 = chunk__17300_17304;
        var G__17310 = count__17301_17305;
        var G__17311 = i__17302_17306 + 1;
        seq__17299_17303 = G__17308;
        chunk__17300_17304 = G__17309;
        count__17301_17305 = G__17310;
        i__17302_17306 = G__17311;
        continue
      }else {
        var temp__4092__auto___17312 = cljs.core.seq.call(null, seq__17299_17303);
        if(temp__4092__auto___17312) {
          var seq__17299_17313__$1 = temp__4092__auto___17312;
          if(cljs.core.chunked_seq_QMARK_.call(null, seq__17299_17313__$1)) {
            var c__4200__auto___17314 = cljs.core.chunk_first.call(null, seq__17299_17313__$1);
            var G__17315 = cljs.core.chunk_rest.call(null, seq__17299_17313__$1);
            var G__17316 = c__4200__auto___17314;
            var G__17317 = cljs.core.count.call(null, c__4200__auto___17314);
            var G__17318 = 0;
            seq__17299_17303 = G__17315;
            chunk__17300_17304 = G__17316;
            count__17301_17305 = G__17317;
            i__17302_17306 = G__17318;
            continue
          }else {
            var k_17319 = cljs.core.first.call(null, seq__17299_17313__$1);
            o1[k_17319] = o2[k_17319];
            var G__17320 = cljs.core.next.call(null, seq__17299_17313__$1);
            var G__17321 = null;
            var G__17322 = 0;
            var G__17323 = 0;
            seq__17299_17303 = G__17320;
            chunk__17300_17304 = G__17321;
            count__17301_17305 = G__17322;
            i__17302_17306 = G__17323;
            continue
          }
        }else {
        }
      }
      break
    }
    return o1
  };
  var js_merge__3 = function() {
    var G__17324__delegate = function(o1, o2, more) {
      return cljs.core.apply.call(null, js_merge, js_merge.call(null, o1, o2), more)
    };
    var G__17324 = function(o1, o2, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__17324__delegate.call(this, o1, o2, more)
    };
    G__17324.cljs$lang$maxFixedArity = 2;
    G__17324.cljs$lang$applyTo = function(arglist__17325) {
      var o1 = cljs.core.first(arglist__17325);
      arglist__17325 = cljs.core.next(arglist__17325);
      var o2 = cljs.core.first(arglist__17325);
      var more = cljs.core.rest(arglist__17325);
      return G__17324__delegate(o1, o2, more)
    };
    G__17324.cljs$core$IFn$_invoke$arity$variadic = G__17324__delegate;
    return G__17324
  }();
  js_merge = function(o1, o2, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return js_merge__2.call(this, o1, o2);
      default:
        return js_merge__3.cljs$core$IFn$_invoke$arity$variadic(o1, o2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_merge.cljs$lang$maxFixedArity = 2;
  js_merge.cljs$lang$applyTo = js_merge__3.cljs$lang$applyTo;
  js_merge.cljs$core$IFn$_invoke$arity$2 = js_merge__2;
  js_merge.cljs$core$IFn$_invoke$arity$variadic = js_merge__3.cljs$core$IFn$_invoke$arity$variadic;
  return js_merge
}();
purnam.native$.js_merge_nil = function() {
  var js_merge_nil = null;
  var js_merge_nil__2 = function(o1, o2) {
    var seq__17330_17334 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o2));
    var chunk__17331_17335 = null;
    var count__17332_17336 = 0;
    var i__17333_17337 = 0;
    while(true) {
      if(i__17333_17337 < count__17332_17336) {
        var k_17338 = cljs.core._nth.call(null, chunk__17331_17335, i__17333_17337);
        if(cljs.core.not.call(null, o1[k_17338])) {
          o1[k_17338] = o2[k_17338]
        }else {
        }
        var G__17339 = seq__17330_17334;
        var G__17340 = chunk__17331_17335;
        var G__17341 = count__17332_17336;
        var G__17342 = i__17333_17337 + 1;
        seq__17330_17334 = G__17339;
        chunk__17331_17335 = G__17340;
        count__17332_17336 = G__17341;
        i__17333_17337 = G__17342;
        continue
      }else {
        var temp__4092__auto___17343 = cljs.core.seq.call(null, seq__17330_17334);
        if(temp__4092__auto___17343) {
          var seq__17330_17344__$1 = temp__4092__auto___17343;
          if(cljs.core.chunked_seq_QMARK_.call(null, seq__17330_17344__$1)) {
            var c__4200__auto___17345 = cljs.core.chunk_first.call(null, seq__17330_17344__$1);
            var G__17346 = cljs.core.chunk_rest.call(null, seq__17330_17344__$1);
            var G__17347 = c__4200__auto___17345;
            var G__17348 = cljs.core.count.call(null, c__4200__auto___17345);
            var G__17349 = 0;
            seq__17330_17334 = G__17346;
            chunk__17331_17335 = G__17347;
            count__17332_17336 = G__17348;
            i__17333_17337 = G__17349;
            continue
          }else {
            var k_17350 = cljs.core.first.call(null, seq__17330_17344__$1);
            if(cljs.core.not.call(null, o1[k_17350])) {
              o1[k_17350] = o2[k_17350]
            }else {
            }
            var G__17351 = cljs.core.next.call(null, seq__17330_17344__$1);
            var G__17352 = null;
            var G__17353 = 0;
            var G__17354 = 0;
            seq__17330_17334 = G__17351;
            chunk__17331_17335 = G__17352;
            count__17332_17336 = G__17353;
            i__17333_17337 = G__17354;
            continue
          }
        }else {
        }
      }
      break
    }
    return o1
  };
  var js_merge_nil__3 = function() {
    var G__17355__delegate = function(o1, o2, more) {
      while(true) {
        js_merge_nil.call(null, o1, o2);
        if(cljs.core.truth_(more)) {
          var G__17356 = js_merge_nil.call(null, o1, o2);
          var G__17357 = cljs.core.first.call(null, more);
          var G__17358 = cljs.core.next.call(null, more);
          o1 = G__17356;
          o2 = G__17357;
          more = G__17358;
          continue
        }else {
          return o1
        }
        break
      }
    };
    var G__17355 = function(o1, o2, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__17355__delegate.call(this, o1, o2, more)
    };
    G__17355.cljs$lang$maxFixedArity = 2;
    G__17355.cljs$lang$applyTo = function(arglist__17359) {
      var o1 = cljs.core.first(arglist__17359);
      arglist__17359 = cljs.core.next(arglist__17359);
      var o2 = cljs.core.first(arglist__17359);
      var more = cljs.core.rest(arglist__17359);
      return G__17355__delegate(o1, o2, more)
    };
    G__17355.cljs$core$IFn$_invoke$arity$variadic = G__17355__delegate;
    return G__17355
  }();
  js_merge_nil = function(o1, o2, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return js_merge_nil__2.call(this, o1, o2);
      default:
        return js_merge_nil__3.cljs$core$IFn$_invoke$arity$variadic(o1, o2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_merge_nil.cljs$lang$maxFixedArity = 2;
  js_merge_nil.cljs$lang$applyTo = js_merge_nil__3.cljs$lang$applyTo;
  js_merge_nil.cljs$core$IFn$_invoke$arity$2 = js_merge_nil__2;
  js_merge_nil.cljs$core$IFn$_invoke$arity$variadic = js_merge_nil__3.cljs$core$IFn$_invoke$arity$variadic;
  return js_merge_nil
}();
purnam.native$.js_replace = function js_replace(o1, o2) {
  purnam.native$.js_empty.call(null, o1);
  return purnam.native$.js_merge.call(null, o1, o2)
};
purnam.native$.js_equals = function js_equals(v1, v2) {
  if(cljs.core._EQ_.call(null, v1, v2)) {
    return true
  }else {
    var t1 = goog.typeOf(v1);
    var t2 = goog.typeOf(v2);
    if(cljs.core._EQ_.call(null, "array", t1, t2)) {
      return goog.array.equals(v1, v2, js_equals)
    }else {
      if(cljs.core._EQ_.call(null, "object", t1, t2)) {
        var ks1 = cljs.core.js_keys.call(null, v1).sort();
        var ks2 = cljs.core.js_keys.call(null, v2).sort();
        if(cljs.core.truth_(goog.array.equals(ks1, ks2))) {
          return goog.array.every(ks1, function(k) {
            return js_equals.call(null, v1[k], v2[k])
          })
        }else {
          return false
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false
        }else {
          return null
        }
      }
    }
  }
};
purnam.native$.js_copy = function js_copy(o) {
  return goog.object.clone(o)
};
purnam.native$.js_initial_value = function js_initial_value(v) {
  var t = goog.typeOf(v);
  if(cljs.core._EQ_.call(null, t, "object")) {
    var obj17363 = {};
    return obj17363
  }else {
    if(cljs.core._EQ_.call(null, t, "array")) {
      return[]
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return v
      }else {
        return null
      }
    }
  }
};
purnam.native$.js_deep_extend = function() {
  var js_deep_extend = null;
  var js_deep_extend__2 = function(to, from) {
    var visited = [from];
    var visitedlu = [to];
    js_deep_extend.call(null, to, from, visited, visitedlu);
    return to
  };
  var js_deep_extend__4 = function(to, from, visited, visitedlu) {
    var seq__17368_17372 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, from));
    var chunk__17369_17373 = null;
    var count__17370_17374 = 0;
    var i__17371_17375 = 0;
    while(true) {
      if(i__17371_17375 < count__17370_17374) {
        var k_17376 = cljs.core._nth.call(null, chunk__17369_17373, i__17371_17375);
        var v_17377 = from[k_17376];
        var vn_17378 = purnam.native$.js_initial_value.call(null, v_17377);
        if(cljs.core.not_EQ_.call(null, v_17377, vn_17378)) {
          var i_17379 = visited.indexOf(v_17377);
          if(cljs.core._EQ_.call(null, -1, i_17379)) {
            visited.push(v_17377);
            visitedlu.push(vn_17378);
            js_deep_extend.call(null, vn_17378, v_17377, visited, visitedlu);
            to[k_17376] = vn_17378
          }else {
            to[k_17376] = visitedlu[i_17379]
          }
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            to[k_17376] = v_17377
          }else {
          }
        }
        var G__17380 = seq__17368_17372;
        var G__17381 = chunk__17369_17373;
        var G__17382 = count__17370_17374;
        var G__17383 = i__17371_17375 + 1;
        seq__17368_17372 = G__17380;
        chunk__17369_17373 = G__17381;
        count__17370_17374 = G__17382;
        i__17371_17375 = G__17383;
        continue
      }else {
        var temp__4092__auto___17384 = cljs.core.seq.call(null, seq__17368_17372);
        if(temp__4092__auto___17384) {
          var seq__17368_17385__$1 = temp__4092__auto___17384;
          if(cljs.core.chunked_seq_QMARK_.call(null, seq__17368_17385__$1)) {
            var c__4200__auto___17386 = cljs.core.chunk_first.call(null, seq__17368_17385__$1);
            var G__17387 = cljs.core.chunk_rest.call(null, seq__17368_17385__$1);
            var G__17388 = c__4200__auto___17386;
            var G__17389 = cljs.core.count.call(null, c__4200__auto___17386);
            var G__17390 = 0;
            seq__17368_17372 = G__17387;
            chunk__17369_17373 = G__17388;
            count__17370_17374 = G__17389;
            i__17371_17375 = G__17390;
            continue
          }else {
            var k_17391 = cljs.core.first.call(null, seq__17368_17385__$1);
            var v_17392 = from[k_17391];
            var vn_17393 = purnam.native$.js_initial_value.call(null, v_17392);
            if(cljs.core.not_EQ_.call(null, v_17392, vn_17393)) {
              var i_17394 = visited.indexOf(v_17392);
              if(cljs.core._EQ_.call(null, -1, i_17394)) {
                visited.push(v_17392);
                visitedlu.push(vn_17393);
                js_deep_extend.call(null, vn_17393, v_17392, visited, visitedlu);
                to[k_17391] = vn_17393
              }else {
                to[k_17391] = visitedlu[i_17394]
              }
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                to[k_17391] = v_17392
              }else {
              }
            }
            var G__17395 = cljs.core.next.call(null, seq__17368_17385__$1);
            var G__17396 = null;
            var G__17397 = 0;
            var G__17398 = 0;
            seq__17368_17372 = G__17395;
            chunk__17369_17373 = G__17396;
            count__17370_17374 = G__17397;
            i__17371_17375 = G__17398;
            continue
          }
        }else {
        }
      }
      break
    }
    return to
  };
  js_deep_extend = function(to, from, visited, visitedlu) {
    switch(arguments.length) {
      case 2:
        return js_deep_extend__2.call(this, to, from);
      case 4:
        return js_deep_extend__4.call(this, to, from, visited, visitedlu)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_deep_extend.cljs$core$IFn$_invoke$arity$2 = js_deep_extend__2;
  js_deep_extend.cljs$core$IFn$_invoke$arity$4 = js_deep_extend__4;
  return js_deep_extend
}();
purnam.native$.js_deep_copy = function js_deep_copy(value) {
  var vn = purnam.native$.js_initial_value.call(null, value);
  if(cljs.core.not_EQ_.call(null, value, vn)) {
    return purnam.native$.js_deep_extend.call(null, vn, value)
  }else {
    return value
  }
};
purnam.native$.js_deep_replace = function js_deep_replace(o1, o2) {
  purnam.native$.js_empty.call(null, o1);
  return purnam.native$.js_deep_extend.call(null, o1, o2)
};
purnam.native$.js_map_STAR_ = function() {
  var js_map_STAR___delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return ar.length
      }
    }(output), args));
    var seq__17404_17408 = cljs.core.seq.call(null, cljs.core.range.call(null, len));
    var chunk__17405_17409 = null;
    var count__17406_17410 = 0;
    var i__17407_17411 = 0;
    while(true) {
      if(i__17407_17411 < count__17406_17410) {
        var i_17412 = cljs.core._nth.call(null, chunk__17405_17409, i__17407_17411);
        output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__17404_17408, chunk__17405_17409, count__17406_17410, i__17407_17411, i_17412) {
          return function(p1__17399_SHARP_) {
            return p1__17399_SHARP_[i_17412]
          }
        }(seq__17404_17408, chunk__17405_17409, count__17406_17410, i__17407_17411, i_17412), args)));
        var G__17413 = seq__17404_17408;
        var G__17414 = chunk__17405_17409;
        var G__17415 = count__17406_17410;
        var G__17416 = i__17407_17411 + 1;
        seq__17404_17408 = G__17413;
        chunk__17405_17409 = G__17414;
        count__17406_17410 = G__17415;
        i__17407_17411 = G__17416;
        continue
      }else {
        var temp__4092__auto___17417 = cljs.core.seq.call(null, seq__17404_17408);
        if(temp__4092__auto___17417) {
          var seq__17404_17418__$1 = temp__4092__auto___17417;
          if(cljs.core.chunked_seq_QMARK_.call(null, seq__17404_17418__$1)) {
            var c__4200__auto___17419 = cljs.core.chunk_first.call(null, seq__17404_17418__$1);
            var G__17420 = cljs.core.chunk_rest.call(null, seq__17404_17418__$1);
            var G__17421 = c__4200__auto___17419;
            var G__17422 = cljs.core.count.call(null, c__4200__auto___17419);
            var G__17423 = 0;
            seq__17404_17408 = G__17420;
            chunk__17405_17409 = G__17421;
            count__17406_17410 = G__17422;
            i__17407_17411 = G__17423;
            continue
          }else {
            var i_17424 = cljs.core.first.call(null, seq__17404_17418__$1);
            output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__17404_17408, chunk__17405_17409, count__17406_17410, i__17407_17411, i_17424, seq__17404_17418__$1, temp__4092__auto___17417) {
              return function(p1__17399_SHARP_) {
                return p1__17399_SHARP_[i_17424]
              }
            }(seq__17404_17408, chunk__17405_17409, count__17406_17410, i__17407_17411, i_17424, seq__17404_17418__$1, temp__4092__auto___17417), args)));
            var G__17425 = cljs.core.next.call(null, seq__17404_17418__$1);
            var G__17426 = null;
            var G__17427 = 0;
            var G__17428 = 0;
            seq__17404_17408 = G__17425;
            chunk__17405_17409 = G__17426;
            count__17406_17410 = G__17427;
            i__17407_17411 = G__17428;
            continue
          }
        }else {
        }
      }
      break
    }
    return output
  };
  var js_map_STAR_ = function(f, var_args) {
    var args = null;
    if(arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return js_map_STAR___delegate.call(this, f, args)
  };
  js_map_STAR_.cljs$lang$maxFixedArity = 1;
  js_map_STAR_.cljs$lang$applyTo = function(arglist__17429) {
    var f = cljs.core.first(arglist__17429);
    var args = cljs.core.rest(arglist__17429);
    return js_map_STAR___delegate(f, args)
  };
  js_map_STAR_.cljs$core$IFn$_invoke$arity$variadic = js_map_STAR___delegate;
  return js_map_STAR_
}();
purnam.native$.js_mapcat_STAR_ = function() {
  var js_mapcat_STAR___delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return ar.length
      }
    }(output), args));
    var i = 0;
    var output__$1 = output;
    while(true) {
      if(i < len) {
        var res = cljs.core.apply.call(null, f, cljs.core.map.call(null, function(i, output__$1) {
          return function(p1__17430_SHARP_) {
            return p1__17430_SHARP_[i]
          }
        }(i, output__$1), args));
        var G__17431 = i + 1;
        var G__17432 = output__$1.concat(res);
        i = G__17431;
        output__$1 = G__17432;
        continue
      }else {
        return output__$1
      }
      break
    }
  };
  var js_mapcat_STAR_ = function(f, var_args) {
    var args = null;
    if(arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return js_mapcat_STAR___delegate.call(this, f, args)
  };
  js_mapcat_STAR_.cljs$lang$maxFixedArity = 1;
  js_mapcat_STAR_.cljs$lang$applyTo = function(arglist__17433) {
    var f = cljs.core.first(arglist__17433);
    var args = cljs.core.rest(arglist__17433);
    return js_mapcat_STAR___delegate(f, args)
  };
  js_mapcat_STAR_.cljs$core$IFn$_invoke$arity$variadic = js_mapcat_STAR___delegate;
  return js_mapcat_STAR_
}();
purnam.native$.js_map = function() {
  var js_map__delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return cljs.core.count.call(null, ar)
      }
    }(output), args));
    var seq__17439_17443 = cljs.core.seq.call(null, cljs.core.range.call(null, len));
    var chunk__17440_17444 = null;
    var count__17441_17445 = 0;
    var i__17442_17446 = 0;
    while(true) {
      if(i__17442_17446 < count__17441_17445) {
        var i_17447 = cljs.core._nth.call(null, chunk__17440_17444, i__17442_17446);
        output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__17439_17443, chunk__17440_17444, count__17441_17445, i__17442_17446, i_17447) {
          return function(p1__17434_SHARP_) {
            return cljs.core.nth.call(null, p1__17434_SHARP_, i_17447)
          }
        }(seq__17439_17443, chunk__17440_17444, count__17441_17445, i__17442_17446, i_17447), args)));
        var G__17448 = seq__17439_17443;
        var G__17449 = chunk__17440_17444;
        var G__17450 = count__17441_17445;
        var G__17451 = i__17442_17446 + 1;
        seq__17439_17443 = G__17448;
        chunk__17440_17444 = G__17449;
        count__17441_17445 = G__17450;
        i__17442_17446 = G__17451;
        continue
      }else {
        var temp__4092__auto___17452 = cljs.core.seq.call(null, seq__17439_17443);
        if(temp__4092__auto___17452) {
          var seq__17439_17453__$1 = temp__4092__auto___17452;
          if(cljs.core.chunked_seq_QMARK_.call(null, seq__17439_17453__$1)) {
            var c__4200__auto___17454 = cljs.core.chunk_first.call(null, seq__17439_17453__$1);
            var G__17455 = cljs.core.chunk_rest.call(null, seq__17439_17453__$1);
            var G__17456 = c__4200__auto___17454;
            var G__17457 = cljs.core.count.call(null, c__4200__auto___17454);
            var G__17458 = 0;
            seq__17439_17443 = G__17455;
            chunk__17440_17444 = G__17456;
            count__17441_17445 = G__17457;
            i__17442_17446 = G__17458;
            continue
          }else {
            var i_17459 = cljs.core.first.call(null, seq__17439_17453__$1);
            output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__17439_17443, chunk__17440_17444, count__17441_17445, i__17442_17446, i_17459, seq__17439_17453__$1, temp__4092__auto___17452) {
              return function(p1__17434_SHARP_) {
                return cljs.core.nth.call(null, p1__17434_SHARP_, i_17459)
              }
            }(seq__17439_17443, chunk__17440_17444, count__17441_17445, i__17442_17446, i_17459, seq__17439_17453__$1, temp__4092__auto___17452), args)));
            var G__17460 = cljs.core.next.call(null, seq__17439_17453__$1);
            var G__17461 = null;
            var G__17462 = 0;
            var G__17463 = 0;
            seq__17439_17443 = G__17460;
            chunk__17440_17444 = G__17461;
            count__17441_17445 = G__17462;
            i__17442_17446 = G__17463;
            continue
          }
        }else {
        }
      }
      break
    }
    return output
  };
  var js_map = function(f, var_args) {
    var args = null;
    if(arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return js_map__delegate.call(this, f, args)
  };
  js_map.cljs$lang$maxFixedArity = 1;
  js_map.cljs$lang$applyTo = function(arglist__17464) {
    var f = cljs.core.first(arglist__17464);
    var args = cljs.core.rest(arglist__17464);
    return js_map__delegate(f, args)
  };
  js_map.cljs$core$IFn$_invoke$arity$variadic = js_map__delegate;
  return js_map
}();
purnam.native$.js_mapcat = function() {
  var js_mapcat__delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return cljs.core.count.call(null, ar)
      }
    }(output), args));
    var i = 0;
    var output__$1 = output;
    while(true) {
      if(i < len) {
        var res = cljs.core.apply.call(null, f, cljs.core.map.call(null, function(i, output__$1) {
          return function(p1__17465_SHARP_) {
            return cljs.core.nth.call(null, p1__17465_SHARP_, i)
          }
        }(i, output__$1), args));
        var G__17466 = i + 1;
        var G__17467 = output__$1.concat(res);
        i = G__17466;
        output__$1 = G__17467;
        continue
      }else {
        return output__$1
      }
      break
    }
  };
  var js_mapcat = function(f, var_args) {
    var args = null;
    if(arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return js_mapcat__delegate.call(this, f, args)
  };
  js_mapcat.cljs$lang$maxFixedArity = 1;
  js_mapcat.cljs$lang$applyTo = function(arglist__17468) {
    var f = cljs.core.first(arglist__17468);
    var args = cljs.core.rest(arglist__17468);
    return js_mapcat__delegate(f, args)
  };
  js_mapcat.cljs$core$IFn$_invoke$arity$variadic = js_mapcat__delegate;
  return js_mapcat
}();
purnam.native$.js_concat = function() {
  var js_concat__delegate = function(args) {
    var output = [];
    var seq__17481_17493 = cljs.core.seq.call(null, args);
    var chunk__17486_17494 = null;
    var count__17487_17495 = 0;
    var i__17488_17496 = 0;
    while(true) {
      if(i__17488_17496 < count__17487_17495) {
        var ar_17497 = cljs.core._nth.call(null, chunk__17486_17494, i__17488_17496);
        var seq__17489_17498 = cljs.core.seq.call(null, ar_17497);
        var chunk__17490_17499 = null;
        var count__17491_17500 = 0;
        var i__17492_17501 = 0;
        while(true) {
          if(i__17492_17501 < count__17491_17500) {
            var v_17502 = cljs.core._nth.call(null, chunk__17490_17499, i__17492_17501);
            output.push(v_17502);
            var G__17503 = seq__17489_17498;
            var G__17504 = chunk__17490_17499;
            var G__17505 = count__17491_17500;
            var G__17506 = i__17492_17501 + 1;
            seq__17489_17498 = G__17503;
            chunk__17490_17499 = G__17504;
            count__17491_17500 = G__17505;
            i__17492_17501 = G__17506;
            continue
          }else {
            var temp__4092__auto___17507 = cljs.core.seq.call(null, seq__17489_17498);
            if(temp__4092__auto___17507) {
              var seq__17489_17508__$1 = temp__4092__auto___17507;
              if(cljs.core.chunked_seq_QMARK_.call(null, seq__17489_17508__$1)) {
                var c__4200__auto___17509 = cljs.core.chunk_first.call(null, seq__17489_17508__$1);
                var G__17510 = cljs.core.chunk_rest.call(null, seq__17489_17508__$1);
                var G__17511 = c__4200__auto___17509;
                var G__17512 = cljs.core.count.call(null, c__4200__auto___17509);
                var G__17513 = 0;
                seq__17489_17498 = G__17510;
                chunk__17490_17499 = G__17511;
                count__17491_17500 = G__17512;
                i__17492_17501 = G__17513;
                continue
              }else {
                var v_17514 = cljs.core.first.call(null, seq__17489_17508__$1);
                output.push(v_17514);
                var G__17515 = cljs.core.next.call(null, seq__17489_17508__$1);
                var G__17516 = null;
                var G__17517 = 0;
                var G__17518 = 0;
                seq__17489_17498 = G__17515;
                chunk__17490_17499 = G__17516;
                count__17491_17500 = G__17517;
                i__17492_17501 = G__17518;
                continue
              }
            }else {
            }
          }
          break
        }
        var G__17519 = seq__17481_17493;
        var G__17520 = chunk__17486_17494;
        var G__17521 = count__17487_17495;
        var G__17522 = i__17488_17496 + 1;
        seq__17481_17493 = G__17519;
        chunk__17486_17494 = G__17520;
        count__17487_17495 = G__17521;
        i__17488_17496 = G__17522;
        continue
      }else {
        var temp__4092__auto___17523 = cljs.core.seq.call(null, seq__17481_17493);
        if(temp__4092__auto___17523) {
          var seq__17481_17524__$1 = temp__4092__auto___17523;
          if(cljs.core.chunked_seq_QMARK_.call(null, seq__17481_17524__$1)) {
            var c__4200__auto___17525 = cljs.core.chunk_first.call(null, seq__17481_17524__$1);
            var G__17526 = cljs.core.chunk_rest.call(null, seq__17481_17524__$1);
            var G__17527 = c__4200__auto___17525;
            var G__17528 = cljs.core.count.call(null, c__4200__auto___17525);
            var G__17529 = 0;
            seq__17481_17493 = G__17526;
            chunk__17486_17494 = G__17527;
            count__17487_17495 = G__17528;
            i__17488_17496 = G__17529;
            continue
          }else {
            var ar_17530 = cljs.core.first.call(null, seq__17481_17524__$1);
            var seq__17482_17531 = cljs.core.seq.call(null, ar_17530);
            var chunk__17483_17532 = null;
            var count__17484_17533 = 0;
            var i__17485_17534 = 0;
            while(true) {
              if(i__17485_17534 < count__17484_17533) {
                var v_17535 = cljs.core._nth.call(null, chunk__17483_17532, i__17485_17534);
                output.push(v_17535);
                var G__17536 = seq__17482_17531;
                var G__17537 = chunk__17483_17532;
                var G__17538 = count__17484_17533;
                var G__17539 = i__17485_17534 + 1;
                seq__17482_17531 = G__17536;
                chunk__17483_17532 = G__17537;
                count__17484_17533 = G__17538;
                i__17485_17534 = G__17539;
                continue
              }else {
                var temp__4092__auto___17540__$1 = cljs.core.seq.call(null, seq__17482_17531);
                if(temp__4092__auto___17540__$1) {
                  var seq__17482_17541__$1 = temp__4092__auto___17540__$1;
                  if(cljs.core.chunked_seq_QMARK_.call(null, seq__17482_17541__$1)) {
                    var c__4200__auto___17542 = cljs.core.chunk_first.call(null, seq__17482_17541__$1);
                    var G__17543 = cljs.core.chunk_rest.call(null, seq__17482_17541__$1);
                    var G__17544 = c__4200__auto___17542;
                    var G__17545 = cljs.core.count.call(null, c__4200__auto___17542);
                    var G__17546 = 0;
                    seq__17482_17531 = G__17543;
                    chunk__17483_17532 = G__17544;
                    count__17484_17533 = G__17545;
                    i__17485_17534 = G__17546;
                    continue
                  }else {
                    var v_17547 = cljs.core.first.call(null, seq__17482_17541__$1);
                    output.push(v_17547);
                    var G__17548 = cljs.core.next.call(null, seq__17482_17541__$1);
                    var G__17549 = null;
                    var G__17550 = 0;
                    var G__17551 = 0;
                    seq__17482_17531 = G__17548;
                    chunk__17483_17532 = G__17549;
                    count__17484_17533 = G__17550;
                    i__17485_17534 = G__17551;
                    continue
                  }
                }else {
                }
              }
              break
            }
            var G__17552 = cljs.core.next.call(null, seq__17481_17524__$1);
            var G__17553 = null;
            var G__17554 = 0;
            var G__17555 = 0;
            seq__17481_17493 = G__17552;
            chunk__17486_17494 = G__17553;
            count__17487_17495 = G__17554;
            i__17488_17496 = G__17555;
            continue
          }
        }else {
        }
      }
      break
    }
    return output
  };
  var js_concat = function(var_args) {
    var args = null;
    if(arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return js_concat__delegate.call(this, args)
  };
  js_concat.cljs$lang$maxFixedArity = 0;
  js_concat.cljs$lang$applyTo = function(arglist__17556) {
    var args = cljs.core.seq(arglist__17556);
    return js_concat__delegate(args)
  };
  js_concat.cljs$core$IFn$_invoke$arity$variadic = js_concat__delegate;
  return js_concat
}();
purnam.native$.js_LT__ = function js_LT__(obj) {
  return cljs.core.clj__GT_js.call(null, obj)
};
purnam.native$.log = function() {
  var log = null;
  var log__1 = function(x) {
    if(cljs.core.coll_QMARK_.call(null, x)) {
      console.log([cljs.core.str(x)].join(""), x)
    }else {
      console.log([cljs.core.str(x)].join(""))
    }
    return x
  };
  var log__2 = function(x, y) {
    if(cljs.core.coll_QMARK_.call(null, x)) {
      console.log([cljs.core.str(x), cljs.core.str(":")].join(""), [cljs.core.str(y)].join(""), y)
    }else {
      console.log([cljs.core.str(x), cljs.core.str(":")].join(""), [cljs.core.str(y)].join(""))
    }
    return y
  };
  log = function(x, y) {
    switch(arguments.length) {
      case 1:
        return log__1.call(this, x);
      case 2:
        return log__2.call(this, x, y)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  log.cljs$core$IFn$_invoke$arity$1 = log__1;
  log.cljs$core$IFn$_invoke$arity$2 = log__2;
  return log
}();
purnam.native$.augment_fn_string = function augment_fn_string(func) {
  if(typeof func === "string") {
    return function(x) {
      return purnam.native$.aget_in.call(null, x, clojure.string.split.call(null, func, /\./))
    }
  }else {
    return func
  }
};
purnam.native$.check_fn = function() {
  var check_fn = null;
  var check_fn__1 = function(chk) {
    return function(x) {
      if(cljs.core.fn_QMARK_.call(null, chk)) {
        return chk.call(null, x)
      }else {
        return cljs.core._EQ_.call(null, x, chk)
      }
    }
  };
  var check_fn__2 = function(func, chk) {
    return function(x) {
      var res = func.call(null, x);
      if(cljs.core.fn_QMARK_.call(null, chk)) {
        return chk.call(null, res)
      }else {
        return cljs.core._EQ_.call(null, res, chk)
      }
    }
  };
  check_fn = function(func, chk) {
    switch(arguments.length) {
      case 1:
        return check_fn__1.call(this, func);
      case 2:
        return check_fn__2.call(this, func, chk)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  check_fn.cljs$core$IFn$_invoke$arity$1 = check_fn__1;
  check_fn.cljs$core$IFn$_invoke$arity$2 = check_fn__2;
  return check_fn
}();
goog.provide("purnam.types.clojure");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("purnam.native$");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
purnam.types.clojure.obj_only = function obj_only(o, method) {
  if(cljs.core.type.call(null, o) === Object) {
    return null
  }else {
    throw new TypeError([cljs.core.str(purnam.native$.js_type.call(null, o)), cljs.core.str(" does not implement '"), cljs.core.str(cljs.core.name.call(null, method)), cljs.core.str("'")].join(""));
  }
};
cljs.core.ISeqable["object"] = true;
cljs.core._seq["object"] = function(o) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "seq", "seq", 1014018001));
  return cljs.core.map.call(null, function(k) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, o, k)], null)
  }, cljs.core.js_keys.call(null, o))
};
cljs.core.ICounted["array"] = true;
cljs.core._count["array"] = function(a) {
  return a.length
};
cljs.core.ICounted["object"] = true;
cljs.core._count["object"] = function(o) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "count", "count", 1108755585));
  return cljs.core.js_keys.call(null, o).length
};
cljs.core.ILookup["array"] = true;
cljs.core._lookup["array"] = function() {
  var G__17698 = null;
  var G__17698__2 = function(a, k) {
    return purnam.native$.js_lookup.call(null, a, k)
  };
  var G__17698__3 = function(a, k, not_found) {
    return purnam.native$.js_lookup.call(null, a, k, not_found)
  };
  G__17698 = function(a, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17698__2.call(this, a, k);
      case 3:
        return G__17698__3.call(this, a, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17698
}();
cljs.core.ILookup["object"] = true;
cljs.core._lookup["object"] = function() {
  var G__17699 = null;
  var G__17699__2 = function(o, k) {
    return purnam.native$.js_lookup.call(null, o, k)
  };
  var G__17699__3 = function(o, k, not_found) {
    return purnam.native$.js_lookup.call(null, o, k, not_found)
  };
  G__17699 = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17699__2.call(this, o, k);
      case 3:
        return G__17699__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17699
}();
cljs.core.ITransientAssociative["array"] = true;
cljs.core._assoc_BANG_["array"] = function(o, i, v) {
  return purnam.native$.js_assoc.call(null, o, i, v)
};
cljs.core.ITransientAssociative["object"] = true;
cljs.core._assoc_BANG_["object"] = function(o, k, v) {
  return purnam.native$.js_assoc.call(null, o, k, v)
};
cljs.core.ITransientCollection["array"] = true;
cljs.core._conj_BANG_["array"] = function(a, v) {
  a.push(v);
  return a
};
cljs.core._persistent_BANG_["array"] = function(a) {
  return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, a)
};
cljs.core.ITransientCollection["object"] = true;
cljs.core._conj_BANG_["object"] = function(o, p__17700) {
  var vec__17701 = p__17700;
  var k = cljs.core.nth.call(null, vec__17701, 0, null);
  var v = cljs.core.nth.call(null, vec__17701, 1, null);
  return purnam.native$.js_assoc.call(null, o, k, v)
};
cljs.core._persistent_BANG_["object"] = function(o) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "persistent!", "persistent!", 4015339484));
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__17702) {
    var vec__17703 = p__17702;
    var k = cljs.core.nth.call(null, vec__17703, 0, null);
    var v = cljs.core.nth.call(null, vec__17703, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null)
  }, o))
};
cljs.core.IEmptyableCollection["array"] = true;
cljs.core._empty["array"] = function(a) {
  return[]
};
cljs.core.IEmptyableCollection["object"] = true;
cljs.core._empty["object"] = function(o) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "empty", "empty", 1110538431));
  var obj17705 = {};
  return obj17705
};
cljs.core.IAssociative["array"] = true;
cljs.core._assoc["array"] = function() {
  var G__17706__delegate = function(o, more) {
    return purnam.native$.js_copy_assoc.call(null, o, more)
  };
  var G__17706 = function(o, var_args) {
    var more = null;
    if(arguments.length > 1) {
      more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return G__17706__delegate.call(this, o, more)
  };
  G__17706.cljs$lang$maxFixedArity = 1;
  G__17706.cljs$lang$applyTo = function(arglist__17707) {
    var o = cljs.core.first(arglist__17707);
    var more = cljs.core.rest(arglist__17707);
    return G__17706__delegate(o, more)
  };
  G__17706.cljs$core$IFn$_invoke$arity$variadic = G__17706__delegate;
  return G__17706
}();
cljs.core.IAssociative["object"] = true;
cljs.core._assoc["object"] = function() {
  var G__17708__delegate = function(o, more) {
    return purnam.native$.js_copy_assoc.call(null, o, more)
  };
  var G__17708 = function(o, var_args) {
    var more = null;
    if(arguments.length > 1) {
      more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return G__17708__delegate.call(this, o, more)
  };
  G__17708.cljs$lang$maxFixedArity = 1;
  G__17708.cljs$lang$applyTo = function(arglist__17709) {
    var o = cljs.core.first(arglist__17709);
    var more = cljs.core.rest(arglist__17709);
    return G__17708__delegate(o, more)
  };
  G__17708.cljs$core$IFn$_invoke$arity$variadic = G__17708__delegate;
  return G__17708
}();
purnam.types.clojure.js_conj_object_BANG_ = function js_conj_object_BANG_(output, p__17710) {
  while(true) {
    var vec__17713 = p__17710;
    var vec__17714 = cljs.core.nth.call(null, vec__17713, 0, null);
    var k = cljs.core.nth.call(null, vec__17714, 0, null);
    var v = cljs.core.nth.call(null, vec__17714, 1, null);
    var ps = cljs.core.nthnext.call(null, vec__17713, 1);
    if(cljs.core.not.call(null, k)) {
      return output
    }else {
      var G__17715 = purnam.native$.js_assoc.call(null, output, k, v);
      var G__17716 = ps;
      output = G__17715;
      p__17710 = G__17716;
      continue
    }
    break
  }
};
purnam.types.clojure.js_conj_array_BANG_ = function js_conj_array_BANG_(output, p__17717) {
  while(true) {
    var vec__17719 = p__17717;
    var v = cljs.core.nth.call(null, vec__17719, 0, null);
    var vs = cljs.core.nthnext.call(null, vec__17719, 1);
    if(cljs.core.not.call(null, v)) {
      return output
    }else {
      var G__17720 = function() {
        output.push(v);
        return output
      }();
      var G__17721 = vs;
      output = G__17720;
      p__17717 = G__17721;
      continue
    }
    break
  }
};
purnam.types.clojure.js_conj_object = function js_conj_object(parent, pairs) {
  var o = goog.object.clone(parent);
  return purnam.types.clojure.js_conj_object_BANG_.call(null, o, pairs)
};
purnam.types.clojure.js_conj_array = function js_conj_array(parent, values) {
  var a = goog.array.clone(parent);
  purnam.types.clojure.js_conj_array_BANG_.call(null, a, values);
  return a
};
cljs.core.ICollection["array"] = true;
cljs.core._conj["array"] = function() {
  var G__17722__delegate = function(parent, values) {
    return purnam.types.clojure.js_conj_array.call(null, parent, values)
  };
  var G__17722 = function(parent, var_args) {
    var values = null;
    if(arguments.length > 1) {
      values = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return G__17722__delegate.call(this, parent, values)
  };
  G__17722.cljs$lang$maxFixedArity = 1;
  G__17722.cljs$lang$applyTo = function(arglist__17723) {
    var parent = cljs.core.first(arglist__17723);
    var values = cljs.core.rest(arglist__17723);
    return G__17722__delegate(parent, values)
  };
  G__17722.cljs$core$IFn$_invoke$arity$variadic = G__17722__delegate;
  return G__17722
}();
cljs.core.ICollection["object"] = true;
cljs.core._conj["object"] = function() {
  var G__17724__delegate = function(parent, pairs) {
    return purnam.types.clojure.js_conj_object.call(null, parent, pairs)
  };
  var G__17724 = function(parent, var_args) {
    var pairs = null;
    if(arguments.length > 1) {
      pairs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return G__17724__delegate.call(this, parent, pairs)
  };
  G__17724.cljs$lang$maxFixedArity = 1;
  G__17724.cljs$lang$applyTo = function(arglist__17725) {
    var parent = cljs.core.first(arglist__17725);
    var pairs = cljs.core.rest(arglist__17725);
    return G__17724__delegate(parent, pairs)
  };
  G__17724.cljs$core$IFn$_invoke$arity$variadic = G__17724__delegate;
  return G__17724
}();
cljs.core.ITransientMap["object"] = true;
cljs.core._dissoc_BANG_["object"] = function(o, k) {
  goog.object.remove(o, purnam.native$.js_strkey.call(null, k));
  return o
};
cljs.core.IMap["object"] = true;
cljs.core._dissoc["object"] = function(parent, k) {
  purnam.types.clojure.obj_only.call(null, parent, new cljs.core.Keyword(null, "dissoc", "dissoc", 3977329067));
  var o = function() {
    var obj17727 = {};
    return obj17727
  }();
  goog.object.extend(o, parent);
  return cljs.core.dissoc_BANG_.call(null, o, k)
};
cljs.core.IAssociative["object"] = true;
cljs.core._assoc["object"] = function(o, k, v) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "assoc", "assoc", 1107025799));
  return cljs.core.conj.call(null, o, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null))
};
goog.provide("purnam.types.magma");
goog.require("cljs.core");
goog.require("purnam.protocols");
goog.require("purnam.types.clojure");
goog.require("purnam.native$");
goog.require("purnam.protocols");
goog.require("purnam.types.clojure");
goog.require("purnam.native$");
purnam.types.magma.op_object = function() {
  var op_object = null;
  var op_object__2 = function(x, y) {
    cljs.core.mapv.call(null, function(p1__17742_SHARP_) {
      return purnam.types.clojure.obj_only.call(null, p1__17742_SHARP_, new cljs.core.Keyword(null, "op", "op", 1013907795))
    }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, y], null));
    return purnam.native$.js_merge.call(null, x, y)
  };
  var op_object__3 = function(x, y, ys) {
    cljs.core.mapv.call(null, function(p1__17743_SHARP_) {
      return purnam.types.clojure.obj_only.call(null, p1__17743_SHARP_, new cljs.core.Keyword(null, "op", "op", 1013907795))
    }, cljs.core.conj.call(null, ys, x, y));
    return cljs.core.apply.call(null, purnam.native$.js_merge, x, y, ys)
  };
  op_object = function(x, y, ys) {
    switch(arguments.length) {
      case 2:
        return op_object__2.call(this, x, y);
      case 3:
        return op_object__3.call(this, x, y, ys)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  op_object.cljs$core$IFn$_invoke$arity$2 = op_object__2;
  op_object.cljs$core$IFn$_invoke$arity$3 = op_object__3;
  return op_object
}();
purnam.types.magma.op_function = function() {
  var op_function = null;
  var op_function__2 = function(x, y) {
    if(cljs.core._EQ_.call(null, cljs.core.identity, x)) {
      return y
    }else {
      if(cljs.core._EQ_.call(null, cljs.core.identity, y)) {
        return x
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.comp.call(null, x, y)
        }else {
          return null
        }
      }
    }
  };
  var op_function__3 = function(x, y, ys) {
    return cljs.core.reduce.call(null, op_function, x, cljs.core.cons.call(null, y, ys))
  };
  op_function = function(x, y, ys) {
    switch(arguments.length) {
      case 2:
        return op_function__2.call(this, x, y);
      case 3:
        return op_function__3.call(this, x, y, ys)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  op_function.cljs$core$IFn$_invoke$arity$2 = op_function__2;
  op_function.cljs$core$IFn$_invoke$arity$3 = op_function__3;
  return op_function
}();
purnam.types.magma.op_array = function() {
  var op_array = null;
  var op_array__2 = function(x, y) {
    return purnam.native$.js_concat.call(null, x, y)
  };
  var op_array__3 = function(x, y, ys) {
    return cljs.core.apply.call(null, purnam.native$.js_concat, x, y, ys)
  };
  op_array = function(x, y, ys) {
    switch(arguments.length) {
      case 2:
        return op_array__2.call(this, x, y);
      case 3:
        return op_array__3.call(this, x, y, ys)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  op_array.cljs$core$IFn$_invoke$arity$2 = op_array__2;
  op_array.cljs$core$IFn$_invoke$arity$3 = op_array__3;
  return op_array
}();
purnam.types.magma.op_string = function() {
  var op_string = null;
  var op_string__2 = function(x, y) {
    return[cljs.core.str(x), cljs.core.str(y)].join("")
  };
  var op_string__3 = function(x, y, ys) {
    return cljs.core.apply.call(null, cljs.core.str, x, y, ys)
  };
  op_string = function(x, y, ys) {
    switch(arguments.length) {
      case 2:
        return op_string__2.call(this, x, y);
      case 3:
        return op_string__3.call(this, x, y, ys)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  op_string.cljs$core$IFn$_invoke$arity$2 = op_string__2;
  op_string.cljs$core$IFn$_invoke$arity$3 = op_string__3;
  return op_string
}();
purnam.types.magma.op_number = function() {
  var op_number = null;
  var op_number__2 = function(x, y) {
    return x + y
  };
  var op_number__3 = function(x, y, ys) {
    return cljs.core.apply.call(null, cljs.core._PLUS_, x, y, ys)
  };
  op_number = function(x, y, ys) {
    switch(arguments.length) {
      case 2:
        return op_number__2.call(this, x, y);
      case 3:
        return op_number__3.call(this, x, y, ys)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  op_number.cljs$core$IFn$_invoke$arity$2 = op_number__2;
  op_number.cljs$core$IFn$_invoke$arity$3 = op_number__3;
  return op_number
}();
purnam.types.magma.op_keyword = function() {
  var op_keyword = null;
  var op_keyword__2 = function(x, y) {
    return cljs.core.keyword.call(null, [cljs.core.str(cljs.core.name.call(null, x)), cljs.core.str(cljs.core.name.call(null, y))].join(""))
  };
  var op_keyword__3 = function(x, y, ys) {
    return cljs.core.keyword.call(null, cljs.core.apply.call(null, cljs.core.str, cljs.core.name.call(null, x), cljs.core.name.call(null, y), cljs.core.map.call(null, cljs.core.name, ys)))
  };
  op_keyword = function(x, y, ys) {
    switch(arguments.length) {
      case 2:
        return op_keyword__2.call(this, x, y);
      case 3:
        return op_keyword__3.call(this, x, y, ys)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  op_keyword.cljs$core$IFn$_invoke$arity$2 = op_keyword__2;
  op_keyword.cljs$core$IFn$_invoke$arity$3 = op_keyword__3;
  return op_keyword
}();
purnam.types.magma.op_atom = function() {
  var op_atom = null;
  var op_atom__2 = function(rx, ry) {
    return purnam.protocols.pure.call(null, rx, purnam.protocols.op.call(null, cljs.core.deref.call(null, rx), cljs.core.deref.call(null, ry)))
  };
  var op_atom__3 = function(rx, ry, rys) {
    return purnam.protocols.pure.call(null, rx, purnam.protocols.op.call(null, cljs.core.deref.call(null, rx), cljs.core.deref.call(null, ry), cljs.core.map.call(null, cljs.core.deref, rys)))
  };
  op_atom = function(rx, ry, rys) {
    switch(arguments.length) {
      case 2:
        return op_atom__2.call(this, rx, ry);
      case 3:
        return op_atom__3.call(this, rx, ry, rys)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  op_atom.cljs$core$IFn$_invoke$arity$2 = op_atom__2;
  op_atom.cljs$core$IFn$_invoke$arity$3 = op_atom__3;
  return op_atom
}();
purnam.types.magma.op_coll = function() {
  var op_coll = null;
  var op_coll__2 = function(x, y) {
    return cljs.core.into.call(null, x, y)
  };
  var op_coll__3 = function(x, y, ys) {
    return cljs.core.reduce.call(null, cljs.core.into, cljs.core.into.call(null, x, y), ys)
  };
  op_coll = function(x, y, ys) {
    switch(arguments.length) {
      case 2:
        return op_coll__2.call(this, x, y);
      case 3:
        return op_coll__3.call(this, x, y, ys)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  op_coll.cljs$core$IFn$_invoke$arity$2 = op_coll__2;
  op_coll.cljs$core$IFn$_invoke$arity$3 = op_coll__3;
  return op_coll
}();
purnam.types.magma.op_lazyseq = function() {
  var op_lazyseq = null;
  var op_lazyseq__2 = function(x, y) {
    return cljs.core.concat.call(null, x, y)
  };
  var op_lazyseq__3 = function(x, y, ys) {
    return cljs.core.apply.call(null, cljs.core.concat, x, y, ys)
  };
  op_lazyseq = function(x, y, ys) {
    switch(arguments.length) {
      case 2:
        return op_lazyseq__2.call(this, x, y);
      case 3:
        return op_lazyseq__3.call(this, x, y, ys)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  op_lazyseq.cljs$core$IFn$_invoke$arity$2 = op_lazyseq__2;
  op_lazyseq.cljs$core$IFn$_invoke$arity$3 = op_lazyseq__3;
  return op_lazyseq
}();
purnam.types.magma.op_list = function() {
  var op_list = null;
  var op_list__2 = function(x, y) {
    return cljs.core.apply.call(null, cljs.core.list, purnam.types.magma.op_lazyseq.call(null, x, y))
  };
  var op_list__3 = function(x, y, ys) {
    return cljs.core.apply.call(null, cljs.core.list, purnam.types.magma.op_lazyseq.call(null, x, y, ys))
  };
  op_list = function(x, y, ys) {
    switch(arguments.length) {
      case 2:
        return op_list__2.call(this, x, y);
      case 3:
        return op_list__3.call(this, x, y, ys)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  op_list.cljs$core$IFn$_invoke$arity$2 = op_list__2;
  op_list.cljs$core$IFn$_invoke$arity$3 = op_list__3;
  return op_list
}();
purnam.protocols.Magma["null"] = true;
purnam.protocols.op["null"] = function() {
  var G__17744 = null;
  var G__17744__2 = function(_, y) {
    return y
  };
  var G__17744__3 = function(_, y, ys) {
    return cljs.core.reduce.call(null, purnam.protocols.op, y, ys)
  };
  G__17744 = function(_, y, ys) {
    switch(arguments.length) {
      case 2:
        return G__17744__2.call(this, _, y);
      case 3:
        return G__17744__3.call(this, _, y, ys)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17744
}();
purnam.protocols.Magma["object"] = true;
purnam.protocols.op["object"] = function() {
  var G__17745 = null;
  var G__17745__2 = function(x, y) {
    return purnam.types.magma.op_object.call(null, x, y)
  };
  var G__17745__3 = function(x, y, ys) {
    return purnam.types.magma.op_object.call(null, x, y, ys)
  };
  G__17745 = function(x, y, ys) {
    switch(arguments.length) {
      case 2:
        return G__17745__2.call(this, x, y);
      case 3:
        return G__17745__3.call(this, x, y, ys)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17745
}();
purnam.protocols.Magma["function"] = true;
purnam.protocols.op["function"] = function() {
  var G__17746 = null;
  var G__17746__2 = function(x, y) {
    return purnam.types.magma.op_function.call(null, x, y)
  };
  var G__17746__3 = function(x, y, ys) {
    return purnam.types.magma.op_function.call(null, x, y, ys)
  };
  G__17746 = function(x, y, ys) {
    switch(arguments.length) {
      case 2:
        return G__17746__2.call(this, x, y);
      case 3:
        return G__17746__3.call(this, x, y, ys)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17746
}();
purnam.protocols.Magma["array"] = true;
purnam.protocols.op["array"] = function() {
  var G__17747 = null;
  var G__17747__2 = function(x, y) {
    return purnam.types.magma.op_array.call(null, x, y)
  };
  var G__17747__3 = function(x, y, ys) {
    return purnam.types.magma.op_array.call(null, x, y, ys)
  };
  G__17747 = function(x, y, ys) {
    switch(arguments.length) {
      case 2:
        return G__17747__2.call(this, x, y);
      case 3:
        return G__17747__3.call(this, x, y, ys)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17747
}();
purnam.protocols.Magma["string"] = true;
purnam.protocols.op["string"] = function() {
  var G__17748 = null;
  var G__17748__2 = function(x, y) {
    return purnam.types.magma.op_string.call(null, x, y)
  };
  var G__17748__3 = function(x, y, ys) {
    return purnam.types.magma.op_string.call(null, x, y, ys)
  };
  G__17748 = function(x, y, ys) {
    switch(arguments.length) {
      case 2:
        return G__17748__2.call(this, x, y);
      case 3:
        return G__17748__3.call(this, x, y, ys)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17748
}();
purnam.protocols.Magma["number"] = true;
purnam.protocols.op["number"] = function() {
  var G__17749 = null;
  var G__17749__2 = function(x, y) {
    return purnam.types.magma.op_number.call(null, x, y)
  };
  var G__17749__3 = function(x, y, ys) {
    return purnam.types.magma.op_number.call(null, x, y, ys)
  };
  G__17749 = function(x, y, ys) {
    switch(arguments.length) {
      case 2:
        return G__17749__2.call(this, x, y);
      case 3:
        return G__17749__3.call(this, x, y, ys)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17749
}();
cljs.core.Keyword.prototype.purnam$protocols$Magma$ = true;
cljs.core.Keyword.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_keyword.call(null, x__$1, y)
};
cljs.core.Keyword.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_keyword.call(null, x__$1, y, ys)
};
cljs.core.Atom.prototype.purnam$protocols$Magma$ = true;
cljs.core.Atom.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_atom.call(null, x__$1, y)
};
cljs.core.Atom.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_atom.call(null, x__$1, y, ys)
};
cljs.core.LazySeq.prototype.purnam$protocols$Magma$ = true;
cljs.core.LazySeq.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_lazyseq.call(null, x__$1, y)
};
cljs.core.LazySeq.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_lazyseq.call(null, x__$1, y, ys)
};
cljs.core.EmptyList.prototype.purnam$protocols$Magma$ = true;
cljs.core.EmptyList.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y)
};
cljs.core.EmptyList.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y, ys)
};
cljs.core.IndexedSeq.prototype.purnam$protocols$Magma$ = true;
cljs.core.IndexedSeq.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y)
};
cljs.core.IndexedSeq.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y, ys)
};
cljs.core.RSeq.prototype.purnam$protocols$Magma$ = true;
cljs.core.RSeq.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y)
};
cljs.core.RSeq.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y, ys)
};
cljs.core.NodeSeq.prototype.purnam$protocols$Magma$ = true;
cljs.core.NodeSeq.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y)
};
cljs.core.NodeSeq.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y, ys)
};
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Magma$ = true;
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y)
};
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y, ys)
};
cljs.core.List.prototype.purnam$protocols$Magma$ = true;
cljs.core.List.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y)
};
cljs.core.List.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y, ys)
};
cljs.core.Cons.prototype.purnam$protocols$Magma$ = true;
cljs.core.Cons.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y)
};
cljs.core.Cons.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y, ys)
};
cljs.core.ChunkedCons.prototype.purnam$protocols$Magma$ = true;
cljs.core.ChunkedCons.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y)
};
cljs.core.ChunkedCons.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y, ys)
};
cljs.core.ChunkedSeq.prototype.purnam$protocols$Magma$ = true;
cljs.core.ChunkedSeq.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y)
};
cljs.core.ChunkedSeq.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y, ys)
};
cljs.core.KeySeq.prototype.purnam$protocols$Magma$ = true;
cljs.core.KeySeq.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y)
};
cljs.core.KeySeq.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y, ys)
};
cljs.core.ValSeq.prototype.purnam$protocols$Magma$ = true;
cljs.core.ValSeq.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y)
};
cljs.core.ValSeq.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y, ys)
};
cljs.core.Range.prototype.purnam$protocols$Magma$ = true;
cljs.core.Range.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y)
};
cljs.core.Range.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y, ys)
};
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Magma$ = true;
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y)
};
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y, ys)
};
cljs.core.EmptyList.prototype.purnam$protocols$Magma$ = true;
cljs.core.EmptyList.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y)
};
cljs.core.EmptyList.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_list.call(null, x__$1, y, ys)
};
cljs.core.PersistentVector.prototype.purnam$protocols$Magma$ = true;
cljs.core.PersistentVector.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y)
};
cljs.core.PersistentVector.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y, ys)
};
cljs.core.Subvec.prototype.purnam$protocols$Magma$ = true;
cljs.core.Subvec.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y)
};
cljs.core.Subvec.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y, ys)
};
cljs.core.BlackNode.prototype.purnam$protocols$Magma$ = true;
cljs.core.BlackNode.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y)
};
cljs.core.BlackNode.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y, ys)
};
cljs.core.RedNode.prototype.purnam$protocols$Magma$ = true;
cljs.core.RedNode.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y)
};
cljs.core.RedNode.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y, ys)
};
cljs.core.PersistentHashSet.prototype.purnam$protocols$Magma$ = true;
cljs.core.PersistentHashSet.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y)
};
cljs.core.PersistentHashSet.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y, ys)
};
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Magma$ = true;
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y)
};
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y, ys)
};
cljs.core.PersistentHashMap.prototype.purnam$protocols$Magma$ = true;
cljs.core.PersistentHashMap.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y)
};
cljs.core.PersistentHashMap.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y, ys)
};
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Magma$ = true;
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y)
};
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y, ys)
};
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Magma$ = true;
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y)
};
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var x__$1 = this;
  return purnam.types.magma.op_coll.call(null, x__$1, y, ys)
};
goog.provide("purnam.types.functor");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("purnam.types.clojure");
goog.require("purnam.protocols");
goog.require("purnam.protocols");
goog.require("purnam.types.clojure");
goog.require("purnam.native$");
purnam.types.functor.fmap_function = function() {
  var fmap_function = null;
  var fmap_function__2 = function(fv, g) {
    return cljs.core.comp.call(null, g, fv)
  };
  var fmap_function__3 = function(fv, g, fvs) {
    return cljs.core.apply.call(null, cljs.core.comp, g, fv, fvs)
  };
  fmap_function = function(fv, g, fvs) {
    switch(arguments.length) {
      case 2:
        return fmap_function__2.call(this, fv, g);
      case 3:
        return fmap_function__3.call(this, fv, g, fvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fmap_function.cljs$core$IFn$_invoke$arity$2 = fmap_function__2;
  fmap_function.cljs$core$IFn$_invoke$arity$3 = fmap_function__3;
  return fmap_function
}();
purnam.types.functor.fmap_array = function() {
  var fmap_array = null;
  var fmap_array__2 = function(fv, g) {
    return purnam.native$.js_map.call(null, g, fv)
  };
  var fmap_array__3 = function(fv, g, fvs) {
    return cljs.core.apply.call(null, purnam.native$.js_map, g, fv, fvs)
  };
  fmap_array = function(fv, g, fvs) {
    switch(arguments.length) {
      case 2:
        return fmap_array__2.call(this, fv, g);
      case 3:
        return fmap_array__3.call(this, fv, g, fvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fmap_array.cljs$core$IFn$_invoke$arity$2 = fmap_array__2;
  fmap_array.cljs$core$IFn$_invoke$arity$3 = fmap_array__3;
  return fmap_array
}();
purnam.types.functor.fmap_string = function() {
  var fmap_string = null;
  var fmap_string__2 = function(fv, g) {
    return cljs.core.apply.call(null, cljs.core.str, g.call(null, fv))
  };
  var fmap_string__3 = function(fv, g, fvs) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.apply.call(null, g, fv, fvs))
  };
  fmap_string = function(fv, g, fvs) {
    switch(arguments.length) {
      case 2:
        return fmap_string__2.call(this, fv, g);
      case 3:
        return fmap_string__3.call(this, fv, g, fvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fmap_string.cljs$core$IFn$_invoke$arity$2 = fmap_string__2;
  fmap_string.cljs$core$IFn$_invoke$arity$3 = fmap_string__3;
  return fmap_string
}();
purnam.types.functor.fmap_keyword = function() {
  var fmap_keyword = null;
  var fmap_keyword__2 = function(fv, g) {
    return cljs.core.keyword.call(null, purnam.types.functor.fmap_string.call(null, cljs.core.name.call(null, fv), g))
  };
  var fmap_keyword__3 = function(fv, g, fvs) {
    return cljs.core.keyword.call(null, purnam.types.functor.fmap_string.call(null, cljs.core.name.call(null, fv), g, cljs.core.map.call(null, cljs.core.name, fvs)))
  };
  fmap_keyword = function(fv, g, fvs) {
    switch(arguments.length) {
      case 2:
        return fmap_keyword__2.call(this, fv, g);
      case 3:
        return fmap_keyword__3.call(this, fv, g, fvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fmap_keyword.cljs$core$IFn$_invoke$arity$2 = fmap_keyword__2;
  fmap_keyword.cljs$core$IFn$_invoke$arity$3 = fmap_keyword__3;
  return fmap_keyword
}();
purnam.types.functor.fmap_atom = function() {
  var fmap_atom = null;
  var fmap_atom__2 = function(fv, g) {
    cljs.core.swap_BANG_.call(null, fv, g);
    return fv
  };
  var fmap_atom__3 = function(fv, g, fvs) {
    cljs.core.apply.call(null, cljs.core.swap_BANG_, fv, g, cljs.core.map.call(null, cljs.core.deref, fvs));
    return fv
  };
  fmap_atom = function(fv, g, fvs) {
    switch(arguments.length) {
      case 2:
        return fmap_atom__2.call(this, fv, g);
      case 3:
        return fmap_atom__3.call(this, fv, g, fvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fmap_atom.cljs$core$IFn$_invoke$arity$2 = fmap_atom__2;
  fmap_atom.cljs$core$IFn$_invoke$arity$3 = fmap_atom__3;
  return fmap_atom
}();
purnam.types.functor.fmap_list = function() {
  var fmap_list = null;
  var fmap_list__2 = function(fv, g) {
    return cljs.core.with_meta.call(null, cljs.core.apply.call(null, cljs.core.list, cljs.core.map.call(null, g, fv)), cljs.core.meta.call(null, fv))
  };
  var fmap_list__3 = function(fv, g, fvs) {
    return cljs.core.with_meta.call(null, cljs.core.apply.call(null, cljs.core.list, cljs.core.apply.call(null, cljs.core.map, g, fv, fvs)), cljs.core.meta.call(null, fv))
  };
  fmap_list = function(fv, g, fvs) {
    switch(arguments.length) {
      case 2:
        return fmap_list__2.call(this, fv, g);
      case 3:
        return fmap_list__3.call(this, fv, g, fvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fmap_list.cljs$core$IFn$_invoke$arity$2 = fmap_list__2;
  fmap_list.cljs$core$IFn$_invoke$arity$3 = fmap_list__3;
  return fmap_list
}();
purnam.types.functor.fmap_lazyseq = function() {
  var fmap_lazyseq = null;
  var fmap_lazyseq__2 = function(fv, g) {
    return cljs.core.with_meta.call(null, cljs.core.map.call(null, g, fv), cljs.core.meta.call(null, fv))
  };
  var fmap_lazyseq__3 = function(fv, g, fvs) {
    return cljs.core.with_meta.call(null, cljs.core.apply.call(null, cljs.core.map, g, fv, fvs), cljs.core.meta.call(null, fv))
  };
  fmap_lazyseq = function(fv, g, fvs) {
    switch(arguments.length) {
      case 2:
        return fmap_lazyseq__2.call(this, fv, g);
      case 3:
        return fmap_lazyseq__3.call(this, fv, g, fvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fmap_lazyseq.cljs$core$IFn$_invoke$arity$2 = fmap_lazyseq__2;
  fmap_lazyseq.cljs$core$IFn$_invoke$arity$3 = fmap_lazyseq__3;
  return fmap_lazyseq
}();
purnam.types.functor.fmap_coll = function() {
  var fmap_coll = null;
  var fmap_coll__2 = function(fv, g) {
    return cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, fv), cljs.core.map.call(null, g, fv)), cljs.core.meta.call(null, fv))
  };
  var fmap_coll__3 = function(fv, g, fvs) {
    return cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, fv), cljs.core.apply.call(null, cljs.core.map, g, fv, fvs)), cljs.core.meta.call(null, fv))
  };
  fmap_coll = function(fv, g, fvs) {
    switch(arguments.length) {
      case 2:
        return fmap_coll__2.call(this, fv, g);
      case 3:
        return fmap_coll__3.call(this, fv, g, fvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fmap_coll.cljs$core$IFn$_invoke$arity$2 = fmap_coll__2;
  fmap_coll.cljs$core$IFn$_invoke$arity$3 = fmap_coll__3;
  return fmap_coll
}();
purnam.types.functor.group_entries = function group_entries(k, ms) {
  return cljs.core.map.call(null, cljs.core.val, cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, function(p1__17672_SHARP_) {
    return cljs.core.find.call(null, p1__17672_SHARP_, k)
  }, ms)))
};
purnam.types.functor.apply_key = function apply_key(g, maps, k) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.apply.call(null, g, cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, purnam.types.functor.group_entries.call(null, k, maps)))], null)
};
purnam.types.functor.fmap_map_r = function() {
  var fmap_map_r = null;
  var fmap_map_r__2 = function(m, g) {
    return cljs.core.map.call(null, function(p__17675) {
      var vec__17676 = p__17675;
      var k = cljs.core.nth.call(null, vec__17676, 0, null);
      var v = cljs.core.nth.call(null, vec__17676, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, g.call(null, v)], null)
    }, m)
  };
  var fmap_map_r__3 = function(m, g, ms) {
    var source = cljs.core.cons.call(null, m, ms);
    var keys = cljs.core.distinct.call(null, cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.flatten.call(null, cljs.core.map.call(null, cljs.core.keys, source))));
    return cljs.core.map.call(null, cljs.core.partial.call(null, purnam.types.functor.apply_key, g, source), keys)
  };
  fmap_map_r = function(m, g, ms) {
    switch(arguments.length) {
      case 2:
        return fmap_map_r__2.call(this, m, g);
      case 3:
        return fmap_map_r__3.call(this, m, g, ms)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fmap_map_r.cljs$core$IFn$_invoke$arity$2 = fmap_map_r__2;
  fmap_map_r.cljs$core$IFn$_invoke$arity$3 = fmap_map_r__3;
  return fmap_map_r
}();
purnam.types.functor.fmap_map = function() {
  var fmap_map = null;
  var fmap_map__2 = function(fv, g) {
    return cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, fv), purnam.types.functor.fmap_map_r.call(null, fv, g)), cljs.core.meta.call(null, fv))
  };
  var fmap_map__3 = function(fv, g, fvs) {
    return cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, fv), purnam.types.functor.fmap_map_r.call(null, fv, g, fvs)), cljs.core.meta.call(null, fv))
  };
  fmap_map = function(fv, g, fvs) {
    switch(arguments.length) {
      case 2:
        return fmap_map__2.call(this, fv, g);
      case 3:
        return fmap_map__3.call(this, fv, g, fvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fmap_map.cljs$core$IFn$_invoke$arity$2 = fmap_map__2;
  fmap_map.cljs$core$IFn$_invoke$arity$3 = fmap_map__3;
  return fmap_map
}();
purnam.types.functor.fmap_object = function() {
  var fmap_object = null;
  var fmap_object__2 = function(fv, g) {
    purnam.types.clojure.obj_only.call(null, fv, new cljs.core.Keyword(null, "fmap", "fmap", 1017050792));
    return cljs.core.apply.call(null, cljs.core.conj, function() {
      var G__17685 = function() {
        var obj17688 = {};
        return obj17688
      }();
      return G__17685
    }(), purnam.types.functor.fmap_map_r.call(null, fv, g))
  };
  var fmap_object__3 = function(fv, g, fvs) {
    purnam.types.clojure.obj_only.call(null, fv, new cljs.core.Keyword(null, "fmap", "fmap", 1017050792));
    return cljs.core.apply.call(null, cljs.core.conj, function() {
      var G__17689 = function() {
        var obj17692 = {};
        return obj17692
      }();
      return G__17689
    }(), purnam.types.functor.fmap_map_r.call(null, fv, g, fvs))
  };
  fmap_object = function(fv, g, fvs) {
    switch(arguments.length) {
      case 2:
        return fmap_object__2.call(this, fv, g);
      case 3:
        return fmap_object__3.call(this, fv, g, fvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fmap_object.cljs$core$IFn$_invoke$arity$2 = fmap_object__2;
  fmap_object.cljs$core$IFn$_invoke$arity$3 = fmap_object__3;
  return fmap_object
}();
purnam.protocols.Functor["null"] = true;
purnam.protocols.fmap["null"] = function() {
  var G__17693 = null;
  var G__17693__2 = function(_, ___$1) {
    return null
  };
  var G__17693__3 = function(_, ___$1, ___$2) {
    return null
  };
  G__17693 = function(_, ___$1, ___$2) {
    switch(arguments.length) {
      case 2:
        return G__17693__2.call(this, _, ___$1);
      case 3:
        return G__17693__3.call(this, _, ___$1, ___$2)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17693
}();
cljs.core.EmptyList.prototype.purnam$protocols$Functor$ = true;
cljs.core.EmptyList.prototype.purnam$protocols$Functor$fmap$arity$2 = function(_, ___$1) {
  var ___$2 = this;
  return cljs.core.List.EMPTY
};
cljs.core.EmptyList.prototype.purnam$protocols$Functor$fmap$arity$3 = function(_, ___$1, ___$2) {
  var ___$3 = this;
  return cljs.core.List.EMPTY
};
purnam.protocols.Functor["object"] = true;
purnam.protocols.fmap["object"] = function() {
  var G__17694 = null;
  var G__17694__2 = function(fv, g) {
    return purnam.types.functor.fmap_object.call(null, fv, g)
  };
  var G__17694__3 = function(fv, g, fvs) {
    return purnam.types.functor.fmap_object.call(null, fv, g, fvs)
  };
  G__17694 = function(fv, g, fvs) {
    switch(arguments.length) {
      case 2:
        return G__17694__2.call(this, fv, g);
      case 3:
        return G__17694__3.call(this, fv, g, fvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17694
}();
purnam.protocols.Functor["function"] = true;
purnam.protocols.fmap["function"] = function() {
  var G__17695 = null;
  var G__17695__2 = function(fv, g) {
    return purnam.types.functor.fmap_function.call(null, fv, g)
  };
  var G__17695__3 = function(fv, g, fvs) {
    return purnam.types.functor.fmap_function.call(null, fv, g, fvs)
  };
  G__17695 = function(fv, g, fvs) {
    switch(arguments.length) {
      case 2:
        return G__17695__2.call(this, fv, g);
      case 3:
        return G__17695__3.call(this, fv, g, fvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17695
}();
purnam.protocols.Functor["array"] = true;
purnam.protocols.fmap["array"] = function() {
  var G__17696 = null;
  var G__17696__2 = function(fv, g) {
    return purnam.types.functor.fmap_array.call(null, fv, g)
  };
  var G__17696__3 = function(fv, g, fvs) {
    return purnam.types.functor.fmap_array.call(null, fv, g, fvs)
  };
  G__17696 = function(fv, g, fvs) {
    switch(arguments.length) {
      case 2:
        return G__17696__2.call(this, fv, g);
      case 3:
        return G__17696__3.call(this, fv, g, fvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17696
}();
purnam.protocols.Functor["string"] = true;
purnam.protocols.fmap["string"] = function() {
  var G__17697 = null;
  var G__17697__2 = function(fv, g) {
    return purnam.types.functor.fmap_string.call(null, fv, g)
  };
  var G__17697__3 = function(fv, g, fvs) {
    return purnam.types.functor.fmap_string.call(null, fv, g, fvs)
  };
  G__17697 = function(fv, g, fvs) {
    switch(arguments.length) {
      case 2:
        return G__17697__2.call(this, fv, g);
      case 3:
        return G__17697__3.call(this, fv, g, fvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17697
}();
cljs.core.Keyword.prototype.purnam$protocols$Functor$ = true;
cljs.core.Keyword.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_keyword.call(null, fv__$1, g)
};
cljs.core.Keyword.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_keyword.call(null, fv__$1, g, fvs)
};
cljs.core.Atom.prototype.purnam$protocols$Functor$ = true;
cljs.core.Atom.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_atom.call(null, fv__$1, g)
};
cljs.core.Atom.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_atom.call(null, fv__$1, g, fvs)
};
cljs.core.IndexedSeq.prototype.purnam$protocols$Functor$ = true;
cljs.core.IndexedSeq.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g)
};
cljs.core.IndexedSeq.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g, fvs)
};
cljs.core.RSeq.prototype.purnam$protocols$Functor$ = true;
cljs.core.RSeq.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g)
};
cljs.core.RSeq.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g, fvs)
};
cljs.core.NodeSeq.prototype.purnam$protocols$Functor$ = true;
cljs.core.NodeSeq.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g)
};
cljs.core.NodeSeq.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g, fvs)
};
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Functor$ = true;
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g)
};
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g, fvs)
};
cljs.core.List.prototype.purnam$protocols$Functor$ = true;
cljs.core.List.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g)
};
cljs.core.List.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g, fvs)
};
cljs.core.Cons.prototype.purnam$protocols$Functor$ = true;
cljs.core.Cons.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g)
};
cljs.core.Cons.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g, fvs)
};
cljs.core.ChunkedCons.prototype.purnam$protocols$Functor$ = true;
cljs.core.ChunkedCons.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g)
};
cljs.core.ChunkedCons.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g, fvs)
};
cljs.core.ChunkedSeq.prototype.purnam$protocols$Functor$ = true;
cljs.core.ChunkedSeq.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g)
};
cljs.core.ChunkedSeq.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g, fvs)
};
cljs.core.KeySeq.prototype.purnam$protocols$Functor$ = true;
cljs.core.KeySeq.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g)
};
cljs.core.KeySeq.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g, fvs)
};
cljs.core.ValSeq.prototype.purnam$protocols$Functor$ = true;
cljs.core.ValSeq.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g)
};
cljs.core.ValSeq.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g, fvs)
};
cljs.core.Range.prototype.purnam$protocols$Functor$ = true;
cljs.core.Range.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g)
};
cljs.core.Range.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g, fvs)
};
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Functor$ = true;
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g)
};
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_list.call(null, fv__$1, g, fvs)
};
cljs.core.LazySeq.prototype.purnam$protocols$Functor$ = true;
cljs.core.LazySeq.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_lazyseq.call(null, fv__$1, g)
};
cljs.core.LazySeq.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_lazyseq.call(null, fv__$1, g, fvs)
};
cljs.core.PersistentVector.prototype.purnam$protocols$Functor$ = true;
cljs.core.PersistentVector.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_coll.call(null, fv__$1, g)
};
cljs.core.PersistentVector.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_coll.call(null, fv__$1, g, fvs)
};
cljs.core.Subvec.prototype.purnam$protocols$Functor$ = true;
cljs.core.Subvec.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_coll.call(null, fv__$1, g)
};
cljs.core.Subvec.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_coll.call(null, fv__$1, g, fvs)
};
cljs.core.BlackNode.prototype.purnam$protocols$Functor$ = true;
cljs.core.BlackNode.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_coll.call(null, fv__$1, g)
};
cljs.core.BlackNode.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_coll.call(null, fv__$1, g, fvs)
};
cljs.core.RedNode.prototype.purnam$protocols$Functor$ = true;
cljs.core.RedNode.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_coll.call(null, fv__$1, g)
};
cljs.core.RedNode.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_coll.call(null, fv__$1, g, fvs)
};
cljs.core.PersistentHashSet.prototype.purnam$protocols$Functor$ = true;
cljs.core.PersistentHashSet.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_coll.call(null, fv__$1, g)
};
cljs.core.PersistentHashSet.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_coll.call(null, fv__$1, g, fvs)
};
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Functor$ = true;
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_coll.call(null, fv__$1, g)
};
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_coll.call(null, fv__$1, g, fvs)
};
cljs.core.PersistentHashMap.prototype.purnam$protocols$Functor$ = true;
cljs.core.PersistentHashMap.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_map.call(null, fv__$1, g)
};
cljs.core.PersistentHashMap.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_map.call(null, fv__$1, g, fvs)
};
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Functor$ = true;
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_map.call(null, fv__$1, g)
};
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_map.call(null, fv__$1, g, fvs)
};
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Functor$ = true;
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Functor$fmap$arity$2 = function(fv, g) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_map.call(null, fv__$1, g)
};
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Functor$fmap$arity$3 = function(fv, g, fvs) {
  var fv__$1 = this;
  return purnam.types.functor.fmap_map.call(null, fv__$1, g, fvs)
};
goog.provide("purnam.types.monad");
goog.require("cljs.core");
goog.require("purnam.common");
goog.require("purnam.types.functor");
goog.require("purnam.types.clojure");
goog.require("purnam.protocols");
goog.require("purnam.native$");
goog.require("purnam.protocols");
goog.require("purnam.types.functor");
goog.require("purnam.types.clojure");
goog.require("purnam.native$");
goog.require("purnam.common");
purnam.types.monad.with_current_context = function with_current_context(f) {
  var current_context = purnam.common.get_context.call(null);
  return function() {
    var G__17618__delegate = function(args) {
      var _STAR_pure_context_STAR_17617 = purnam.common._STAR_pure_context_STAR_;
      try {
        purnam.common._STAR_pure_context_STAR_ = current_context;
        return cljs.core.apply.call(null, f, args)
      }finally {
        purnam.common._STAR_pure_context_STAR_ = _STAR_pure_context_STAR_17617
      }
    };
    var G__17618 = function(var_args) {
      var args = null;
      if(arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__17618__delegate.call(this, args)
    };
    G__17618.cljs$lang$maxFixedArity = 0;
    G__17618.cljs$lang$applyTo = function(arglist__17619) {
      var args = cljs.core.seq(arglist__17619);
      return G__17618__delegate(args)
    };
    G__17618.cljs$core$IFn$_invoke$arity$variadic = G__17618__delegate;
    return G__17618
  }()
};
purnam.types.monad.bind_default = function() {
  var bind_default = null;
  var bind_default__2 = function(mv, g) {
    return purnam.protocols.join.call(null, purnam.protocols.fmap.call(null, mv, g))
  };
  var bind_default__3 = function(mv, g, mvs) {
    return purnam.protocols.join.call(null, purnam.protocols.fmap.call(null, mv, g, mvs))
  };
  bind_default = function(mv, g, mvs) {
    switch(arguments.length) {
      case 2:
        return bind_default__2.call(this, mv, g);
      case 3:
        return bind_default__3.call(this, mv, g, mvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bind_default.cljs$core$IFn$_invoke$arity$2 = bind_default__2;
  bind_default.cljs$core$IFn$_invoke$arity$3 = bind_default__3;
  return bind_default
}();
purnam.types.monad.join_atom = function join_atom(mv) {
  return mv
};
purnam.types.monad.join_array = function join_array(mv) {
  var output = [];
  mv.map(function(e) {
    if(cljs.core.coll_QMARK_.call(null, e)) {
      var seq__17624 = cljs.core.seq.call(null, e);
      var chunk__17625 = null;
      var count__17626 = 0;
      var i__17627 = 0;
      while(true) {
        if(i__17627 < count__17626) {
          var i = cljs.core._nth.call(null, chunk__17625, i__17627);
          output.push(i);
          var G__17628 = seq__17624;
          var G__17629 = chunk__17625;
          var G__17630 = count__17626;
          var G__17631 = i__17627 + 1;
          seq__17624 = G__17628;
          chunk__17625 = G__17629;
          count__17626 = G__17630;
          i__17627 = G__17631;
          continue
        }else {
          var temp__4092__auto__ = cljs.core.seq.call(null, seq__17624);
          if(temp__4092__auto__) {
            var seq__17624__$1 = temp__4092__auto__;
            if(cljs.core.chunked_seq_QMARK_.call(null, seq__17624__$1)) {
              var c__4200__auto__ = cljs.core.chunk_first.call(null, seq__17624__$1);
              var G__17632 = cljs.core.chunk_rest.call(null, seq__17624__$1);
              var G__17633 = c__4200__auto__;
              var G__17634 = cljs.core.count.call(null, c__4200__auto__);
              var G__17635 = 0;
              seq__17624 = G__17632;
              chunk__17625 = G__17633;
              count__17626 = G__17634;
              i__17627 = G__17635;
              continue
            }else {
              var i = cljs.core.first.call(null, seq__17624__$1);
              output.push(i);
              var G__17636 = cljs.core.next.call(null, seq__17624__$1);
              var G__17637 = null;
              var G__17638 = 0;
              var G__17639 = 0;
              seq__17624 = G__17636;
              chunk__17625 = G__17637;
              count__17626 = G__17638;
              i__17627 = G__17639;
              continue
            }
          }else {
            return null
          }
        }
        break
      }
    }else {
      return output.push(e)
    }
  });
  return output
};
purnam.types.monad.bind_array = function() {
  var bind_array = null;
  var bind_array__2 = function(mv, g) {
    return purnam.native$.js_mapcat.call(null, g, mv)
  };
  var bind_array__3 = function(mv, g, mvs) {
    return cljs.core.apply.call(null, purnam.native$.js_mapcat, g, mv, mvs)
  };
  bind_array = function(mv, g, mvs) {
    switch(arguments.length) {
      case 2:
        return bind_array__2.call(this, mv, g);
      case 3:
        return bind_array__3.call(this, mv, g, mvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bind_array.cljs$core$IFn$_invoke$arity$2 = bind_array__2;
  bind_array.cljs$core$IFn$_invoke$arity$3 = bind_array__3;
  return bind_array
}();
purnam.types.monad.bind_coll = function() {
  var bind_coll = null;
  var bind_coll__2 = function(mv, g) {
    return cljs.core.into.call(null, cljs.core.empty.call(null, mv), cljs.core.mapcat.call(null, g, mv))
  };
  var bind_coll__3 = function(mv, g, mvs) {
    return cljs.core.into.call(null, cljs.core.empty.call(null, mv), cljs.core.apply.call(null, cljs.core.mapcat, g, mv, mvs))
  };
  bind_coll = function(mv, g, mvs) {
    switch(arguments.length) {
      case 2:
        return bind_coll__2.call(this, mv, g);
      case 3:
        return bind_coll__3.call(this, mv, g, mvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bind_coll.cljs$core$IFn$_invoke$arity$2 = bind_coll__2;
  bind_coll.cljs$core$IFn$_invoke$arity$3 = bind_coll__3;
  return bind_coll
}();
purnam.types.monad.bind_list = function() {
  var bind_list = null;
  var bind_list__2 = function(c, g) {
    return cljs.core.with_meta.call(null, cljs.core.apply.call(null, cljs.core.list, cljs.core.mapcat.call(null, g, c)), cljs.core.meta.call(null, c))
  };
  var bind_list__3 = function(c, g, ss) {
    return cljs.core.with_meta.call(null, cljs.core.apply.call(null, cljs.core.list, cljs.core.apply.call(null, cljs.core.mapcat, g, c, ss)), cljs.core.meta.call(null, c))
  };
  bind_list = function(c, g, ss) {
    switch(arguments.length) {
      case 2:
        return bind_list__2.call(this, c, g);
      case 3:
        return bind_list__3.call(this, c, g, ss)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bind_list.cljs$core$IFn$_invoke$arity$2 = bind_list__2;
  bind_list.cljs$core$IFn$_invoke$arity$3 = bind_list__3;
  return bind_list
}();
purnam.types.monad.bind_seq = function() {
  var bind_seq = null;
  var bind_seq__2 = function(c, g) {
    return cljs.core.with_meta.call(null, cljs.core.mapcat.call(null, g, c), cljs.core.meta.call(null, c))
  };
  var bind_seq__3 = function(c, g, ss) {
    return cljs.core.with_meta.call(null, cljs.core.apply.call(null, cljs.core.mapcat, g, c, ss), cljs.core.meta.call(null, c))
  };
  bind_seq = function(c, g, ss) {
    switch(arguments.length) {
      case 2:
        return bind_seq__2.call(this, c, g);
      case 3:
        return bind_seq__3.call(this, c, g, ss)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bind_seq.cljs$core$IFn$_invoke$arity$2 = bind_seq__2;
  bind_seq.cljs$core$IFn$_invoke$arity$3 = bind_seq__3;
  return bind_seq
}();
purnam.types.monad.bind_lazyseq = function() {
  var bind_lazyseq = null;
  var bind_lazyseq__2 = function(c, g) {
    return purnam.types.monad.bind_seq.call(null, c, purnam.types.monad.with_current_context.call(null, g))
  };
  var bind_lazyseq__3 = function(c, g, ss) {
    return purnam.types.monad.bind_seq.call(null, c, purnam.types.monad.with_current_context.call(null, g), ss)
  };
  bind_lazyseq = function(c, g, ss) {
    switch(arguments.length) {
      case 2:
        return bind_lazyseq__2.call(this, c, g);
      case 3:
        return bind_lazyseq__3.call(this, c, g, ss)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bind_lazyseq.cljs$core$IFn$_invoke$arity$2 = bind_lazyseq__2;
  bind_lazyseq.cljs$core$IFn$_invoke$arity$3 = bind_lazyseq__3;
  return bind_lazyseq
}();
purnam.types.monad.join_step = function join_step(mv, e) {
  if(cljs.core.coll_QMARK_.call(null, e)) {
    return purnam.protocols.op.call(null, mv, e)
  }else {
    return cljs.core.conj.call(null, mv, e)
  }
};
purnam.types.monad.join_seq = function join_seq(mv) {
  return cljs.core.with_meta.call(null, cljs.core.reduce.call(null, purnam.types.monad.join_step, cljs.core.PersistentVector.EMPTY, mv), cljs.core.meta.call(null, mv))
};
purnam.types.monad.join_coll = function join_coll(mv) {
  return cljs.core.into.call(null, cljs.core.empty.call(null, mv), purnam.types.monad.join_seq.call(null, mv))
};
purnam.types.monad.join_list = function join_list(c) {
  return cljs.core.with_meta.call(null, cljs.core.apply.call(null, cljs.core.list, purnam.types.monad.join_seq.call(null, c)), cljs.core.meta.call(null, c))
};
purnam.types.monad.join_map_r = function join_map_r(m) {
  return cljs.core.mapcat.call(null, function(p__17644) {
    var vec__17645 = p__17644;
    var k = cljs.core.nth.call(null, vec__17645, 0, null);
    var x = cljs.core.nth.call(null, vec__17645, 1, null);
    var e = vec__17645;
    if(cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.map.call(null, function(p__17646) {
        var vec__17647 = p__17646;
        var kx = cljs.core.nth.call(null, vec__17647, 0, null);
        var vx = cljs.core.nth.call(null, vec__17647, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(function() {
          var and__3474__auto__ = k;
          if(cljs.core.truth_(and__3474__auto__)) {
            return kx
          }else {
            return and__3474__auto__
          }
        }()) ? cljs.core.keyword.call(null, clojure.string.join.call(null, "/", cljs.core.map.call(null, cljs.core.name, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, kx], null))))) : function() {
          var or__3483__auto__ = k;
          if(cljs.core.truth_(or__3483__auto__)) {
            return or__3483__auto__
          }else {
            return kx
          }
        }(), vx], null)
      }, x)
    }else {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [e], null)
    }
  }, m)
};
purnam.types.monad.join_map = function join_map(m) {
  return cljs.core.into.call(null, cljs.core.empty.call(null, m), purnam.types.monad.join_map_r.call(null, m))
};
purnam.types.monad.bind_map = function() {
  var bind_map = null;
  var bind_map__2 = function(m, g) {
    return cljs.core.into.call(null, cljs.core.empty.call(null, m), purnam.types.monad.join_map_r.call(null, purnam.types.functor.fmap_map_r.call(null, m, g)))
  };
  var bind_map__3 = function(m, g, ms) {
    return cljs.core.into.call(null, cljs.core.empty.call(null, m), purnam.types.monad.join_map_r.call(null, purnam.types.functor.fmap_map_r.call(null, m, g, ms)))
  };
  bind_map = function(m, g, ms) {
    switch(arguments.length) {
      case 2:
        return bind_map__2.call(this, m, g);
      case 3:
        return bind_map__3.call(this, m, g, ms)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bind_map.cljs$core$IFn$_invoke$arity$2 = bind_map__2;
  bind_map.cljs$core$IFn$_invoke$arity$3 = bind_map__3;
  return bind_map
}();
purnam.types.monad.join_object_r = function join_object_r(m) {
  return cljs.core.mapcat.call(null, function(p__17652) {
    var vec__17653 = p__17652;
    var k = cljs.core.nth.call(null, vec__17653, 0, null);
    var x = cljs.core.nth.call(null, vec__17653, 1, null);
    var e = vec__17653;
    if(cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.map.call(null, function(p__17654) {
        var vec__17655 = p__17654;
        var kx = cljs.core.nth.call(null, vec__17655, 0, null);
        var vx = cljs.core.nth.call(null, vec__17655, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(function() {
          var and__3474__auto__ = k;
          if(cljs.core.truth_(and__3474__auto__)) {
            return kx
          }else {
            return and__3474__auto__
          }
        }()) ? clojure.string.join.call(null, "/", cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, kx], null))) : function() {
          var or__3483__auto__ = k;
          if(cljs.core.truth_(or__3483__auto__)) {
            return or__3483__auto__
          }else {
            return kx
          }
        }(), vx], null)
      }, x)
    }else {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [e], null)
    }
  }, m)
};
purnam.types.monad.join_object = function join_object(m) {
  purnam.types.clojure.obj_only.call(null, m, new cljs.core.Keyword(null, "join", "join", 1017172124));
  return cljs.core.apply.call(null, cljs.core.conj, function() {
    var obj17659 = {};
    return obj17659
  }(), purnam.types.monad.join_object_r.call(null, m))
};
purnam.types.monad.bind_object = function() {
  var bind_object = null;
  var bind_object__2 = function(m, g) {
    purnam.types.clojure.obj_only.call(null, m, new cljs.core.Keyword(null, "bind", "bind", 1016928175));
    return cljs.core.apply.call(null, cljs.core.conj, function() {
      var obj17666 = {};
      return obj17666
    }(), purnam.types.monad.join_object_r.call(null, purnam.types.functor.fmap_map_r.call(null, m, g)))
  };
  var bind_object__3 = function(m, g, ms) {
    cljs.core.mapv.call(null, function(p1__17660_SHARP_) {
      return purnam.types.clojure.obj_only.call(null, p1__17660_SHARP_, new cljs.core.Keyword(null, "bind", "bind", 1016928175))
    }, cljs.core.conj.call(null, ms, m));
    return cljs.core.apply.call(null, cljs.core.conj, function() {
      var obj17668 = {};
      return obj17668
    }(), purnam.types.monad.join_object_r.call(null, purnam.types.functor.fmap_map_r.call(null, m, g, ms)))
  };
  bind_object = function(m, g, ms) {
    switch(arguments.length) {
      case 2:
        return bind_object__2.call(this, m, g);
      case 3:
        return bind_object__3.call(this, m, g, ms)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bind_object.cljs$core$IFn$_invoke$arity$2 = bind_object__2;
  bind_object.cljs$core$IFn$_invoke$arity$3 = bind_object__3;
  return bind_object
}();
purnam.protocols.Monad["null"] = true;
purnam.protocols.bind["null"] = function() {
  var G__17669 = null;
  var G__17669__2 = function(_, ___$1) {
    return null
  };
  var G__17669__3 = function(_, ___$1, ___$2) {
    return null
  };
  G__17669 = function(_, ___$1, ___$2) {
    switch(arguments.length) {
      case 2:
        return G__17669__2.call(this, _, ___$1);
      case 3:
        return G__17669__3.call(this, _, ___$1, ___$2)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17669
}();
purnam.protocols.join["null"] = function(_) {
  return null
};
purnam.protocols.Monad["object"] = true;
purnam.protocols.bind["object"] = function() {
  var G__17670 = null;
  var G__17670__2 = function(mv, g) {
    return purnam.types.monad.bind_object.call(null, mv, g)
  };
  var G__17670__3 = function(mv, g, mvs) {
    return purnam.types.monad.bind_object.call(null, mv, g, mvs)
  };
  G__17670 = function(mv, g, mvs) {
    switch(arguments.length) {
      case 2:
        return G__17670__2.call(this, mv, g);
      case 3:
        return G__17670__3.call(this, mv, g, mvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17670
}();
purnam.protocols.join["object"] = function(mv) {
  return purnam.types.monad.join_object.call(null, mv)
};
purnam.protocols.Monad["array"] = true;
purnam.protocols.bind["array"] = function() {
  var G__17671 = null;
  var G__17671__2 = function(mv, g) {
    return purnam.types.monad.bind_array.call(null, mv, g)
  };
  var G__17671__3 = function(mv, g, mvs) {
    return purnam.types.monad.bind_array.call(null, mv, g, mvs)
  };
  G__17671 = function(mv, g, mvs) {
    switch(arguments.length) {
      case 2:
        return G__17671__2.call(this, mv, g);
      case 3:
        return G__17671__3.call(this, mv, g, mvs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17671
}();
purnam.protocols.join["array"] = function(mv) {
  return purnam.types.monad.join_array.call(null, mv)
};
cljs.core.Atom.prototype.purnam$protocols$Monad$ = true;
cljs.core.Atom.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_default.call(null, mv__$1, g)
};
cljs.core.Atom.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_default.call(null, mv__$1, g, mvs)
};
cljs.core.Atom.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_atom.call(null, mv__$1)
};
cljs.core.LazySeq.prototype.purnam$protocols$Monad$ = true;
cljs.core.LazySeq.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_lazyseq.call(null, mv__$1, g)
};
cljs.core.LazySeq.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_lazyseq.call(null, mv__$1, g, mvs)
};
cljs.core.LazySeq.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_seq.call(null, mv__$1)
};
cljs.core.EmptyList.prototype.purnam$protocols$Monad$ = true;
cljs.core.EmptyList.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g)
};
cljs.core.EmptyList.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g, mvs)
};
cljs.core.EmptyList.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_list.call(null, mv__$1)
};
cljs.core.IndexedSeq.prototype.purnam$protocols$Monad$ = true;
cljs.core.IndexedSeq.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g)
};
cljs.core.IndexedSeq.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g, mvs)
};
cljs.core.IndexedSeq.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_list.call(null, mv__$1)
};
cljs.core.RSeq.prototype.purnam$protocols$Monad$ = true;
cljs.core.RSeq.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g)
};
cljs.core.RSeq.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g, mvs)
};
cljs.core.RSeq.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_list.call(null, mv__$1)
};
cljs.core.NodeSeq.prototype.purnam$protocols$Monad$ = true;
cljs.core.NodeSeq.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g)
};
cljs.core.NodeSeq.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g, mvs)
};
cljs.core.NodeSeq.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_list.call(null, mv__$1)
};
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Monad$ = true;
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g)
};
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g, mvs)
};
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_list.call(null, mv__$1)
};
cljs.core.List.prototype.purnam$protocols$Monad$ = true;
cljs.core.List.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g)
};
cljs.core.List.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g, mvs)
};
cljs.core.List.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_list.call(null, mv__$1)
};
cljs.core.Cons.prototype.purnam$protocols$Monad$ = true;
cljs.core.Cons.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g)
};
cljs.core.Cons.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g, mvs)
};
cljs.core.Cons.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_list.call(null, mv__$1)
};
cljs.core.ChunkedCons.prototype.purnam$protocols$Monad$ = true;
cljs.core.ChunkedCons.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g)
};
cljs.core.ChunkedCons.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g, mvs)
};
cljs.core.ChunkedCons.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_list.call(null, mv__$1)
};
cljs.core.ChunkedSeq.prototype.purnam$protocols$Monad$ = true;
cljs.core.ChunkedSeq.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g)
};
cljs.core.ChunkedSeq.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g, mvs)
};
cljs.core.ChunkedSeq.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_list.call(null, mv__$1)
};
cljs.core.KeySeq.prototype.purnam$protocols$Monad$ = true;
cljs.core.KeySeq.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g)
};
cljs.core.KeySeq.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g, mvs)
};
cljs.core.KeySeq.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_list.call(null, mv__$1)
};
cljs.core.ValSeq.prototype.purnam$protocols$Monad$ = true;
cljs.core.ValSeq.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g)
};
cljs.core.ValSeq.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g, mvs)
};
cljs.core.ValSeq.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_list.call(null, mv__$1)
};
cljs.core.Range.prototype.purnam$protocols$Monad$ = true;
cljs.core.Range.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g)
};
cljs.core.Range.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g, mvs)
};
cljs.core.Range.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_list.call(null, mv__$1)
};
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Monad$ = true;
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g)
};
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_list.call(null, mv__$1, g, mvs)
};
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_list.call(null, mv__$1)
};
cljs.core.PersistentVector.prototype.purnam$protocols$Monad$ = true;
cljs.core.PersistentVector.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_coll.call(null, mv__$1, g)
};
cljs.core.PersistentVector.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_coll.call(null, mv__$1, g, mvs)
};
cljs.core.PersistentVector.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_coll.call(null, mv__$1)
};
cljs.core.Subvec.prototype.purnam$protocols$Monad$ = true;
cljs.core.Subvec.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_coll.call(null, mv__$1, g)
};
cljs.core.Subvec.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_coll.call(null, mv__$1, g, mvs)
};
cljs.core.Subvec.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_coll.call(null, mv__$1)
};
cljs.core.BlackNode.prototype.purnam$protocols$Monad$ = true;
cljs.core.BlackNode.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_coll.call(null, mv__$1, g)
};
cljs.core.BlackNode.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_coll.call(null, mv__$1, g, mvs)
};
cljs.core.BlackNode.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_coll.call(null, mv__$1)
};
cljs.core.RedNode.prototype.purnam$protocols$Monad$ = true;
cljs.core.RedNode.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_coll.call(null, mv__$1, g)
};
cljs.core.RedNode.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_coll.call(null, mv__$1, g, mvs)
};
cljs.core.RedNode.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_coll.call(null, mv__$1)
};
cljs.core.PersistentHashSet.prototype.purnam$protocols$Monad$ = true;
cljs.core.PersistentHashSet.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_coll.call(null, mv__$1, g)
};
cljs.core.PersistentHashSet.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_coll.call(null, mv__$1, g, mvs)
};
cljs.core.PersistentHashSet.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_coll.call(null, mv__$1)
};
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Monad$ = true;
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_coll.call(null, mv__$1, g)
};
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_coll.call(null, mv__$1, g, mvs)
};
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_coll.call(null, mv__$1)
};
cljs.core.PersistentHashMap.prototype.purnam$protocols$Monad$ = true;
cljs.core.PersistentHashMap.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_map.call(null, mv__$1, g)
};
cljs.core.PersistentHashMap.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_map.call(null, mv__$1, g, mvs)
};
cljs.core.PersistentHashMap.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_map.call(null, mv__$1)
};
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Monad$ = true;
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_map.call(null, mv__$1, g)
};
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_map.call(null, mv__$1, g, mvs)
};
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_map.call(null, mv__$1)
};
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Monad$ = true;
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Monad$bind$arity$2 = function(mv, g) {
  var mv__$1 = this;
  return purnam.types.monad.bind_map.call(null, mv__$1, g)
};
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Monad$bind$arity$3 = function(mv, g, mvs) {
  var mv__$1 = this;
  return purnam.types.monad.bind_map.call(null, mv__$1, g, mvs)
};
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Monad$join$arity$1 = function(mv) {
  var mv__$1 = this;
  return purnam.types.monad.join_map.call(null, mv__$1)
};
goog.provide("purnam.types.monoid");
goog.require("cljs.core");
goog.require("purnam.types.clojure");
goog.require("purnam.protocols");
goog.require("purnam.protocols");
goog.require("purnam.types.clojure");
purnam.protocols.Monoid["null"] = true;
purnam.protocols.id["null"] = function(_) {
  return null
};
purnam.protocols.Monoid["object"] = true;
purnam.protocols.id["object"] = function(m) {
  purnam.types.clojure.obj_only.call(null, m, new cljs.core.Keyword(null, "id", "id", 1013907597));
  var obj17613 = {};
  return obj17613
};
purnam.protocols.Monoid["array"] = true;
purnam.protocols.id["array"] = function(m) {
  return[]
};
purnam.protocols.Monoid["function"] = true;
purnam.protocols.id["function"] = function(m) {
  return cljs.core.identity
};
purnam.protocols.Monoid["string"] = true;
purnam.protocols.id["string"] = function(m) {
  return""
};
purnam.protocols.Monoid["number"] = true;
purnam.protocols.id["number"] = function(m) {
  return 0
};
cljs.core.Keyword.prototype.purnam$protocols$Monoid$ = true;
cljs.core.Keyword.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.keyword.call(null, "")
};
cljs.core.Atom.prototype.purnam$protocols$Monoid$ = true;
cljs.core.Atom.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.atom.call(null, purnam.protocols.id.call(null, cljs.core.deref.call(null, m__$1)))
};
cljs.core.LazySeq.prototype.purnam$protocols$Monoid$ = true;
cljs.core.LazySeq.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.PersistentVector.EMPTY
  }, null, null)
};
cljs.core.EmptyList.prototype.purnam$protocols$Monoid$ = true;
cljs.core.EmptyList.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.IndexedSeq.prototype.purnam$protocols$Monoid$ = true;
cljs.core.IndexedSeq.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.RSeq.prototype.purnam$protocols$Monoid$ = true;
cljs.core.RSeq.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.NodeSeq.prototype.purnam$protocols$Monoid$ = true;
cljs.core.NodeSeq.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Monoid$ = true;
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.List.prototype.purnam$protocols$Monoid$ = true;
cljs.core.List.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.Cons.prototype.purnam$protocols$Monoid$ = true;
cljs.core.Cons.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.ChunkedCons.prototype.purnam$protocols$Monoid$ = true;
cljs.core.ChunkedCons.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.ChunkedSeq.prototype.purnam$protocols$Monoid$ = true;
cljs.core.ChunkedSeq.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.KeySeq.prototype.purnam$protocols$Monoid$ = true;
cljs.core.KeySeq.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.ValSeq.prototype.purnam$protocols$Monoid$ = true;
cljs.core.ValSeq.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.Range.prototype.purnam$protocols$Monoid$ = true;
cljs.core.Range.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Monoid$ = true;
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.EmptyList.prototype.purnam$protocols$Monoid$ = true;
cljs.core.EmptyList.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.PersistentVector.prototype.purnam$protocols$Monoid$ = true;
cljs.core.PersistentVector.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.PersistentVector.EMPTY
};
cljs.core.Subvec.prototype.purnam$protocols$Monoid$ = true;
cljs.core.Subvec.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.PersistentVector.EMPTY
};
cljs.core.BlackNode.prototype.purnam$protocols$Monoid$ = true;
cljs.core.BlackNode.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.PersistentVector.EMPTY
};
cljs.core.RedNode.prototype.purnam$protocols$Monoid$ = true;
cljs.core.RedNode.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.PersistentVector.EMPTY
};
cljs.core.PersistentHashSet.prototype.purnam$protocols$Monoid$ = true;
cljs.core.PersistentHashSet.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.PersistentHashSet.EMPTY
};
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Monoid$ = true;
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.PersistentHashSet.EMPTY
};
cljs.core.PersistentHashMap.prototype.purnam$protocols$Monoid$ = true;
cljs.core.PersistentHashMap.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.PersistentHashMap.EMPTY
};
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Monoid$ = true;
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.PersistentHashMap.EMPTY
};
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Monoid$ = true;
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Monoid$id$arity$1 = function(m) {
  var m__$1 = this;
  return cljs.core.PersistentHashMap.EMPTY
};
goog.provide("purnam.types.maybe");
goog.require("cljs.core");
goog.require("purnam.protocols");
goog.require("purnam.protocols");
purnam.types.maybe.Just = function(v) {
  this.v = v
};
purnam.types.maybe.Just.cljs$lang$type = true;
purnam.types.maybe.Just.cljs$lang$ctorStr = "purnam.types.maybe/Just";
purnam.types.maybe.Just.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opt__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "purnam.types.maybe/Just")
};
purnam.types.maybe.Just.prototype.purnam$protocols$Monoid$ = true;
purnam.types.maybe.Just.prototype.purnam$protocols$Monoid$id$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null
};
purnam.types.maybe.Just.prototype.purnam$protocols$Magma$ = true;
purnam.types.maybe.Just.prototype.purnam$protocols$Magma$op$arity$2 = function(x, y) {
  var self__ = this;
  var x__$1 = this;
  if(!(y == null)) {
    return new purnam.types.maybe.Just(purnam.protocols.op.call(null, self__.v, purnam.protocols.fold.call(null, y)))
  }else {
    return x__$1
  }
};
purnam.types.maybe.Just.prototype.purnam$protocols$Magma$op$arity$3 = function(x, y, ys) {
  var self__ = this;
  var x__$1 = this;
  var temp__4090__auto__ = cljs.core.map.call(null, purnam.protocols.fold, cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.cons.call(null, y, ys)));
  if(cljs.core.truth_(temp__4090__auto__)) {
    var ys_STAR_ = temp__4090__auto__;
    return new purnam.types.maybe.Just(purnam.protocols.op.call(null, self__.v, cljs.core.first.call(null, ys_STAR_), cljs.core.rest.call(null, ys_STAR_)))
  }else {
    return x__$1
  }
};
purnam.types.maybe.Just.prototype.purnam$protocols$Foldable$ = true;
purnam.types.maybe.Just.prototype.purnam$protocols$Foldable$fold$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.v
};
purnam.types.maybe.Just.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(_, g) {
  var self__ = this;
  var ___$1 = this;
  return g.call(null, self__.v)
};
purnam.types.maybe.Just.prototype.purnam$protocols$Monad$ = true;
purnam.types.maybe.Just.prototype.purnam$protocols$Monad$bind$arity$2 = function(_, g) {
  var self__ = this;
  var ___$1 = this;
  return g.call(null, self__.v)
};
purnam.types.maybe.Just.prototype.purnam$protocols$Monad$bind$arity$3 = function(_, g, jvs) {
  var self__ = this;
  var ___$1 = this;
  if(cljs.core.truth_(cljs.core.some.call(null, cljs.core.nil_QMARK_, jvs))) {
    return null
  }else {
    return cljs.core.apply.call(null, g, self__.v, cljs.core.map.call(null, purnam.protocols.fold, jvs))
  }
};
purnam.types.maybe.Just.prototype.purnam$protocols$Monad$join$arity$1 = function(jjv) {
  var self__ = this;
  var jjv__$1 = this;
  if(self__.v == null || self__.v instanceof purnam.types.maybe.Just) {
    return self__.v
  }else {
    return jjv__$1
  }
};
purnam.types.maybe.Just.prototype.purnam$protocols$Applicative$ = true;
purnam.types.maybe.Just.prototype.purnam$protocols$Applicative$pure$arity$2 = function(_, x) {
  var self__ = this;
  var ___$1 = this;
  return new purnam.types.maybe.Just(x)
};
purnam.types.maybe.Just.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(_, jv) {
  var self__ = this;
  var ___$1 = this;
  return purnam.protocols.fmap.call(null, jv, self__.v)
};
purnam.types.maybe.Just.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(_, jv, jvs) {
  var self__ = this;
  var ___$1 = this;
  return purnam.protocols.fmap.call(null, jv, self__.v, jvs)
};
purnam.types.maybe.Just.prototype.purnam$protocols$Functor$ = true;
purnam.types.maybe.Just.prototype.purnam$protocols$Functor$fmap$arity$2 = function(_, g) {
  var self__ = this;
  var ___$1 = this;
  return new purnam.types.maybe.Just(g.call(null, self__.v))
};
purnam.types.maybe.Just.prototype.purnam$protocols$Functor$fmap$arity$3 = function(_, g, jvs) {
  var self__ = this;
  var ___$1 = this;
  if(cljs.core.truth_(cljs.core.some.call(null, cljs.core.nil_QMARK_, jvs))) {
    return null
  }else {
    return new purnam.types.maybe.Just(cljs.core.apply.call(null, g, self__.v, cljs.core.map.call(null, purnam.protocols.fold, jvs)))
  }
};
purnam.types.maybe.Just.prototype.hashCode = function() {
  var self__ = this;
  var _ = this;
  return cljs.core.hash.call(null, self__.v)
};
purnam.types.maybe.Just.prototype.equals = function(that) {
  var self__ = this;
  var this$ = this;
  return this$ === that || that instanceof purnam.types.maybe.Just && cljs.core._EQ_.call(null, self__.v, purnam.protocols.fold.call(null, that))
};
purnam.types.maybe.__GT_Just = function __GT_Just(v) {
  return new purnam.types.maybe.Just(v)
};
goog.provide("purnam.types.applicative");
goog.require("cljs.core");
goog.require("purnam.protocols");
goog.require("purnam.types.functor");
goog.require("purnam.types.clojure");
goog.require("purnam.native$");
goog.require("purnam.protocols");
goog.require("purnam.types.functor");
goog.require("purnam.types.clojure");
goog.require("purnam.native$");
purnam.types.applicative.fapply_array = function() {
  var fapply_array = null;
  var fapply_array__2 = function(ag, av) {
    return purnam.native$.js_mapcat.call(null, function(p1__17571_SHARP_) {
      return purnam.native$.js_map.call(null, p1__17571_SHARP_, av)
    }, ag)
  };
  var fapply_array__3 = function(ag, av, avs) {
    return purnam.native$.js_mapcat.call(null, function(p1__17572_SHARP_) {
      return cljs.core.apply.call(null, purnam.native$.js_map, p1__17572_SHARP_, av, avs)
    }, ag)
  };
  fapply_array = function(ag, av, avs) {
    switch(arguments.length) {
      case 2:
        return fapply_array__2.call(this, ag, av);
      case 3:
        return fapply_array__3.call(this, ag, av, avs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fapply_array.cljs$core$IFn$_invoke$arity$2 = fapply_array__2;
  fapply_array.cljs$core$IFn$_invoke$arity$3 = fapply_array__3;
  return fapply_array
}();
purnam.types.applicative.fapply_atom = function() {
  var fapply_atom = null;
  var fapply_atom__2 = function(ag, av) {
    return purnam.protocols.fmap.call(null, av, cljs.core.deref.call(null, ag))
  };
  var fapply_atom__3 = function(ag, av, avs) {
    return purnam.protocols.fmap.call(null, av, cljs.core.deref.call(null, ag), avs)
  };
  fapply_atom = function(ag, av, avs) {
    switch(arguments.length) {
      case 2:
        return fapply_atom__2.call(this, ag, av);
      case 3:
        return fapply_atom__3.call(this, ag, av, avs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fapply_atom.cljs$core$IFn$_invoke$arity$2 = fapply_atom__2;
  fapply_atom.cljs$core$IFn$_invoke$arity$3 = fapply_atom__3;
  return fapply_atom
}();
purnam.types.applicative.pure_coll = function pure_coll(av, v) {
  return cljs.core.conj.call(null, cljs.core.empty.call(null, av), v)
};
purnam.types.applicative.fapply_coll = function() {
  var fapply_coll = null;
  var fapply_coll__2 = function(ag, av) {
    return cljs.core.into.call(null, cljs.core.empty.call(null, av), cljs.core.mapcat.call(null, function(p1__17573_SHARP_) {
      return cljs.core.map.call(null, p1__17573_SHARP_, av)
    }, ag))
  };
  var fapply_coll__3 = function(ag, av, avs) {
    return cljs.core.into.call(null, cljs.core.empty.call(null, av), cljs.core.mapcat.call(null, function(p1__17574_SHARP_) {
      return cljs.core.apply.call(null, cljs.core.map, p1__17574_SHARP_, av, avs)
    }, ag))
  };
  fapply_coll = function(ag, av, avs) {
    switch(arguments.length) {
      case 2:
        return fapply_coll__2.call(this, ag, av);
      case 3:
        return fapply_coll__3.call(this, ag, av, avs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fapply_coll.cljs$core$IFn$_invoke$arity$2 = fapply_coll__2;
  fapply_coll.cljs$core$IFn$_invoke$arity$3 = fapply_coll__3;
  return fapply_coll
}();
purnam.types.applicative.fapply_list = function() {
  var fapply_list = null;
  var fapply_list__2 = function(ag, av) {
    return cljs.core.apply.call(null, cljs.core.list, cljs.core.mapcat.call(null, function(p1__17575_SHARP_) {
      return cljs.core.map.call(null, p1__17575_SHARP_, av)
    }, ag))
  };
  var fapply_list__3 = function(ag, av, avs) {
    return cljs.core.apply.call(null, cljs.core.list, cljs.core.mapcat.call(null, function(p1__17576_SHARP_) {
      return cljs.core.apply.call(null, cljs.core.map, p1__17576_SHARP_, av, avs)
    }, ag))
  };
  fapply_list = function(ag, av, avs) {
    switch(arguments.length) {
      case 2:
        return fapply_list__2.call(this, ag, av);
      case 3:
        return fapply_list__3.call(this, ag, av, avs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fapply_list.cljs$core$IFn$_invoke$arity$2 = fapply_list__2;
  fapply_list.cljs$core$IFn$_invoke$arity$3 = fapply_list__3;
  return fapply_list
}();
purnam.types.applicative.fapply_lazyseq = function() {
  var fapply_lazyseq = null;
  var fapply_lazyseq__2 = function(ag, av) {
    return cljs.core.mapcat.call(null, function(p1__17577_SHARP_) {
      return cljs.core.map.call(null, p1__17577_SHARP_, av)
    }, ag)
  };
  var fapply_lazyseq__3 = function(ag, av, avs) {
    return cljs.core.mapcat.call(null, function(p1__17578_SHARP_) {
      return cljs.core.apply.call(null, cljs.core.map, p1__17578_SHARP_, av, avs)
    }, ag)
  };
  fapply_lazyseq = function(ag, av, avs) {
    switch(arguments.length) {
      case 2:
        return fapply_lazyseq__2.call(this, ag, av);
      case 3:
        return fapply_lazyseq__3.call(this, ag, av, avs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fapply_lazyseq.cljs$core$IFn$_invoke$arity$2 = fapply_lazyseq__2;
  fapply_lazyseq.cljs$core$IFn$_invoke$arity$3 = fapply_lazyseq__3;
  return fapply_lazyseq
}();
purnam.types.applicative.fapply_map = function() {
  var fapply_map = null;
  var fapply_map__2 = function(ag, av) {
    return cljs.core.into.call(null, function() {
      var temp__4090__auto__ = ag.call(null, null);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var f = temp__4090__auto__;
        return purnam.protocols.fmap.call(null, av, f)
      }else {
        return av
      }
    }(), cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, function(p__17584) {
      var vec__17585 = p__17584;
      var kg = cljs.core.nth.call(null, vec__17585, 0, null);
      var vg = cljs.core.nth.call(null, vec__17585, 1, null);
      var temp__4090__auto__ = cljs.core.find.call(null, av, kg);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var vec__17586 = temp__4090__auto__;
        var kv = cljs.core.nth.call(null, vec__17586, 0, null);
        var vv = cljs.core.nth.call(null, vec__17586, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [kv, vg.call(null, vv)], null)
      }else {
        return null
      }
    }, ag)))
  };
  var fapply_map__3 = function(ag, av, avs) {
    return cljs.core.into.call(null, function() {
      var temp__4090__auto__ = ag.call(null, null);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var f = temp__4090__auto__;
        return purnam.protocols.fmap.call(null, av, f, avs)
      }else {
        return cljs.core.apply.call(null, cljs.core.merge, av, avs)
      }
    }(), cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, function(p__17587) {
      var vec__17588 = p__17587;
      var kg = cljs.core.nth.call(null, vec__17588, 0, null);
      var vg = cljs.core.nth.call(null, vec__17588, 1, null);
      var temp__4090__auto__ = cljs.core.seq.call(null, cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, purnam.types.functor.group_entries.call(null, kg, cljs.core.cons.call(null, av, avs))));
      if(temp__4090__auto__) {
        var vs = temp__4090__auto__;
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [kg, cljs.core.apply.call(null, vg, vs)], null)
      }else {
        return null
      }
    }, ag)))
  };
  fapply_map = function(ag, av, avs) {
    switch(arguments.length) {
      case 2:
        return fapply_map__2.call(this, ag, av);
      case 3:
        return fapply_map__3.call(this, ag, av, avs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fapply_map.cljs$core$IFn$_invoke$arity$2 = fapply_map__2;
  fapply_map.cljs$core$IFn$_invoke$arity$3 = fapply_map__3;
  return fapply_map
}();
purnam.types.applicative.pure_object = function pure_object(av, v) {
  purnam.types.clojure.obj_only.call(null, av, new cljs.core.Keyword(null, "pure", "pure", 1017356906));
  var G__17593 = function() {
    var obj17596 = {};
    return obj17596
  }();
  G__17593[""] = v;
  return G__17593
};
purnam.types.applicative.fapply_object = function() {
  var fapply_object = null;
  var fapply_object__2 = function(ag, av) {
    cljs.core.mapv.call(null, function(p1__17597_SHARP_) {
      return purnam.types.clojure.obj_only.call(null, p1__17597_SHARP_, new cljs.core.Keyword(null, "fapply", "fapply", 4027106874))
    }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ag, av], null));
    return cljs.core.apply.call(null, cljs.core.conj, function() {
      var temp__4090__auto__ = cljs.core.get.call(null, ag, null);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var f = temp__4090__auto__;
        return purnam.protocols.fmap.call(null, av, f)
      }else {
        return av
      }
    }(), cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, function(p__17604) {
      var vec__17605 = p__17604;
      var kg = cljs.core.nth.call(null, vec__17605, 0, null);
      var vg = cljs.core.nth.call(null, vec__17605, 1, null);
      var temp__4090__auto__ = cljs.core.find.call(null, av, kg);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var vec__17606 = temp__4090__auto__;
        var kv = cljs.core.nth.call(null, vec__17606, 0, null);
        var vv = cljs.core.nth.call(null, vec__17606, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [kv, vg.call(null, vv)], null)
      }else {
        return null
      }
    }, ag)))
  };
  var fapply_object__3 = function(ag, av, avs) {
    cljs.core.mapv.call(null, function(p1__17598_SHARP_) {
      return purnam.types.clojure.obj_only.call(null, p1__17598_SHARP_, new cljs.core.Keyword(null, "fapply", "fapply", 4027106874))
    }, cljs.core.conj.call(null, avs, ag, av));
    return cljs.core.apply.call(null, cljs.core.conj, function() {
      var temp__4090__auto__ = cljs.core.get.call(null, ag, null);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var f = temp__4090__auto__;
        return purnam.protocols.fmap.call(null, av, f, avs)
      }else {
        return purnam.native$.js_merge.call(null, av, avs)
      }
    }(), cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, function(p__17607) {
      var vec__17608 = p__17607;
      var kg = cljs.core.nth.call(null, vec__17608, 0, null);
      var vg = cljs.core.nth.call(null, vec__17608, 1, null);
      var temp__4090__auto__ = cljs.core.seq.call(null, cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, purnam.types.functor.group_entries.call(null, kg, cljs.core.cons.call(null, av, avs))));
      if(temp__4090__auto__) {
        var vs = temp__4090__auto__;
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [kg, cljs.core.apply.call(null, vg, vs)], null)
      }else {
        return null
      }
    }, ag)))
  };
  fapply_object = function(ag, av, avs) {
    switch(arguments.length) {
      case 2:
        return fapply_object__2.call(this, ag, av);
      case 3:
        return fapply_object__3.call(this, ag, av, avs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fapply_object.cljs$core$IFn$_invoke$arity$2 = fapply_object__2;
  fapply_object.cljs$core$IFn$_invoke$arity$3 = fapply_object__3;
  return fapply_object
}();
purnam.protocols.Applicative["null"] = true;
purnam.protocols.pure["null"] = function(_, ___$1) {
  return null
};
purnam.protocols.fapply["null"] = function() {
  var G__17609 = null;
  var G__17609__2 = function(_, ___$1) {
    return null
  };
  var G__17609__3 = function(_, ___$1, ___$2) {
    return null
  };
  G__17609 = function(_, ___$1, ___$2) {
    switch(arguments.length) {
      case 2:
        return G__17609__2.call(this, _, ___$1);
      case 3:
        return G__17609__3.call(this, _, ___$1, ___$2)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17609
}();
purnam.protocols.Applicative["object"] = true;
purnam.protocols.pure["object"] = function(av, v) {
  return purnam.types.applicative.pure_object.call(null, av, v)
};
purnam.protocols.fapply["object"] = function() {
  var G__17610 = null;
  var G__17610__2 = function(ag, av) {
    return purnam.types.applicative.fapply_object.call(null, ag, av)
  };
  var G__17610__3 = function(ag, av, avs) {
    return purnam.types.applicative.fapply_object.call(null, ag, av, avs)
  };
  G__17610 = function(ag, av, avs) {
    switch(arguments.length) {
      case 2:
        return G__17610__2.call(this, ag, av);
      case 3:
        return G__17610__3.call(this, ag, av, avs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17610
}();
purnam.protocols.Applicative["array"] = true;
purnam.protocols.pure["array"] = function(av, v) {
  return[v]
};
purnam.protocols.fapply["array"] = function() {
  var G__17611 = null;
  var G__17611__2 = function(ag, av) {
    return purnam.types.applicative.fapply_array.call(null, ag, av)
  };
  var G__17611__3 = function(ag, av, avs) {
    return purnam.types.applicative.fapply_array.call(null, ag, av, avs)
  };
  G__17611 = function(ag, av, avs) {
    switch(arguments.length) {
      case 2:
        return G__17611__2.call(this, ag, av);
      case 3:
        return G__17611__3.call(this, ag, av, avs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17611
}();
cljs.core.Atom.prototype.purnam$protocols$Applicative$ = true;
cljs.core.Atom.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core.atom.call(null, v)
};
cljs.core.Atom.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_atom.call(null, ag__$1, av)
};
cljs.core.Atom.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_atom.call(null, ag__$1, av, avs)
};
cljs.core.LazySeq.prototype.purnam$protocols$Applicative$ = true;
cljs.core.LazySeq.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return new cljs.core.LazySeq(null, function() {
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [v], null)
  }, null, null)
};
cljs.core.LazySeq.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_lazyseq.call(null, ag__$1, av)
};
cljs.core.LazySeq.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_lazyseq.call(null, ag__$1, av, avs)
};
cljs.core.IndexedSeq.prototype.purnam$protocols$Applicative$ = true;
cljs.core.IndexedSeq.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, v)
};
cljs.core.IndexedSeq.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av)
};
cljs.core.IndexedSeq.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av, avs)
};
cljs.core.RSeq.prototype.purnam$protocols$Applicative$ = true;
cljs.core.RSeq.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, v)
};
cljs.core.RSeq.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av)
};
cljs.core.RSeq.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av, avs)
};
cljs.core.NodeSeq.prototype.purnam$protocols$Applicative$ = true;
cljs.core.NodeSeq.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, v)
};
cljs.core.NodeSeq.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av)
};
cljs.core.NodeSeq.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av, avs)
};
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Applicative$ = true;
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, v)
};
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av)
};
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av, avs)
};
cljs.core.List.prototype.purnam$protocols$Applicative$ = true;
cljs.core.List.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, v)
};
cljs.core.List.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av)
};
cljs.core.List.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av, avs)
};
cljs.core.Cons.prototype.purnam$protocols$Applicative$ = true;
cljs.core.Cons.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, v)
};
cljs.core.Cons.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av)
};
cljs.core.Cons.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av, avs)
};
cljs.core.ChunkedCons.prototype.purnam$protocols$Applicative$ = true;
cljs.core.ChunkedCons.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, v)
};
cljs.core.ChunkedCons.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av)
};
cljs.core.ChunkedCons.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av, avs)
};
cljs.core.ChunkedSeq.prototype.purnam$protocols$Applicative$ = true;
cljs.core.ChunkedSeq.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, v)
};
cljs.core.ChunkedSeq.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av)
};
cljs.core.ChunkedSeq.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av, avs)
};
cljs.core.KeySeq.prototype.purnam$protocols$Applicative$ = true;
cljs.core.KeySeq.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, v)
};
cljs.core.KeySeq.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av)
};
cljs.core.KeySeq.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av, avs)
};
cljs.core.ValSeq.prototype.purnam$protocols$Applicative$ = true;
cljs.core.ValSeq.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, v)
};
cljs.core.ValSeq.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av)
};
cljs.core.ValSeq.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av, avs)
};
cljs.core.Range.prototype.purnam$protocols$Applicative$ = true;
cljs.core.Range.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, v)
};
cljs.core.Range.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av)
};
cljs.core.Range.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av, avs)
};
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Applicative$ = true;
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, v)
};
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av)
};
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av, avs)
};
cljs.core.EmptyList.prototype.purnam$protocols$Applicative$ = true;
cljs.core.EmptyList.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, v)
};
cljs.core.EmptyList.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av)
};
cljs.core.EmptyList.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_list.call(null, ag__$1, av, avs)
};
cljs.core.PersistentVector.prototype.purnam$protocols$Applicative$ = true;
cljs.core.PersistentVector.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [v], null)
};
cljs.core.PersistentVector.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_coll.call(null, ag__$1, av)
};
cljs.core.PersistentVector.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_coll.call(null, ag__$1, av, avs)
};
cljs.core.Subvec.prototype.purnam$protocols$Applicative$ = true;
cljs.core.Subvec.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [v], null)
};
cljs.core.Subvec.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_coll.call(null, ag__$1, av)
};
cljs.core.Subvec.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_coll.call(null, ag__$1, av, avs)
};
cljs.core.BlackNode.prototype.purnam$protocols$Applicative$ = true;
cljs.core.BlackNode.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [v], null)
};
cljs.core.BlackNode.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_coll.call(null, ag__$1, av)
};
cljs.core.BlackNode.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_coll.call(null, ag__$1, av, avs)
};
cljs.core.RedNode.prototype.purnam$protocols$Applicative$ = true;
cljs.core.RedNode.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [v], null)
};
cljs.core.RedNode.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_coll.call(null, ag__$1, av)
};
cljs.core.RedNode.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_coll.call(null, ag__$1, av, avs)
};
cljs.core.PersistentHashSet.prototype.purnam$protocols$Applicative$ = true;
cljs.core.PersistentHashSet.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core.PersistentHashSet.fromArray.call(null, [v], true)
};
cljs.core.PersistentHashSet.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_coll.call(null, ag__$1, av)
};
cljs.core.PersistentHashSet.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_coll.call(null, ag__$1, av, avs)
};
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Applicative$ = true;
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core.PersistentHashSet.fromArray.call(null, [v], true)
};
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_coll.call(null, ag__$1, av)
};
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_coll.call(null, ag__$1, av, avs)
};
cljs.core.PersistentHashMap.prototype.purnam$protocols$Applicative$ = true;
cljs.core.PersistentHashMap.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core.PersistentHashMap.fromArrays.call(null, [null], [v])
};
cljs.core.PersistentHashMap.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_map.call(null, ag__$1, av)
};
cljs.core.PersistentHashMap.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_map.call(null, ag__$1, av, avs)
};
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Applicative$ = true;
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core.PersistentHashMap.fromArrays.call(null, [null], [v])
};
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_map.call(null, ag__$1, av)
};
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_map.call(null, ag__$1, av, avs)
};
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Applicative$ = true;
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Applicative$pure$arity$2 = function(av, v) {
  var av__$1 = this;
  return cljs.core.PersistentHashMap.fromArrays.call(null, [null], [v])
};
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Applicative$fapply$arity$2 = function(ag, av) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_map.call(null, ag__$1, av)
};
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Applicative$fapply$arity$3 = function(ag, av, avs) {
  var ag__$1 = this;
  return purnam.types.applicative.fapply_map.call(null, ag__$1, av, avs)
};
goog.provide("purnam.types.foldable");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("purnam.types.clojure");
goog.require("purnam.protocols");
goog.require("purnam.protocols");
goog.require("purnam.types.clojure");
goog.require("purnam.native$");
purnam.types.foldable.fold_array = function fold_array(fd) {
  return cljs.core.reduce.call(null, purnam.protocols.op, fd)
};
purnam.types.foldable.foldmap_array = function foldmap_array(fd, g) {
  return purnam.protocols.fold.call(null, purnam.native$.js_map.call(null, g, fd))
};
purnam.types.foldable.fold_atom = function fold_atom(fd) {
  return cljs.core.deref.call(null, fd)
};
purnam.types.foldable.foldmap_atom = function foldmap_atom(fd, g) {
  return g.call(null, cljs.core.deref.call(null, fd))
};
purnam.types.foldable.fold_coll = function fold_coll(fd) {
  var ide = purnam.protocols.id.call(null, cljs.core.first.call(null, fd));
  return cljs.core.reduce.call(null, purnam.protocols.op, ide, fd)
};
purnam.types.foldable.foldmap_coll = function foldmap_coll(fd, g) {
  return purnam.protocols.fold.call(null, cljs.core.map.call(null, g, fd))
};
purnam.types.foldable.fold_map = function fold_map(fd) {
  return purnam.types.foldable.fold_coll.call(null, cljs.core.vals.call(null, fd))
};
purnam.types.foldable.foldmap_map = function foldmap_map(fd, g) {
  return purnam.types.foldable.foldmap_coll.call(null, cljs.core.seq.call(null, fd), g)
};
purnam.types.foldable.fold_object = function fold_object(fd) {
  purnam.types.clojure.obj_only.call(null, fd, new cljs.core.Keyword(null, "fold", "fold", 1017053043));
  return purnam.types.foldable.fold_coll.call(null, cljs.core.vals.call(null, fd))
};
purnam.types.foldable.foldmap_object = function foldmap_object(fd, g) {
  purnam.types.clojure.obj_only.call(null, fd, new cljs.core.Keyword(null, "fold", "fold", 1017053043));
  return purnam.types.foldable.foldmap_coll.call(null, cljs.core.seq.call(null, fd), g)
};
purnam.protocols.Foldable["null"] = true;
purnam.protocols.fold["null"] = function(_) {
  return null
};
purnam.protocols.foldmap["null"] = function(_, ___$1) {
  return null
};
purnam.protocols.Foldable["object"] = true;
purnam.protocols.fold["object"] = function(fd) {
  return purnam.types.foldable.fold_object.call(null, fd)
};
purnam.protocols.foldmap["object"] = function(fd, g) {
  return purnam.types.foldable.foldmap_object.call(null, fd, g)
};
purnam.protocols.Foldable["array"] = true;
purnam.protocols.fold["array"] = function(fd) {
  return purnam.types.foldable.fold_array.call(null, fd)
};
purnam.protocols.foldmap["array"] = function(fd, g) {
  return purnam.types.foldable.foldmap_array.call(null, fd, g)
};
cljs.core.Atom.prototype.purnam$protocols$Foldable$ = true;
cljs.core.Atom.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_atom.call(null, fd__$1)
};
cljs.core.Atom.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_atom.call(null, fd__$1, g)
};
cljs.core.EmptyList.prototype.purnam$protocols$Foldable$ = true;
cljs.core.EmptyList.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.EmptyList.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.LazySeq.prototype.purnam$protocols$Foldable$ = true;
cljs.core.LazySeq.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.LazySeq.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.IndexedSeq.prototype.purnam$protocols$Foldable$ = true;
cljs.core.IndexedSeq.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.IndexedSeq.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.RSeq.prototype.purnam$protocols$Foldable$ = true;
cljs.core.RSeq.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.RSeq.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.NodeSeq.prototype.purnam$protocols$Foldable$ = true;
cljs.core.NodeSeq.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.NodeSeq.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Foldable$ = true;
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.ArrayNodeSeq.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.List.prototype.purnam$protocols$Foldable$ = true;
cljs.core.List.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.List.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.Cons.prototype.purnam$protocols$Foldable$ = true;
cljs.core.Cons.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.Cons.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.ChunkedCons.prototype.purnam$protocols$Foldable$ = true;
cljs.core.ChunkedCons.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.ChunkedCons.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.ChunkedSeq.prototype.purnam$protocols$Foldable$ = true;
cljs.core.ChunkedSeq.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.ChunkedSeq.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.KeySeq.prototype.purnam$protocols$Foldable$ = true;
cljs.core.KeySeq.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.KeySeq.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.ValSeq.prototype.purnam$protocols$Foldable$ = true;
cljs.core.ValSeq.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.ValSeq.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.Range.prototype.purnam$protocols$Foldable$ = true;
cljs.core.Range.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.Range.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Foldable$ = true;
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.PersistentArrayMapSeq.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.PersistentVector.prototype.purnam$protocols$Foldable$ = true;
cljs.core.PersistentVector.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.PersistentVector.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.Subvec.prototype.purnam$protocols$Foldable$ = true;
cljs.core.Subvec.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.Subvec.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.BlackNode.prototype.purnam$protocols$Foldable$ = true;
cljs.core.BlackNode.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.BlackNode.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.RedNode.prototype.purnam$protocols$Foldable$ = true;
cljs.core.RedNode.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.RedNode.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.PersistentHashSet.prototype.purnam$protocols$Foldable$ = true;
cljs.core.PersistentHashSet.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.PersistentHashSet.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Foldable$ = true;
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_coll.call(null, fd__$1)
};
cljs.core.PersistentTreeSet.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_coll.call(null, fd__$1, g)
};
cljs.core.PersistentHashMap.prototype.purnam$protocols$Foldable$ = true;
cljs.core.PersistentHashMap.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_map.call(null, fd__$1)
};
cljs.core.PersistentHashMap.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_map.call(null, fd__$1, g)
};
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Foldable$ = true;
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_map.call(null, fd__$1)
};
cljs.core.PersistentTreeMap.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_map.call(null, fd__$1, g)
};
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Foldable$ = true;
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Foldable$fold$arity$1 = function(fd) {
  var fd__$1 = this;
  return purnam.types.foldable.fold_map.call(null, fd__$1)
};
cljs.core.PersistentArrayMap.prototype.purnam$protocols$Foldable$foldmap$arity$2 = function(fd, g) {
  var fd__$1 = this;
  return purnam.types.foldable.foldmap_map.call(null, fd__$1, g)
};
goog.provide("purnam.core");
goog.require("cljs.core");
goog.require("purnam.common");
goog.require("purnam.types.curried");
goog.require("purnam.types.magma");
goog.require("purnam.protocols");
goog.require("purnam.protocols");
goog.require("purnam.types.clojure");
goog.require("purnam.types.functor");
goog.require("purnam.types.monad");
goog.require("purnam.common");
goog.require("purnam.types.monoid");
goog.require("purnam.types.maybe");
goog.require("purnam.types.applicative");
goog.require("purnam.types.foldable");
goog.require("purnam.native$");
purnam.core.js_map = cljs.core.symbol.call(null, [cljs.core.str(purnam.native$), cljs.core.str("/"), cljs.core.str(purnam.core.js_map)].join(""));
purnam.core.fmap = function() {
  var fmap = null;
  var fmap__1 = function(f) {
    if(cljs.core._EQ_.call(null, cljs.core.identity, f)) {
      return f
    }else {
      return function() {
        var G__17191__delegate = function(functor, more) {
          return cljs.core.apply.call(null, fmap, f, functor, more)
        };
        var G__17191 = function(functor, var_args) {
          var more = null;
          if(arguments.length > 1) {
            more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
          }
          return G__17191__delegate.call(this, functor, more)
        };
        G__17191.cljs$lang$maxFixedArity = 1;
        G__17191.cljs$lang$applyTo = function(arglist__17192) {
          var functor = cljs.core.first(arglist__17192);
          var more = cljs.core.rest(arglist__17192);
          return G__17191__delegate(functor, more)
        };
        G__17191.cljs$core$IFn$_invoke$arity$variadic = G__17191__delegate;
        return G__17191
      }()
    }
  };
  var fmap__2 = function(f, functor) {
    return purnam.protocols.fmap.call(null, functor, f)
  };
  var fmap__3 = function() {
    var G__17193__delegate = function(f, functor, more) {
      return purnam.protocols.fmap.call(null, functor, f, more)
    };
    var G__17193 = function(f, functor, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__17193__delegate.call(this, f, functor, more)
    };
    G__17193.cljs$lang$maxFixedArity = 2;
    G__17193.cljs$lang$applyTo = function(arglist__17194) {
      var f = cljs.core.first(arglist__17194);
      arglist__17194 = cljs.core.next(arglist__17194);
      var functor = cljs.core.first(arglist__17194);
      var more = cljs.core.rest(arglist__17194);
      return G__17193__delegate(f, functor, more)
    };
    G__17193.cljs$core$IFn$_invoke$arity$variadic = G__17193__delegate;
    return G__17193
  }();
  fmap = function(f, functor, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return fmap__1.call(this, f);
      case 2:
        return fmap__2.call(this, f, functor);
      default:
        return fmap__3.cljs$core$IFn$_invoke$arity$variadic(f, functor, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fmap.cljs$lang$maxFixedArity = 2;
  fmap.cljs$lang$applyTo = fmap__3.cljs$lang$applyTo;
  fmap.cljs$core$IFn$_invoke$arity$1 = fmap__1;
  fmap.cljs$core$IFn$_invoke$arity$2 = fmap__2;
  fmap.cljs$core$IFn$_invoke$arity$variadic = fmap__3.cljs$core$IFn$_invoke$arity$variadic;
  return fmap
}();
purnam.core.pure = function() {
  var pure = null;
  var pure__1 = function(applicative) {
    return function(p1__17195_SHARP_) {
      return purnam.protocols.pure.call(null, applicative, p1__17195_SHARP_)
    }
  };
  var pure__2 = function(applicative, x) {
    return purnam.protocols.pure.call(null, applicative, x)
  };
  pure = function(applicative, x) {
    switch(arguments.length) {
      case 1:
        return pure__1.call(this, applicative);
      case 2:
        return pure__2.call(this, applicative, x)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pure.cljs$core$IFn$_invoke$arity$1 = pure__1;
  pure.cljs$core$IFn$_invoke$arity$2 = pure__2;
  return pure
}();
purnam.core.fapply = function() {
  var fapply = null;
  var fapply__1 = function(af) {
    return function() {
      var G__17196__delegate = function(av, avs) {
        return cljs.core.apply.call(null, fapply, af, av, avs)
      };
      var G__17196 = function(av, var_args) {
        var avs = null;
        if(arguments.length > 1) {
          avs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
        }
        return G__17196__delegate.call(this, av, avs)
      };
      G__17196.cljs$lang$maxFixedArity = 1;
      G__17196.cljs$lang$applyTo = function(arglist__17197) {
        var av = cljs.core.first(arglist__17197);
        var avs = cljs.core.rest(arglist__17197);
        return G__17196__delegate(av, avs)
      };
      G__17196.cljs$core$IFn$_invoke$arity$variadic = G__17196__delegate;
      return G__17196
    }()
  };
  var fapply__2 = function(af, av) {
    return purnam.protocols.fapply.call(null, af, av)
  };
  var fapply__3 = function() {
    var G__17198__delegate = function(af, av, avs) {
      return purnam.protocols.fapply.call(null, af, av, avs)
    };
    var G__17198 = function(af, av, var_args) {
      var avs = null;
      if(arguments.length > 2) {
        avs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__17198__delegate.call(this, af, av, avs)
    };
    G__17198.cljs$lang$maxFixedArity = 2;
    G__17198.cljs$lang$applyTo = function(arglist__17199) {
      var af = cljs.core.first(arglist__17199);
      arglist__17199 = cljs.core.next(arglist__17199);
      var av = cljs.core.first(arglist__17199);
      var avs = cljs.core.rest(arglist__17199);
      return G__17198__delegate(af, av, avs)
    };
    G__17198.cljs$core$IFn$_invoke$arity$variadic = G__17198__delegate;
    return G__17198
  }();
  fapply = function(af, av, var_args) {
    var avs = var_args;
    switch(arguments.length) {
      case 1:
        return fapply__1.call(this, af);
      case 2:
        return fapply__2.call(this, af, av);
      default:
        return fapply__3.cljs$core$IFn$_invoke$arity$variadic(af, av, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fapply.cljs$lang$maxFixedArity = 2;
  fapply.cljs$lang$applyTo = fapply__3.cljs$lang$applyTo;
  fapply.cljs$core$IFn$_invoke$arity$1 = fapply__1;
  fapply.cljs$core$IFn$_invoke$arity$2 = fapply__2;
  fapply.cljs$core$IFn$_invoke$arity$variadic = fapply__3.cljs$core$IFn$_invoke$arity$variadic;
  return fapply
}();
purnam.core.op = function() {
  var op = null;
  var op__2 = function(x, y) {
    return purnam.protocols.op.call(null, x, y)
  };
  var op__3 = function() {
    var G__17200__delegate = function(x, y, ys) {
      return purnam.protocols.op.call(null, x, y, ys)
    };
    var G__17200 = function(x, y, var_args) {
      var ys = null;
      if(arguments.length > 2) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__17200__delegate.call(this, x, y, ys)
    };
    G__17200.cljs$lang$maxFixedArity = 2;
    G__17200.cljs$lang$applyTo = function(arglist__17201) {
      var x = cljs.core.first(arglist__17201);
      arglist__17201 = cljs.core.next(arglist__17201);
      var y = cljs.core.first(arglist__17201);
      var ys = cljs.core.rest(arglist__17201);
      return G__17200__delegate(x, y, ys)
    };
    G__17200.cljs$core$IFn$_invoke$arity$variadic = G__17200__delegate;
    return G__17200
  }();
  op = function(x, y, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 2:
        return op__2.call(this, x, y);
      default:
        return op__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  op.cljs$lang$maxFixedArity = 2;
  op.cljs$lang$applyTo = op__3.cljs$lang$applyTo;
  op.cljs$core$IFn$_invoke$arity$2 = op__2;
  op.cljs$core$IFn$_invoke$arity$variadic = op__3.cljs$core$IFn$_invoke$arity$variadic;
  return op
}();
purnam.core.id = function id(x) {
  return purnam.protocols.id.call(null, x)
};
purnam.core.fold = function fold(fd) {
  return purnam.protocols.fold.call(null, fd)
};
purnam.core.foldmap = function() {
  var foldmap = null;
  var foldmap__1 = function(f) {
    return function(fd) {
      return purnam.protocols.foldmap.call(null, fd, f)
    }
  };
  var foldmap__2 = function(f, fd) {
    return purnam.protocols.foldmap.call(null, fd, f)
  };
  foldmap = function(f, fd) {
    switch(arguments.length) {
      case 1:
        return foldmap__1.call(this, f);
      case 2:
        return foldmap__2.call(this, f, fd)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  foldmap.cljs$core$IFn$_invoke$arity$1 = foldmap__1;
  foldmap.cljs$core$IFn$_invoke$arity$2 = foldmap__2;
  return foldmap
}();
purnam.core._LT__STAR__GT_ = function() {
  var _LT__STAR__GT_ = null;
  var _LT__STAR__GT___1 = function(af) {
    return function() {
      var G__17202__delegate = function(a, as) {
        return cljs.core.apply.call(null, _LT__STAR__GT_, af, a, as)
      };
      var G__17202 = function(a, var_args) {
        var as = null;
        if(arguments.length > 1) {
          as = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
        }
        return G__17202__delegate.call(this, a, as)
      };
      G__17202.cljs$lang$maxFixedArity = 1;
      G__17202.cljs$lang$applyTo = function(arglist__17203) {
        var a = cljs.core.first(arglist__17203);
        var as = cljs.core.rest(arglist__17203);
        return G__17202__delegate(a, as)
      };
      G__17202.cljs$core$IFn$_invoke$arity$variadic = G__17202__delegate;
      return G__17202
    }()
  };
  var _LT__STAR__GT___2 = function(af, av) {
    return purnam.protocols.fapply.call(null, af, av)
  };
  var _LT__STAR__GT___3 = function() {
    var G__17204__delegate = function(af, av, avs) {
      return cljs.core.reduce.call(null, purnam.protocols.fapply, af, cljs.core.cons.call(null, av, avs))
    };
    var G__17204 = function(af, av, var_args) {
      var avs = null;
      if(arguments.length > 2) {
        avs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__17204__delegate.call(this, af, av, avs)
    };
    G__17204.cljs$lang$maxFixedArity = 2;
    G__17204.cljs$lang$applyTo = function(arglist__17205) {
      var af = cljs.core.first(arglist__17205);
      arglist__17205 = cljs.core.next(arglist__17205);
      var av = cljs.core.first(arglist__17205);
      var avs = cljs.core.rest(arglist__17205);
      return G__17204__delegate(af, av, avs)
    };
    G__17204.cljs$core$IFn$_invoke$arity$variadic = G__17204__delegate;
    return G__17204
  }();
  _LT__STAR__GT_ = function(af, av, var_args) {
    var avs = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__STAR__GT___1.call(this, af);
      case 2:
        return _LT__STAR__GT___2.call(this, af, av);
      default:
        return _LT__STAR__GT___3.cljs$core$IFn$_invoke$arity$variadic(af, av, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__STAR__GT_.cljs$lang$maxFixedArity = 2;
  _LT__STAR__GT_.cljs$lang$applyTo = _LT__STAR__GT___3.cljs$lang$applyTo;
  _LT__STAR__GT_.cljs$core$IFn$_invoke$arity$1 = _LT__STAR__GT___1;
  _LT__STAR__GT_.cljs$core$IFn$_invoke$arity$2 = _LT__STAR__GT___2;
  _LT__STAR__GT_.cljs$core$IFn$_invoke$arity$variadic = _LT__STAR__GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__STAR__GT_
}();
purnam.core.join = function join(monadic) {
  return purnam.protocols.join.call(null, monadic)
};
purnam.core.return$ = function return$(x) {
  return purnam.protocols.pure.call(null, purnam.common.get_context.call(null), x)
};
purnam.core.unit = purnam.core.return$;
purnam.core.bind = function() {
  var bind = null;
  var bind__1 = function(f) {
    return function() {
      var G__17210__delegate = function(monadic, ms) {
        return cljs.core.apply.call(null, bind, monadic, f, ms)
      };
      var G__17210 = function(monadic, var_args) {
        var ms = null;
        if(arguments.length > 1) {
          ms = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
        }
        return G__17210__delegate.call(this, monadic, ms)
      };
      G__17210.cljs$lang$maxFixedArity = 1;
      G__17210.cljs$lang$applyTo = function(arglist__17211) {
        var monadic = cljs.core.first(arglist__17211);
        var ms = cljs.core.rest(arglist__17211);
        return G__17210__delegate(monadic, ms)
      };
      G__17210.cljs$core$IFn$_invoke$arity$variadic = G__17210__delegate;
      return G__17210
    }()
  };
  var bind__2 = function(monadic, f) {
    var _STAR_pure_context_STAR_17208 = purnam.common._STAR_pure_context_STAR_;
    try {
      purnam.common._STAR_pure_context_STAR_ = monadic;
      return purnam.protocols.bind.call(null, monadic, f)
    }finally {
      purnam.common._STAR_pure_context_STAR_ = _STAR_pure_context_STAR_17208
    }
  };
  var bind__3 = function() {
    var G__17212__delegate = function(monadic, monadic2, args) {
      var _STAR_pure_context_STAR_17209 = purnam.common._STAR_pure_context_STAR_;
      try {
        purnam.common._STAR_pure_context_STAR_ = monadic;
        return purnam.protocols.bind.call(null, monadic, cljs.core.last.call(null, args), cljs.core.cons.call(null, monadic2, cljs.core.butlast.call(null, args)))
      }finally {
        purnam.common._STAR_pure_context_STAR_ = _STAR_pure_context_STAR_17209
      }
    };
    var G__17212 = function(monadic, monadic2, var_args) {
      var args = null;
      if(arguments.length > 2) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__17212__delegate.call(this, monadic, monadic2, args)
    };
    G__17212.cljs$lang$maxFixedArity = 2;
    G__17212.cljs$lang$applyTo = function(arglist__17213) {
      var monadic = cljs.core.first(arglist__17213);
      arglist__17213 = cljs.core.next(arglist__17213);
      var monadic2 = cljs.core.first(arglist__17213);
      var args = cljs.core.rest(arglist__17213);
      return G__17212__delegate(monadic, monadic2, args)
    };
    G__17212.cljs$core$IFn$_invoke$arity$variadic = G__17212__delegate;
    return G__17212
  }();
  bind = function(monadic, monadic2, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return bind__1.call(this, monadic);
      case 2:
        return bind__2.call(this, monadic, monadic2);
      default:
        return bind__3.cljs$core$IFn$_invoke$arity$variadic(monadic, monadic2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bind.cljs$lang$maxFixedArity = 2;
  bind.cljs$lang$applyTo = bind__3.cljs$lang$applyTo;
  bind.cljs$core$IFn$_invoke$arity$1 = bind__1;
  bind.cljs$core$IFn$_invoke$arity$2 = bind__2;
  bind.cljs$core$IFn$_invoke$arity$variadic = bind__3.cljs$core$IFn$_invoke$arity$variadic;
  return bind
}();
purnam.core._GT__GT__EQ_ = function() {
  var _GT__GT__EQ_ = null;
  var _GT__GT__EQ___1 = function(monadic) {
    return function() {
      var G__17214__delegate = function(f, fs) {
        return cljs.core.apply.call(null, _GT__GT__EQ_, monadic, f, fs)
      };
      var G__17214 = function(f, var_args) {
        var fs = null;
        if(arguments.length > 1) {
          fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
        }
        return G__17214__delegate.call(this, f, fs)
      };
      G__17214.cljs$lang$maxFixedArity = 1;
      G__17214.cljs$lang$applyTo = function(arglist__17215) {
        var f = cljs.core.first(arglist__17215);
        var fs = cljs.core.rest(arglist__17215);
        return G__17214__delegate(f, fs)
      };
      G__17214.cljs$core$IFn$_invoke$arity$variadic = G__17214__delegate;
      return G__17214
    }()
  };
  var _GT__GT__EQ___2 = function(monadic, f) {
    return purnam.core.bind.call(null, monadic, f)
  };
  var _GT__GT__EQ___3 = function() {
    var G__17216__delegate = function(monadic, f, fs) {
      return cljs.core.reduce.call(null, purnam.core.bind, monadic, cljs.core.cons.call(null, f, fs))
    };
    var G__17216 = function(monadic, f, var_args) {
      var fs = null;
      if(arguments.length > 2) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__17216__delegate.call(this, monadic, f, fs)
    };
    G__17216.cljs$lang$maxFixedArity = 2;
    G__17216.cljs$lang$applyTo = function(arglist__17217) {
      var monadic = cljs.core.first(arglist__17217);
      arglist__17217 = cljs.core.next(arglist__17217);
      var f = cljs.core.first(arglist__17217);
      var fs = cljs.core.rest(arglist__17217);
      return G__17216__delegate(monadic, f, fs)
    };
    G__17216.cljs$core$IFn$_invoke$arity$variadic = G__17216__delegate;
    return G__17216
  }();
  _GT__GT__EQ_ = function(monadic, f, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__GT__EQ___1.call(this, monadic);
      case 2:
        return _GT__GT__EQ___2.call(this, monadic, f);
      default:
        return _GT__GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(monadic, f, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__GT__EQ_.cljs$lang$applyTo = _GT__GT__EQ___3.cljs$lang$applyTo;
  _GT__GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__GT__EQ___1;
  _GT__GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__GT__EQ___2;
  _GT__GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__GT__EQ_
}();
purnam.core._GT__EQ__GT_ = function() {
  var _GT__EQ__GT_ = null;
  var _GT__EQ__GT___1 = function(f) {
    return function() {
      var G__17218__delegate = function(g, gs) {
        return cljs.core.apply.call(null, _GT__EQ__GT_, f, g, gs)
      };
      var G__17218 = function(g, var_args) {
        var gs = null;
        if(arguments.length > 1) {
          gs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
        }
        return G__17218__delegate.call(this, g, gs)
      };
      G__17218.cljs$lang$maxFixedArity = 1;
      G__17218.cljs$lang$applyTo = function(arglist__17219) {
        var g = cljs.core.first(arglist__17219);
        var gs = cljs.core.rest(arglist__17219);
        return G__17218__delegate(g, gs)
      };
      G__17218.cljs$core$IFn$_invoke$arity$variadic = G__17218__delegate;
      return G__17218
    }()
  };
  var _GT__EQ__GT___2 = function(f, g) {
    return function() {
      var G__17220 = null;
      var G__17220__1 = function(x) {
        return purnam.core.bind.call(null, f.call(null, x), g)
      };
      var G__17220__2 = function() {
        var G__17221__delegate = function(x, xs) {
          return purnam.core.bind.call(null, cljs.core.apply.call(null, f, x, xs), g)
        };
        var G__17221 = function(x, var_args) {
          var xs = null;
          if(arguments.length > 1) {
            xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
          }
          return G__17221__delegate.call(this, x, xs)
        };
        G__17221.cljs$lang$maxFixedArity = 1;
        G__17221.cljs$lang$applyTo = function(arglist__17222) {
          var x = cljs.core.first(arglist__17222);
          var xs = cljs.core.rest(arglist__17222);
          return G__17221__delegate(x, xs)
        };
        G__17221.cljs$core$IFn$_invoke$arity$variadic = G__17221__delegate;
        return G__17221
      }();
      G__17220 = function(x, var_args) {
        var xs = var_args;
        switch(arguments.length) {
          case 1:
            return G__17220__1.call(this, x);
          default:
            return G__17220__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17220.cljs$lang$maxFixedArity = 1;
      G__17220.cljs$lang$applyTo = G__17220__2.cljs$lang$applyTo;
      return G__17220
    }()
  };
  var _GT__EQ__GT___3 = function() {
    var G__17223__delegate = function(f, g, hs) {
      return function() {
        var G__17224 = null;
        var G__17224__1 = function(x) {
          return cljs.core.apply.call(null, purnam.core._GT__GT__EQ_, f.call(null, x), g, hs)
        };
        var G__17224__2 = function() {
          var G__17225__delegate = function(x, xs) {
            return cljs.core.apply.call(null, purnam.core._GT__GT__EQ_, cljs.core.apply.call(null, f, x, xs), g, hs)
          };
          var G__17225 = function(x, var_args) {
            var xs = null;
            if(arguments.length > 1) {
              xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
            }
            return G__17225__delegate.call(this, x, xs)
          };
          G__17225.cljs$lang$maxFixedArity = 1;
          G__17225.cljs$lang$applyTo = function(arglist__17226) {
            var x = cljs.core.first(arglist__17226);
            var xs = cljs.core.rest(arglist__17226);
            return G__17225__delegate(x, xs)
          };
          G__17225.cljs$core$IFn$_invoke$arity$variadic = G__17225__delegate;
          return G__17225
        }();
        G__17224 = function(x, var_args) {
          var xs = var_args;
          switch(arguments.length) {
            case 1:
              return G__17224__1.call(this, x);
            default:
              return G__17224__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__17224.cljs$lang$maxFixedArity = 1;
        G__17224.cljs$lang$applyTo = G__17224__2.cljs$lang$applyTo;
        return G__17224
      }()
    };
    var G__17223 = function(f, g, var_args) {
      var hs = null;
      if(arguments.length > 2) {
        hs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__17223__delegate.call(this, f, g, hs)
    };
    G__17223.cljs$lang$maxFixedArity = 2;
    G__17223.cljs$lang$applyTo = function(arglist__17227) {
      var f = cljs.core.first(arglist__17227);
      arglist__17227 = cljs.core.next(arglist__17227);
      var g = cljs.core.first(arglist__17227);
      var hs = cljs.core.rest(arglist__17227);
      return G__17223__delegate(f, g, hs)
    };
    G__17223.cljs$core$IFn$_invoke$arity$variadic = G__17223__delegate;
    return G__17223
  }();
  _GT__EQ__GT_ = function(f, g, var_args) {
    var hs = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ__GT___1.call(this, f);
      case 2:
        return _GT__EQ__GT___2.call(this, f, g);
      default:
        return _GT__EQ__GT___3.cljs$core$IFn$_invoke$arity$variadic(f, g, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ__GT_.cljs$lang$maxFixedArity = 2;
  _GT__EQ__GT_.cljs$lang$applyTo = _GT__EQ__GT___3.cljs$lang$applyTo;
  _GT__EQ__GT_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ__GT___1;
  _GT__EQ__GT_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ__GT___2;
  _GT__EQ__GT_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ__GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ__GT_
}();
purnam.core._LT__EQ__LT_ = function() {
  var _LT__EQ__LT_ = null;
  var _LT__EQ__LT___1 = function(f) {
    return function() {
      var G__17228__delegate = function(g, gs) {
        return cljs.core.apply.call(null, _LT__EQ__LT_, f, g, gs)
      };
      var G__17228 = function(g, var_args) {
        var gs = null;
        if(arguments.length > 1) {
          gs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
        }
        return G__17228__delegate.call(this, g, gs)
      };
      G__17228.cljs$lang$maxFixedArity = 1;
      G__17228.cljs$lang$applyTo = function(arglist__17229) {
        var g = cljs.core.first(arglist__17229);
        var gs = cljs.core.rest(arglist__17229);
        return G__17228__delegate(g, gs)
      };
      G__17228.cljs$core$IFn$_invoke$arity$variadic = G__17228__delegate;
      return G__17228
    }()
  };
  var _LT__EQ__LT___2 = function(f, g) {
    return purnam.core._GT__EQ__GT_.call(null, g, f)
  };
  var _LT__EQ__LT___3 = function() {
    var G__17230__delegate = function(f, g, hs) {
      return cljs.core.apply.call(null, purnam.core._GT__EQ__GT_, cljs.core.reverse.call(null, cljs.core.into.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f, g], null), hs)))
    };
    var G__17230 = function(f, g, var_args) {
      var hs = null;
      if(arguments.length > 2) {
        hs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__17230__delegate.call(this, f, g, hs)
    };
    G__17230.cljs$lang$maxFixedArity = 2;
    G__17230.cljs$lang$applyTo = function(arglist__17231) {
      var f = cljs.core.first(arglist__17231);
      arglist__17231 = cljs.core.next(arglist__17231);
      var g = cljs.core.first(arglist__17231);
      var hs = cljs.core.rest(arglist__17231);
      return G__17230__delegate(f, g, hs)
    };
    G__17230.cljs$core$IFn$_invoke$arity$variadic = G__17230__delegate;
    return G__17230
  }();
  _LT__EQ__LT_ = function(f, g, var_args) {
    var hs = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ__LT___1.call(this, f);
      case 2:
        return _LT__EQ__LT___2.call(this, f, g);
      default:
        return _LT__EQ__LT___3.cljs$core$IFn$_invoke$arity$variadic(f, g, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ__LT_.cljs$lang$maxFixedArity = 2;
  _LT__EQ__LT_.cljs$lang$applyTo = _LT__EQ__LT___3.cljs$lang$applyTo;
  _LT__EQ__LT_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ__LT___1;
  _LT__EQ__LT_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ__LT___2;
  _LT__EQ__LT_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ__LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ__LT_
}();
if(cljs.core.truth_(window.jasmine)) {
  beforeEach(function() {
    var obj_SHARP_ = purnam.native$.aget_in.call(null, this, cljs.core.PersistentVector.EMPTY);
    var fn_SHARP_ = obj_SHARP_["addMatchers"];
    return fn_SHARP_.call(obj_SHARP_, function() {
      var G__17232 = function() {
        var obj17235 = {};
        return obj17235
      }();
      G__17232["toSatisfy"] = function(expected, tactual, texpected) {
        var actual = purnam.native$.aget_in.call(null, this, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["actual"], null));
        var actualText = [cljs.core.str(actual)].join("");
        var actualText__$1 = cljs.core._EQ_.call(null, actualText, "[object Object]") ? function() {
          var ks = function() {
            var obj_SHARP___$1 = purnam.native$.aget_in.call(null, goog, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["object"], null));
            var fn_SHARP___$1 = obj_SHARP___$1["getKeys"];
            return fn_SHARP___$1.call(obj_SHARP___$1, actual)
          }();
          var vs = function() {
            var obj_SHARP___$1 = purnam.native$.aget_in.call(null, goog, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["object"], null));
            var fn_SHARP___$1 = obj_SHARP___$1["getValues"];
            return fn_SHARP___$1.call(obj_SHARP___$1, actual)
          }();
          return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(ks, vs, actual, actualText) {
            return function(x, y) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, y], null)
            }
          }(ks, vs, actual, actualText), ks, vs))
        }() : actualText;
        var notText = cljs.core.truth_(purnam.native$.aget_in.call(null, this, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["isNot"], null))) ? "Not " : "";
        this["message"] = function() {
          return[cljs.core.str("Expression: "), cljs.core.str(tactual), cljs.core.str("\n  Expected: "), cljs.core.str(notText), cljs.core.str(texpected), cljs.core.str("\n  Actual: "), cljs.core.str(actualText__$1)].join("")
        };
        if(cljs.core._EQ_.call(null, function() {
          var obj_SHARP___$1 = purnam.native$.aget_in.call(null, goog, cljs.core.PersistentVector.EMPTY);
          var fn_SHARP___$1 = obj_SHARP___$1["typeOf"];
          return fn_SHARP___$1.call(obj_SHARP___$1, expected)
        }(), "array")) {
          return purnam.native$.js_equals.call(null, expected, actual)
        }else {
          if(cljs.core.fn_QMARK_.call(null, expected)) {
            return expected.call(null, actual)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              var or__3483__auto__ = cljs.core._EQ_.call(null, expected, actual);
              if(or__3483__auto__) {
                return or__3483__auto__
              }else {
                return purnam.native$.js_equals.call(null, expected, actual)
              }
            }else {
              return null
            }
          }
        }
      };
      return G__17232
    }())
  })
}else {
}
;goog.provide("ribol.test_cljs");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("ribol.cljs");
goog.require("purnam.core");
goog.require("purnam.native$");
goog.require("ribol.cljs");
ribol.test_cljs.truthy_QMARK_ = function truthy_QMARK_(x) {
  return cljs.core._EQ_.call(null, false, cljs.core.not.call(null, x))
};
ribol.test_cljs.falsey_QMARK_ = function falsey_QMARK_(x) {
  return cljs.core._EQ_.call(null, true, cljs.core.not.call(null, x))
};
var spec_6920 = function() {
  var obj6919 = {};
  return obj6919
}();
describe("hash-map?", function() {
  it("", function() {
    return expect(ribol.cljs.hash_map_QMARK_.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "a", "a", 1013904339), 0], null))).toSatisfy(true, "(hash-map? {:a 0})", "true")
  });
  return null
});
var spec_6923 = function() {
  var obj6922 = {};
  return obj6922
}();
describe("hash-set?", function() {
  it("", function() {
    return expect(ribol.cljs.hash_set_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [0, null, 1, null, 2, null], null), null))).toSatisfy(true, "(hash-set? #{0 1 2})", "true")
  });
  return null
});
var spec_6926 = function() {
  var obj6925 = {};
  return obj6925
}();
describe("assoc-if", function() {
  it("", function() {
    return expect(ribol.cljs.assoc_if.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "a", "a", 1013904339), null, new cljs.core.Keyword(null, "b", "b", 1013904340), 1)).toSatisfy(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "b", "b", 1013904340), 1], null), "(assoc-if {} :a nil :b 1)", "{:b 1}")
  });
  return null
});
var spec_6929 = function() {
  var obj6928 = {};
  return obj6928
}();
describe("parse-contents", function() {
  it("", function() {
    expect(ribol.cljs.parse_contents.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "a", "a", 1013904339), 0], null))).toSatisfy(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "a", "a", 1013904339), 0], null), "(parse-contents {:a 0})", "{:a 0}");
    expect(ribol.cljs.parse_contents.call(null, new cljs.core.Keyword(null, "a", "a", 1013904339))).toSatisfy(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "a", "a", 1013904339), true], null), "(parse-contents :a)", "{:a true}");
    return expect(ribol.cljs.parse_contents.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", 1013904339), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "b", "b", 1013904340), 0], null)], null))).toSatisfy(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "a", "a", 1013904339), true, new cljs.core.Keyword(null, "b", "b", 1013904340), 0], null), "(parse-contents [:a {:b 0}])", 
    "{:a true, :b 0}")
  });
  return null
});
var spec_6932 = function() {
  var obj6931 = {};
  return obj6931
}();
describe("check-contents", function() {
  it("", function() {
    expect(ribol.cljs.check_contents.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "a", "a", 1013904339), 0], null), new cljs.core.Symbol(null, "_", "_", -1640531432, null))).toSatisfy(true, "(check-contents {:a 0} (quote _))", "true");
    expect(ribol.cljs.check_contents.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "a", "a", 1013904339), 0], null), new cljs.core.Keyword(null, "a", "a", 1013904339))).toSatisfy(ribol.test_cljs.truthy_QMARK_, "(check-contents {:a 0} :a)", "truthy?");
    expect(ribol.cljs.check_contents.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "a", "a", 1013904339), 0], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", 1013904339)], null))).toSatisfy(true, "(check-contents {:a 0} [:a])", "true");
    expect(ribol.cljs.check_contents.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "a", "a", 1013904339), 0], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "b", "b", 1013904340)], null))).toSatisfy(ribol.test_cljs.falsey_QMARK_, "(check-contents {:a 0} [:b])", "falsey?");
    expect(ribol.cljs.check_contents.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "a", "a", 1013904339), 0], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "a", "a", 1013904339), 0], null))).toSatisfy(true, "(check-contents {:a 0} {:a 0})", "true");
    expect(ribol.cljs.check_contents.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "a", "a", 1013904339), 0], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "a", "a", 1013904339), cljs.core.zero_QMARK_], null))).toSatisfy(true, "(check-contents {:a 0} {:a zero?})", "true");
    expect(ribol.cljs.check_contents.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "a", "a", 1013904339), 0], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "a", "a", 1013904339), cljs.core.zero_QMARK_], null)], null))).toSatisfy(true, "(check-contents {:a 0} [{:a zero?}])", "true");
    expect(ribol.cljs.check_contents.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "a", "a", 1013904339), 0], null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "a", "a", 1013904339), null, new cljs.core.Keyword(null, "b", "b", 1013904340), null], null), null))).toSatisfy(ribol.test_cljs.truthy_QMARK_, "(check-contents {:a 0} #{:a :b})", "truthy?");
    return expect(ribol.cljs.check_contents.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "a", "a", 1013904339), 0], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "a", "a", 1013904339), cljs.core.zero_QMARK_], null), new cljs.core.Keyword(null, "b", "b", 1013904340)], null))).toSatisfy(ribol.test_cljs.falsey_QMARK_, "(check-contents {:a 0} [{:a zero?} :b])", 
    "falsey?")
  });
  return null
});
var spec_6935 = function() {
  var obj6934 = {};
  return obj6934
}();
describe("create-issue", function() {
  it("", function() {
    return expect(ribol.cljs.create_issue.call(null, new cljs.core.Keyword(null, "error", "error", 1110689146), "error", cljs.core.PersistentArrayMap.EMPTY, null)).toSatisfy(new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Keyword(null, "G__1", "G__1", 1016113692), new cljs.core.Keyword(null, "contents", "contents", 4741549708), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "error", "error", 1110689146), true], 
    null), new cljs.core.Keyword(null, "msg", "msg", 1014012659), "error", new cljs.core.Keyword(null, "options", "options", 4059396624), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "optmap", "optmap", 4298737979), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "default", "default", 2558708147), null], null), '(create-issue :error "error" {} nil)', '{:id :G__1, :contents {:error true}, :msg "error", :options {}, :optmap {}, :default nil}')
  });
  return null
});
var spec_6938 = function() {
  var obj6937 = {};
  return obj6937
}();
describe("create-signal", function() {
  it("", function() {
    return expect(ribol.cljs.create_signal.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "contents", "contents", 4741549708), new cljs.core.Keyword(null, "a", "a", 1013904339), new cljs.core.Keyword(null, "msg", "msg", 1014012659), "error"], null), new cljs.core.Keyword(null, "catch", "catch", 1108337197))).toSatisfy(cljs.core.ex_info.call(null, "error :catch - :a", new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("ribol.cljs", "contents", "ribol.cljs/contents", 
    4631325442), new cljs.core.Keyword(null, "a", "a", 1013904339), new cljs.core.Keyword("ribol.cljs", "signal", "ribol.cljs/signal", 4163140736), new cljs.core.Keyword(null, "catch", "catch", 1108337197)], null)), '(create-signal {:contents :a, :msg "error"} :catch)', '(ex-info "error :catch - :a" {:ribol.cljs/contents :a, :ribol.cljs/signal :catch})')
  });
  return null
});
